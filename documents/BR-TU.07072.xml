<?xml version="1.0" encoding="utf-8"?>
<add>
	<doc>
		<field name="docid">BR-TU.07072</field>
		<field name="filename">11708_Lopes_TonyMinoruTamura_M.pdf</field>
		<field name="filetype">PDF</field>
		<field name="text">O Problema de Planejamento e Agendamento de Operações em uma Rede de Oleodutos
Este exemplar corresponde à redação final da Dissertação devidamente corrigida c defendida por Tony Minoru Tarnura Lopes c aprovada pela Banca Examinadora.
Campinas, 29 de Julho dc 2010.
Prof. Dr. ArnaMó Vicir
(Orientador)
Prof. Dr. Cid Carvalho dc Souza (Co-orientador)
Dissertação apresentada ao Instituto de Computação, UNICAMP, como requisito parcial para a obtenção do título de Mestre em Ciência da Computação.
FICHA CATALOGRÁFICA ELABORADA PELA BIBLIOTECA DO IMECC DA UNICAMP
Bibliotecária: Silvania Renata de Jesus Ribeiro Cirilo - CRB8 /6592
Lopes, Tony Minoru Tamura
L881p O problema de planejamento e agendamento de operações em uma rede de oleodutos/Tony Minoru Tamura Lopes-- Campinas, [S.P. : s.n.], 2010.
Orientador : Arnaldo Vieira Moura ; Cid Carvalho de Souza Dissertação (mestrado) - Universidade Estadual de Campinas, Instituto de Computação.
1.	Programação por restrições. 2. Programação Linear. 3. Oleodutos.. I. Moura, Arnaldo Vieira. II. Souza, Cid Carvalho de. III. Universidade Estadual de Campinas. Instituto de Computação. IV. Título.
Título em inglês: The problem of planning and scheduling the operation of an oil pipeline.
Palavras-chave em inglês (Keywords): 1. Constraint programming. 2. Linear programming. 3.
Oil pipeline.
Área de concentração: Ciência da Computação.
Titulação: Mestre em Ciência da Computação.
Banca examinadora: Prof. Dr. Arnaldo Vieira Moura - (IC-UNICAMP)
Prof. Dr. Cid Carvalho de Souza - (IC-UNICAMP)
Prof. Dr. Guilherme Pimentel Telles - (IC-UNICAMP)
Profa. Dra. Maria Teresa Moreira Rodrigues - (FEQ-UNICAMP)
Prof. Dr. Ricardo Dahab - (IC-UNICAMP)
Prof. Dr. Carlile Campos Lavor - (IMECC-UNICAMP)
Data da defesa: 29/07/2010
Programa de Pós-Graduação: Mestrado em Ciência da Computação.
TERMO DE APROVAÇÃO
Dissertação Defendida e Aprovada em 29 de julho de 2010, pela Banca examinadora composta pelos Professores Doutores:
Prof3. Dr3. Maria Tereáa Moreira Rodrigues
FEQ/UNICAMP
Prof. Dr. G IC / UNIC
herme Pimentel Telles
Prof. Dr. Arnaldo Vieira Moura IC I UNICAMP
Instituto de Computacão Universidade Estadual de Campinas
O Problema de Planejamento e Agendamento de Operações em uma Rede de Oleodutos
Tony Minoru Tamura Lopes1
Julho de 2010
Banca Examinadora:
•	Prof. Dr. Arnaldo Vieira Moura (Orientador)
•	Prof. Dr. Guilherme Pimentel Telles
Instituto de Computação, UNICAMP
•	Profa. Dra. Maria Teresa Moreira Rodrigues
Faculdade de Engenharia Química, UNICAMP
•	Prof. Dr. Ricardo Dahad (Suplente)
Instituto de Computação, UNICAMP
•	Prof. Dr. Carlile Campos Lavor (Suplente)
Instituto de Matemática, Estatística e Computacao Científica, UNICAMP
1	Suporte financeiro de: Fundação de Amparo à Pesquisa do Estado de São Paulo (processo 05/573430), 2006-2008.
Resumo
Um conjunto de órgãos distribuidores de derivados de petróleo, incluindo refinarias e terminais, possuem demandas locais e produçães de diferentes produtos ao longo de um dado horizonte de tempo. No entanto, pode nao haver estoque local de algum produto para satisfazer a demanda correspondente, ou pode nao haver espaço nos tanques para estocar uma produção local. Isso leva a necessidade de transporte dos derivados de petróleo entre os óorgãaos.
Dentre os diversos modais, a rede de oleodutos ó a melhor opcao considerando-se custos e riscos ambientais. Em vista de sua grande complexidade operacional, um uso adequado da rede necessita de um planejamento taótico composto mensalmente, e de um agendamento detalhado das operaçcãoes, cobrindo poucos dias, e que deve ser atualizado diariamente. Tanto o plajemento mensal quanto o agendento diario devem respeitar um grande conjunto de restriçcãoes, envolvendo a capacidade dos tanques, taxas de vazãoes nos oleodutos, nóveis de estoques, dentre outras.
Esta dissertaçcãao apresenta uma formalizaçcãao do problema, desenvolvida em dois estóagios, representado o planejamento mensal e o agendamento diario. O problema de planejamento recebeu um tratamento inicial heurístico seguido de uma modelagem por fluxo em redes, enquanto o agendamento dióario utilizou programaçcãao por restriçcãoes.
Os modelos foram testados sobre dados fornecidos pela companhia brasileira de petroóleo Petrobras. Essas instâncias possuem uma das topologias mais complexas quando comparadas a outras redes encontrada na literatura aberta. Os resultados demonstram melhorias signicativas sobre a resolucçãao manual desses problemas.
Abstract
Among many transportation modes, the network of pipelines is one of the best options when considerying cost and environment risks. In order to adequately operate the pipeline network, a two phase planning strategy is developed. First, a tactical pumping plan is composed monthly and, secondly, a more detailed operational schedule, spanning a few days, is updated daily. Both the tactical and tghe operational plannings must satisfy a large set of operation constraints, involving many restrictions, such as tanks capacities, pipeline flow rates, and stock levels.
This dissertation provides a formalization for the problem along with a decomposition of it in two stages, representing the monthly planning and operational schedule. The tactical stage is solved by applying a heuristic and then with a network flow model, while the operational schedule uses constraing programming.
Our model treats the oil pipeline network that is operated by the Brazilian oil company Petrobras. This is one of the most complex and large topologies when compared to other networks treated in the open literature. The model was tested with real-world instances and showed significant improvements over human planning.
Agradecimentos
Agradeço também aos meus orientadores, Prof. Arnaldo e Prof. Cid, pela oportunidade, amizade, por me iniciarem na érea de pesquisa e por constituérem o modelo de profissional que almejo ser no futuro.
Agradeço meus irmãos e meus amigos pela convivencia, pelos étimos momentos nesses ultimos anos e por todo o apoio que me deram. Em especial ao André, pela amizade, forcça, paciêencia e grandes idéeias nas noites e madrugadas acordadas que passamos desenvolvendo este projeto.
Agradeco a FAPESP, pelo suporte financeiro ao meu projeto de pesquisa. A Petrobras, particularmente ao Fernando Marcellino, André Lima, Rêmulo Albuquerque, Leandro Barcelos, Enio Medeiros, Décio, Marcio Audi e Rubens Oshiro pelo fornecimento dos dados e, principalmente, pela oportunidade de participar deste projeto. Também agradeço aos funcionários do Instituto de Computaçao da UNICAMP, sempre dispostos a ajudar nos momentos que precisamos.
Muito obrigado!
Sumário
Resumo
Abstract
vi
Agradecimentos
vii
1	Introdução	1
1.1	Contextualização.................................................... 2
1.2	Organizaçao do Texto ............................................... 2
2 O Problema de Planejamento e Agendamento de Operações em uma
Rede de Oleodutos	4
2.1	Caracterização do PPAORO............................................... 5
2.2	Parâmetros e Constantes Gerais......................................... 5
2.2.1	Restricoes nos (Órgãos ......................................... 6
2.2.2	Restriçães dos Dutos............................................ 8
2.2.3	Dados Dinâmicos da Rede........................................ 10
2.3	Soluçao e Objetivos................................................... 11
2.4	Modelo da Rede de Dutos............................................... 11
2.5	Topologia Brasileira.................................................. 12
3 Revisao Bibliográfica
14
4 Arquitetura do Modelo de Resoluçao	20
4.1	Fase de Planejamento........................................... 21
4.2	Fase de Agendamento............................................ 22
5 Conceitos Básicos de Modelagem	24
5.1 Programação Lógica por Restriçães................................... 24
5.1.1 Definindo um modelo para satisfação de restriçães............ 25
5.1.2	Encontrando uma solução......................................... 25
5.1.3	Melhorias na modelagem.......................................... 26
5.2	Programaçao Linear Mista............................................... 27
5.2.1	Fluxo em Redes.................................................. 28
6	Um	modelo para o Problema de Agendamento	32
Prólogo ............................................................... 32
1	Introduction........................................................... 34
2	Problem Definition..................................................... 37
2.1	Tank Restrictions............................................... 37
2.2	Pipeline Restrictions........................................... 38
2.3	Depot Restrictions.............................................. 40
2.4	Inventory Constraints........................................... 41
2.5	Definition of a Solution........................................ 42
3	Related Work........................................................... 43
4	Methodology ........................................................... 46
4.1	Planning and Routing............................................ 47
4.2	Scheduling Phase................................................ 51
4.3	The Sequencing Sub-problem ..................................... 52
4.4	The Scheduling Sub-problem...................................... 68
4.5	A Running Example............................................... 70
5	Results ............................................................... 73
6	Conclusions ........................................................... 74
Bibliografia	77
Epólogo ............................................................... 80
7	Um	modelo para o	Problema de Planejamento	83
Próologo .............................................................. 83
1	Introduction .......................................................... 85
2	Problem Definition .................................................... 87
2.1	Tank Restrictions............................................... 89
2.2	Pipeline Restrictions........................................... 89
2.3	Inventory Constraints........................................... 90
2.4	Input Instances and Solutions................................... 90
3	A Network Flow Model for the Planning Phase............................ 92
3.1	Network Model Definition........................................ 92
3.2	A Linear Programming Model...................................... 97
3.3	Network Flow Decomposition......................................101
4	Computational Results...............................................103
5	Conclusions and	Future Work.........................................104
Bibliografia	107
Epílogo.............................................................110
8	Conclusões	112
Bibliografia	114
Lista de Tabelas
3.1	Comparação entre abordagens anteriores.............................. 15
6	Um modelo para o Problema de Agendamento	32
1	Solution Example.................................................... 43
2	Comparison of the main approaches................................... 43
3	Solver and model statistics......................................... 75
7	Um modelo para o Problema de Planejamento	83
1	Initial values and constants	for	an	input instance ................. 91
2	Node description for the Pipeline	Network flow	Model................ 93
3	Execution Results...................................................103
4	Manual planning vs Real planning - Total Network Flow Proportion . . . .103
5	Manual planning vs Real planning - Total Network Flow Proportion by
Product ........................................................... 103
6	Manual planning vs Real planning - Total Network Flow Proportion by
Pipeline .......................................................... 104
Lista de Figuras
2.1	Modelo esquemático de uma rede de dutos.......................................... 12
2.2	Representação do sistema de dutos da regiao Sudeste de São Paulo (figura
fornecida pela Petrobras)........................................................ 13
6	Um	modelo para o Problema de Agendamento	32
1	petrobras pipeline network....................................................... 36
2	A pipeline network example....................................................... 38
3	Example of a flow reversal....................................................... 40
4	Solver Framework................................................................. 48
5	Activities for each pipeline in a delivery order’s route......................... 55
6	Connection between two consecutive pipelines in an order’s route................. 56
7	Case when the send and receive activity sequences are different.................. 59
8	Example of edges in the pushing graph for a single pipeline...................... 62
9	Example of activity unification.................................................. 69
10	A small example.................................................................. 73
11	Tankage Evolution for two instances.............................................. 74
7	Um	modelo para o Problema de Planejamento	83
1	A Sample Pipeline Network........................................................ 86
2	The inland pipeline network...................................................... 88
3	Nodes and arcs representing pairs of depots d and products p. Items within
parenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index. .	95
4	Nodes and arcs for the stock of a pipeline with contents (p, qty, r). Items within
parenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index. .	96
5	Nodes and arcs representing volumes traveling along routes. For a fixed route r and product p, at every period ti a new subnetwork is created so that the quantity will only be delivered after enough periods have passed. The subnetwork for period t = 3 was omitted to show more of the subnetwork for period t = 2. Items within parenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index............................................................................
Capítulo 1
Introdução
A indústria de petróleo brasileira possui bases, também chamadas de órgãos, distribuidoras de derivados de petróleo, espalhadas por todo o paós. Essas bases devem atender às demandas regionais. Entretanto, como grande parte da produção de petróleo e seus derivados e localizada, hó necessidade de transporte dos produtos entre os órgaos. Dentre os meios de transporte disponíveis, o menos custoso e mais aceitóvel ambientalmente é aquele realizado usando redes de oleodutos. Nos Estados Unidos, por exemplo, as entregas por redes de oleodutos representam mais que 17% do volume total transportado, poróm, menos de 2% do custo logóstico [51].
As redes de oleodutos, para serem realmente efetivas, necessitam de controle e planejamento constante. Dois dos grandes problemas enfrentados, os quais são tratados nesta dissertacçaão, sãao o planejamento mensal da operaçcãao dos dutos e o detalhamento dióario da movimentaçcãao dos produtos pelos dutos. Na resoluçcãao de ambos óe necessóario respeitar restriçcãoes operacionais sobre as atividades nos óorgãaos e nos dutos. Exemplos de restricçãoes estaão nas capacidades dos tanques, taxas de vazoães diferenciadas por produto, duto e sentido de fluxo, além de nóveis de estoque.
Atualmente, o planejamento mensal e agendamento dióario das operaçcãoes sãao feitos manualmente. Inicialmente, em uma reunião entre os orgaos distribuidores, refinarias e os engenheiros de distribuiçcãao saão discutidas as movimentaçcãoes para atender as demandas e planejar as produçcãoes de forma a atingir um consenso. Isso formaróa o planejamento mensal das movimentaçcãoes que seróa o alvo do agendamento dióario. Assim, durante o mês planejado cada órgão propãe as operacães necessórias para escoar sua producao e atender sua próopria demanda. Em seguida, essas propostas sãao reunidas, e verifica-se a viabilidade de combina-las. Quase sempre aparecem muitos conflitos, forcando os órgãos a se comunicar para resolver os conflitos e fechar uma soluçcaão que seja adequada para todos. Dada a extrema dificuldade e morosidade deste procedimento, têem-se aceitado como adequada qualquer soluçcãao que atenda a demanda, sem preocupaçcãoes com a reduçcãao
de custos, entre outros aspectos.
Enquanto o problema de planejamento mensal mantém-se sem abordagens computacionais, já é conhecido que a dificuldade do problema de agendamento diério esté diretamente ligada ao fato dele ser classificado como NP-Difácil [33]. Neste ambito, é comum a utilizaçao de ferramentas computacionais para fornecer solucões melhores e mais rapidamente para o problema. Outros trabalhos já trataram problemas semelhantes e a realidade brasileira também já foi alvo de outras pesquisas, como será abordado no capítulo 3. No entanto, dados os inumeros detalhes a serem considerados, nenhuma dessas solucões poderia ser adotada para operar redes complexas.
Essa dissertaçcõao apresentaréa uma formalizaçcõao para o problema de planejamento mensal da operaçcõao da rede de oleodutos e tambéem uma nova abordagem para o agendamento diério dessas operacões. O objetivo é fornecer uma ferramenta útil às empresas, tratando o méaximo de especificidades, sem abusar de simplificaçcõoes.
1.1	Contextualização
O problema em questao foi apresentado pela Petrobras [42], que possui uma rede de oleodutos com cerca de 11.300 km de extensao, contendo 15 refinarias e 54 terminais. A Petrobras forneceu todos os dados necessérios para a definicõo das instâncias usadas na realizaçao de testes e validaçõo dos algoritmos. Hé também uma interface gréfica, desenvolvida pela Petrobras, para visualizaçao e verificacõo de viabilidade de soluções.
O projeto rendeu duas dissertaçcõoes, esta apresentada aqui e outra apresentada em 2008 por André Ciré [10]. Os trabalhos foram desenvolvidos em conjunto e totalizaram 3 artigos publicados e um submetido. O capitulo 6 compararé os artigos apresentados por Andrée Cirée com alguns dos resultados apresentados nesta dissertaçcaõo. Aléem disso, por ser um problema comum em ambas as dissertaçcoões, os capétulos 2, 3 e 4 sõao compartilhados e apresentados aqui com revisõoes e alteraçcõoes pontuais.
1.2	Organização do Texto
O Problema de Planejamento e Agendamento de Operações em uma Rede de Oleodutos (PPAORO) é explicado detalhadamente no capétulo 2. Uma revisõo bibliográfica do problema ée descrita no capétulo 3. No capétulo 4 ée proposta a decomposiçcaõo do problema em duas partes, o planejamento mensal e o agendamento diéario. O capétulo 5 déa uma pequena introduçao às notacões e metodologias necessérias para as modelagems propostas. Em seguida, o capétulo 6 contém o artigo publicado no periódico Constraints com o modelo em programacçõao por restricçõoes para resoluçcõao do problema de agendamento
diário. O artigo também discute uma abordagem heurística inicial para o problema de planejamento mensal. O capítulo 7 expõe o artigo submetido ao periódico Computer &amp;amp; Chemical Engineering com o modelo em fluxo em redes para resolucõo do problema de planejamento mensal. Por fim, o Capítulo 8 apresenta uma conclusõo e propõe possíveis trabalhos futuros.
Capítulo 2
Empresas de petróleo dispõem usualmente de um conjunto de refinarias e terminais, denominados órgãos, os quais sao dedicados à produçõo e distribuição de derivados de petróleo e bio-combustíveis aos seus mercados consumidores. As campanhas de produçõo das refinarias e de entrega aos mercados sao traduzidas, respectivamente, em valores estimados de produçao e demanda de produtos em cada órgõo da rede [6, 9].
Contudo, os órgõos nõo sao auto-suficientes no suprimento de seus mercados locais. Torna-se necessório, portanto, o uso de algum meio de distribuido para evitar a falta de produto nos terminais e para escoar a produçõo em excesso nas refinarias. Tal transporte ó predominantemente feito por meio de uma rede de dutos, a alternativa mais vantajosa em termos econômicos, operacionais e ambientais [43].
Os dutos devem ter respeitadas suas capacidades, seus sentidos permitidos de fluxo e suas vazões de bombeamento. Um duto pode ser usado para movimentar diferentes tipos de produto consecutivamente. Note que alguns dutos permitem vazõo em ambos os sentidos, com inversões de fluxo. Outra característica operacional é que os dutos devem estar sempre completamente preenchidos, ou seja, a extraçcõao de um volume implica que necessariamente outro volume deve ser bombeado simultaneamente.
Os produtos, por sua vez, estõo associados a um conjunto de restrições de interface, isto é, apenas podem ser bombeados consecutivamente em um duto se forem compatóveis entre si, condicao essencial para a manutencao de um nível de qualidade aceitóvel. Para os produtos que circulam nos dutos, cada órgõo tambóm apresenta restrições locais de bombeamento e recebimento de produtos, decorrentes das conexoões internas entre tanques e dutos.
O Problema de Planejamento e Agendamento de Operações em uma Rede de Oleodutos (PPAORO), desta forma, consiste em determinar as operações a serem realizadas em uma rede de dutos a fim de escoar a produçao e atender um dado conjunto de demandas, considerando um horizonte temporal pré-estabelecido. Esta programaçõo deve satisfazer todas as restrições operacionais especéficas dos orgaos e dutos, além de buscar reduzir os custos de transporte pelo sistema.
Este capétulo é compartilhado com a dissertaçõo de André Ciré [10] e apresentado aqui com revisõoes e alteraçcõoes pontuais.
2.1	Caracterização do PPAORO
A seguir, saõo descritos os dados e restriçcõoes que formalizam o PPAORO, necesséarios para definir as instâncias e suas soluções validas. Tal caracterizaçõo pode ser dividida em quatro classes: parâmetros e constantes gerais do problema, restrições dos órgãos, restrições dos dutos e dados dinâmicos da rede. As trâs primeiras classes estõo relacionadas à topologia física e pouco mutavel da rede, enquanto a ultima varia conforme o horizonte de planejamento.
2.2	Parâmetros e Constantes Gerais
Há quatro parâmetros fundamentais para o PPAORO, conforme relaçõo abaixo.
1.	Unidade de Tempo (u.t.): designa a unidade de tempo real que seré utilizada para a discretizaçõo da instância e precisao dos modelos desenvolvidos. Nos cenérios reais, é comum que seja utilizado minuto como a u.t. bésica.
2.	Unidade de Volume (u.v.): analogamente à u.t., designa a unidade de volume real que seré utilizada para as vazoes e capacidades. Usualmente sao metros cúbicos.
3.	Horizonte (H): um numero inteiro que designa o horizonte de execucao em unidades de tempo, isto ée, o tamanho da janela de tempo da instâancia na qual o planejamento e agendamento devem ser aplicados. Considera-se tambéem que o instante inicial de planejamento é 1. Por exemplo, dados H = 14400 e u.t. em minutos, tâm-se um horizonte de 10 dias em tempo real.
4.	Conjunto de Produtos (P): o conjunto P = {pi,p2, ■ ■ ■ ,pnp} designa os produtos que sõao armazenados e transportados pela rede. Um grupo de produtos e um subconjunto de P formado por produtos com certas características químicas semelhantes, tais como os grupos de gasolinas, dieseis e alcoois. Algumas restricçõoes, tal como as
de interface, podem ser definidas sobre grupos ao invós de produtos individuais, facilitando a representaçcãao do problema.
__	z
2.2.1	Restricoes nos Órgãos
Uma rede de dutos possui um conjunto de órgaos Org = {o1,o2,... ,ono}, responsaveis pela producão, armazenamento e distribuicão de produtos. Um numero significativo das restricoes de um determinado orgao o G Org estó relacionado com seu complexo de tanques, dado pelo conjunto T(o) = {t1,t2,... ,tnto}. Tais restrições são descritas a seguir, com Tq = |JoeOrfl T(o).
C1: Para um dado tanque t G Tq, deve-se respeitar sua capacidade móxima de armazenamento cap(t) e nunca violar sua capacidade mínima, que ó zero.
C2: Um tanque t G Tq pode armazenar apenas um tipo de produto prod(t) G P durante todo o horizonte de planejamento, condiçao imposta como um requisito de qualidade. Alóm disso, usualmente hó mais de um tanque por produto em cada órgão, mas não necessariamente um óorgãao contóem tanques para todos os produtos da rede. Se T(o) = 0 para um dado o G Org, o órgão ó denominado entroncamento, isto ó, utilizado apenas para a passagem de produtos.
No cenario real, ha casos em que certos tanques podem ser utilizados para o armazenamento de produtos diferentes dos originalmente atribuídos, o que envolve a aplicaçao de um custo fixo relativo à limpeza e a outros detalhes operacionais. Como sãao casos indesejóaveis e muitas vezes provenientes da dificuldade do planejamento manual, a restriçao C2 ó inclusive requisitada pelos operadores da Petrobras.
C3: Um produto pode ser tanto bombeado para um tanque quanto retirado dele, desde que essas operaçães não sejam simultaneas. Isto significa que, ao iniciar uma inserção ou retirada em um tanque, toda a operaçcaão deve ser completada antes que qualquer outra seja realizada neste tanque.
Uma exceção a este caso ocorre em órgãos que representam terminais portuórios. Devido ao período restrito em que os navios podem ficar parados nos portos, muitas vezes volumes de produtos devem ser enviados diretamente dos dutos para os navios sem pró-estocagem. Para tanto, realiza-se uma operacao pulmão, onde o produto ó simultaneamente bombeado nos dutos para um tanque, e do tanque para o navio com uma vazãao menor. No entanto, a operaçcãao pulmãao óe apenas possóvel para alguns órgaos que possuem esta capacidade hidróulica, definido pelo conjunto Pulm G Org.
Além disso, como hipótese, um tanque que esvaziou pode ser reabastecido sem que seja necessario considerar um tempo para limpeza e preparo para o armazenamento de volume adicional.
C4: Se o produto a ser inserido em um tanque e produzido localmente, isto e, no mesmo orgão, o tanque so pode receber este produto se estiver completamente vazio, condicão imposta tambem por questães de qualidade.
C5: Caso ocorra a mistura de dois volumes produzidos em orgãos distintos num certo tanque, a qualidade do produto devera ser reverificada antes da entrega ao mercado consumidor ou bombeamento para outros orgãos. Isto e representado aqui como um tempo de certificação, Tc, considerado entre o instante final em que se der a mistura e o instante inicial das demais operacãoes no tanque.
Uma vez definidas as condicães de armazenamento de produto nos orgaos, e possível listar as restrições referentes as necessidades de estocagem impostas pelos mercados, além daquelas relacionadas aos limites de envio e recebimento.
C6: O valor de estoque de um érgao o G Org, produto p G P e instante i é dado somandose o volume em i de todos os tanques em T(o) que armazenam p. Em todos os érgãos e instantes, tal estoque deve respeitar limitantes de estoque mínimo, estxmin(o,p), e estoque máximo, est_max(o,p). Esta restriçao é proveniente da necessidade de se manter estoques de segurançca para forçcar o escoamento da producçãao atravées da rede e para eventuais problemas na distribuiçcaão, tal como manutencçãoes emergenciais de dutos.
C7: Devido as restricães sobre o conjunto de bombas e válvulas hidráulicas em um certo orgão o G Org, deve ser observado um numero mãximo de operações simultâneas de envio, env_max(o). Como são relativas aos bombeamentos, não há uma restrição anéaloga para recebimento de produtos em o.
C8: Alinhamentos proibidos: o complexo de conexoes internas aos orgaos, principalmente refinarias, nãao permite que determinadas operaçcãoes em oleodutos ocorram simultaneamente. Cada configuraçao nao-passível de uso para transporte de produtos ée associada a um alinhamento proibido, um céodigo que agrupa as operaçcãoes proibidas de serem exercitadas simultaneamente no éorgãao.
Supondo que Align(o) sejam os alinhamentos proibidos de o G Org, cada alinhamento alin G Align(o) é formado por um conjunto de duplas (p, s), onde p G P e s (sentido) indica se a operacão e relativa ao envio ou recebimento. Por exemplo, o alinhamento alin = {(gasolina, envio), (diesel, recebimento)} significa que as
operações de envio de gasolina e recebimento de diesel não podem ser simultâneas. Um certo alinhamento pode envolver diversos produtos e diferentes direções de fluxo. Além disso, como esta relacionado às conexões internas de um órgão, não depende dos dutos de entrada ou saéda de produto.
Essa forma de representacõo facilita a modelagem do PPAORO, evitando a necessidade de explicitar detalhes da topologia dos circuitos hidréaulicos e dutos internos ao éorgaõo.
C9: Devido principalmente ao custo mais alto da energia elétrica em certos peréodos do dia, um órgão deve obededer a períodos de sazonalidade, momentos em que nenhuma operacao pode ser iniciada. Para um dado órgao o G Org, períodos de sazonalidades são dados como um conjunto de intervalos de tempo, saz(o) = {(ÍnÍCÍoi, fími), . . . , (ínícíonsaz(o), fímnsaz(p))'}-
C10: Operaçães também não podem ser nem iniciadas, nem terminadas, durante as trocas de turno de trabalho nos vórios orgaos. Estas trocas são dadas de forma anóloga aos períodos de sazonalidade, tt(o) = {(ínícío1, fími),..., (ínícíott(o), fímtt(o))}, o G Org.
2.2.2	Restrições dos Dutos
A rede esta associada a um conjunto Dt = {d1, d2,..., dnd} de dutos, onde cada d G Dt conecta um par de orgaos orgs(d) = (oí, oj), com oí, oj G Org. No caso, o¿ ó denominado órgão ou extremidade de origem e oj, órgão ou extremidade de destino do duto d. O sentido de fluxo da extremidade de origem à de destino corresponde ao sentido principal do duto, ou p(d). Ja o sentido de fluxo contrório corresponde ao sentido reverso do duto, ou r(d). Outra caracteróstica óe que dois óorgãaos podem estar conectados por mais de um duto, o que ó usual nas instancias reais. Volumes tambóm podem ser transmitidos diretamente de um duto para outro, sem a necessidade de serem armazenados temporariamente em óorgãaos intermediaórios.
A partir dos órgãos e dutos, define-se tambóm o conceito de rotas. Uma rota r ó composta por uma seqüância de pares de órgãos separados por dutos, representando um percurso vóalido atravóes da rede. As rotas possóveis sãao prefixadas e informadas como parâmetro: se um certo volume de produto v for transmitido de um órgão oí da rede ató um órgao oj, passando por um ou mais orgaos e dutos intermediários na sequância d1, oí+1,..., oj-1, dn, j = í + n, necessariamente a rota r = (oí, d1, oí+1,..., oj-1, dn, oj) deve existir. Note que os volumes sãao transmitidos diretamente entre os dutos inter-medióarios de uma rota, sem perdas ou armazenamento nas conexoães intermedióarias.
As restriçcãoes referentes aos dutos saão listadas a seguir.
C11: Os dutos são pressurizados e, portanto, devem sempre estar completamente preenchidos com produtos. A capacidade volumetrica de um duto d G Dt é definida por voi(d).
Tambem e considerada uma conservaçao de massa ideal: para se retirar um determinado volume v de uma extremidade do duto, deve-se inserir o mesmo volume v em sua outra extremidade. Tal volume pode ser proveniente de um tanque ou mesmo de um outro duto, interligado ao mesmo orgão atraves de uma de suas extremidades.
C12: As vazões de bombeamento em um duto sao limitadas por produto, devido às suas viscosidades, e pelo sentido de fluxo, decorrente das diferencas na capacidade das bombas entre os orgaos de origem e destino e inclinação do terreno. Usualmente du-tos em terrenos inclinados possuem uma vazãao de descida maior que a de subida. Os limites inferior e superior das vazães para um duto d G Dt, produto p G P e sentido s G {p(d),r(d)} são dados, respectivamente, por vzjinf (d,p,s) e vz_sup(d,p, s).
Assim, para se bombear um certo volume em um duto, deve-se considerar todos os produtos e sentidos dos dutos nas rotas que serão movimentadas como consequência do bombeamento. A vazão maxima de bombeamento sera, portanto, o ménimo das vazoes superiores destes produtos nos seus respectivos sentidos. Jé a vazao ménima de bombeamento seréa dada pelo méaximo das vazãoes inferiores.
Os parêmetros vz_inf (d,p, s) e vz_sup(d,p, s) tambem indicam os sentidos possíveis de fluxo para os produtos em um duto. Por exemplo, se um produto p sé puder trafegar no sentido principal do duto, então vz-inf (d,p, r(d)) = vzsup(d,p, r(d)) = 0.
C13: Devido à questães operacionais das bombas de cada orgão, deve-se respeitar tambem uma quantidade mínima de bombeamento ao se injetar produtos nos dutos. O volume bombeado em um duto também pode ser denominado de batelada, e esta restrição tambem é comumente referenciada como tamanho mínimo de batelada na literatura. Tal quantidade é definida por duto d G Dt, produto p G P e sentido s G {p(d), r(d)}, dada por qtde-min(d,p, s).
C14: Dois produtos em contato num certo duto devem ser compatíveis. Pares incompatíveis são dados pelo conjunto de duplas Incomp = {(gix,gj1),..., (gin ,gjn)}, onde gk C P é um grupo de produtos.
Esta restrição está ligada à manutenção da qualidade dos produtos, de forma a evitar a degradação decorrente da mistura (ou interface) entre tipos quémicos diferenciados. Caso seja absolutamente necesséario enviar dois produtos incompatéveis em sequência, deve-se interpor entre eles um terceiro produto, compatével com ambos, chamado de selo. O volume de selo depende do oleoduto , dos produtos em
questao e do sentido do fluxo, e e dado por selo(d,p, q, s), para d G Dt, p,q G P e s G {p(d),r(d)}.
C15: Os dutos possuem períodos de manutenção específicos, momentos em que são realizados reparos e limpeza. Os períodos de manuntencão são dados por manut(d) = {mnuti,mnut2,... ,mnutnm(d)}, d G Dt. Cada elemento mnuti = (inicio, fim) indica que, durante os instantes inicio e fim, não poderâo ocorrer movimentaçães de produtos em nenhum sentido do duto.
2.2.3	Dados Dinâmicos da Rede
Os dados dinâmicos são parâmetros que não se referem à topologia física da rede, mas são específicos da instancia a ser tratada pelo algoritmo. Podem ser divididos em trâs grupos: dados relativos ao estado inicial da rede, relativos à producão e relativos a demanda.
Os dados do estado inicial da rede sãao dois:
1.	Estoque inicial dos tanques, indicando o produto e o volume inicial nos tanques.
2.	Conteúdo inicial dos dutos, dado para todos os dutos por uma seqüância da forma DIni(d) = {(pm, qm, rm),..., (pn, qn, rra)}, d G Dt. A tripla (p, qj, rj) representa, respectivamente, um produto pj G P, sua quantidade qj e a rota que deve seguir, rj. Desta forma, considera-se que os produtos inicialmente nos dutos jaí possuem um destino príe-estabelecido, que obrigatoriamente deve ser respeitado pelas soluçcãoes geradas. A ordem das tuplas na sequância DIni(d) refere-se ao sentido principal de fluxo no duto.
As campanhas de produçcãao para cada oírgaão o G Org sãao definidas pelo conjunto Pr(o) = {pri,pr2,... ,prnpr}, onde cada elemento pri G Pr (o) í formado pela tupla (p,v, inicio_pr, fim_pr). No caso, p G P í o produto que serí refinado, v um inteiro não-negativo que representa o volume produzido e, por fim, [inicio_pr, fim_pr] representa o intervalo de tempo em que a produçcãao ocorrera no orgãao.
O volume v produzido e distribuído uniformemente entre as t = fimpr — inicimpr + 1 unidades de tempo, isto é, a cada instante serâo produzidas \v/t\ unidades de volume (u.v.). A producão pode ser distribuída em diferentes tanques durante este intervalo, contanto que estejam vazios imediatamente antes de a receberem (restricão C4).
Ja as demandas sao dadas de forma simetrica as producoes. Para o írgão o G Org, í definido o conjunto Dem(o) = {dem\,dem2,... ,demndem}, onde cada elemento demi G Dem(o) í formado pela tupla (p, v, inicimdem, fim_dem). Tâm-se que p G P í o produto da demanda, v íe um inteiro nãao-negativo que representa o volume demandado e, por fim, [inicioodem, fimodem] representa o intervalo de tempo em que a demanda ocorrerí no
2.3.	Soluçao e Objetivos
11
orgao o. O volume v demandado é distribuído uniformemente entre as t = fim.dem — inicio_dem + 1 unidades de tempo, isto é, a cada instante serâo extraídas \v/t\ unidades de volume (u.v.). Tal como a producão, demandas podem ser absorvidas de diferentes tanques durante este intervalo.
2.3	Solução e Objetivos
Uma solução é formada por uma programaçao de movimentos de entrada nos dutos. Cada movimento é designado pela tupla m = (p, r,v, inicio_m, fim_m,ts,te), isto é, por um produto p E P, uma rota r cadastrada, o volume v positivo do produto, os instantes de início, inicio_m, e fim, fimjm, de bombeamento do produto no primeiro duto da rota e, por fim, pelos tanques de saída ts E Tq e de entrada te E Tq, de onde o volume sera extraído e onde sera armazenado, respectivamente. O conjunto de movimentos deve ser tal que respeite todas as restricoes nos órgãos e dutos, além de satisfazer as campanhas de producão e demandas em cada órgão.
No modelo proposto aqui, o foco seró dado a satisfacão de restriçães ao inves da otimizaçao de uma certa funcão objetivo, devido à alta complexidade de se obter solucães vióveis para o PPAORO. Assim, custos relativos a utilização dos dutos e tanques sao desconsiderados. Isto é condizente com a pratica atual realizada pela Petrobras, na qual o correto atendimento da demanda óe prioritóario frente aos demais custos.
2.4	Modelo da Rede de Dutos
A figura 2.1 apresenta um modelo esquemótico simples de uma rede de dutos. Cada óorgãao Di apresenta seu proóprio conjunto de tanques, e note que mais de um duto pode ser utilizado para conectar dois órgãos distintos, tal como ocorre entre D2 e D3.
Para que dois produtos fiquem em contato no duto, como em P2, ambos devem ser compatóveis entre si, obedecendo a restrição C14. Se o órgão D0 possuir um numero móximo de envios simultêneos igual a 1 (restricão C7), então produtos não podem ser injetados simultaneamente em P0 e Pl a partir de D0. Alem disso, caso existir um alinhamento proibido (restriçao C8) de recebimento de produtos Fl (cor cinza) e F2 (cor escura) no orgão D3, ele nao podera receber produtos dos dutos P3 e P4 simultaneamente.
Por fim, um exemplo de rota seria r = (Dl, P2,D2, P4, D3). Se o destino do produto Fl (cor cinza) do duto P2 for o órgao D3 pela rota r, a vazao aplicada para empurrar o duto P2, no caso a partir de Dl, deve ser consistente com as vazães dos produtos tanto de P2 como do duto P4, que tambem sera empurrado.
Figura 2.1: Modelo esquemático de uma rede de dutos.
2.5	Topologia Brasileira
A especificaçáo do PPAORO aqui descrita agrega as principais restrições abordadas na literatura do problema, alem de representar com certa fidelidade a realidade enfrentada pelos planejadores e operadores de dutos. Ela foi concebida a partir da analise bibli-ografica do PPAORO e, principalmente, apos diversas reuniões juntos aos gerentes da PETROBRAS.
A dissertaçõo focara na rede de dutos da regiao Sudeste do Brasil, gerenciada pela Petrobras e representada na figura 2.2. Esta rede é composta por 14 orgõos, 29 dutos, cerca de 240 tanques e mais de 30 produtos. O horizonte de planejamento e de cerca de 10 dias.
Figura 2.2: Representação do sistema de dutos da região Sudeste de São Paulo (figura fornecida pela Petrobras).
Capítulo 3
Revisão Bibliográfica
O problema abordado nesta dissertaçõo engloba um conjunto de restrições bastante complexo e diversificado, relacionando fatores como capacidade de estocagem, sequenciamento de produtos nos dutos e condiçcõoes de balanceamento de massa em sua especificaçcõao mais geral. O trabalho de [33] demonstra que basta considerar a restriçõo C14, de interfaces entre produtos, para que o PPAORO seja classificado como NP-Dificil [40].
Na literatura, o problema é usualmente conhecido como Multiproduct Pipeline Scheduling e diversos trabalhos se propuseram a apresentar abordagens heurísticas ou exatas para sua resoluçõo. Contudo, em decorrância da grande aplicabilidade prática do problema, os trabalhos existentes diferem bastante na forma como definem e adaptam restrições às suas respectivas realidades. Desta forma, trâs pontos sõo essenciais para a compreensõo de cada proposta de modelagem: a topologia da rede, o máetodo de resoluçcaõo aplicado e, por fim, os resultados computacionais e a operacionalidade das soluçcõoes.
Há pesquisas dedicadas à revisao bibliográfica do PPAORO, tais como [17, 50], que apresentam uma anaálise bastante detalhada das abordagens existentes na áarea. Assim, a revisõao aqui descrita procuraráa destacar as propostas mais relevantes e que serviram como base para o desenvolvimento da abordagem aqui discutida. A tabela 3.1 sintetiza as caracterásticas de tais propostas e a compara com este trabalho.
Este capítulo á compartilhado com a dissertaçao de Andre Cirá [10] e apresentado aqui com revisõoes e alteraçcõoes pontuais.
Dentre tais trabalhos, o estudo mais completo da áarea áe realizado por Camponogara
[9], cujas características mais se aproximam da realidade quando comparadas aos demais trabalhos. Nele, define-se um Problema de Transporte de Derivados de Petróleo Simplificado, ou PTDPS, no qual as vazões sõo fixas por duto, todas as bases sõo capazes de armazenar todos os produtos (eliminando-se, assim, a transmissõao de produtos duto-duto), e nao há trocas de turno ou manutenções programadas. Tambám desconsideram-se estoques mánimos por base e quantidades mánimas por operaçcõao. Os tanques, por sua vez,
	[3, 2]	[7, 20, 44, 45]	[8, 35, 6]	[16, 15, 23]	[30]	[46, 48, 47]	Proposto
Órgãos	8	5	12	7	2	2	14
Dutos	8	4	28	7	1	1	29
Tanques	40	25	84	28	16	12	242
Produtos	5	4	7	4	8	6	32
Horizonte	14 dias	3 dias	5 dias	4 dias	5 dias	30 dias	10 dias
Tempo contínuo		rí	rí				rí
Vazao variavel		rí			rí	rí	rí
Tanques individuais					rí		rí
Rede Generica	rí		rí	rí			rí
Incompatibilidades		rí	rí		rí	rí	rí
Tecnicas	GA	PLM,VNS, PLM,PLI	A-Teams, GRASP,PLM	AE+PLM	PLM+PR	PLM	PLM+PR
Soluções	Viavel	(Ótimo	Inviável Viável,Viável	Viavel	Otimo	Otimo	Viável
Tabela 3.1: Comparação entre abordagens anteriores.
são agregados, isto ó, ha um tanque por órgão com capacidade equivalente a soma de todos os tanques que armazenam o produto em questão.
Para a resolução do PTDPS, o trabalho de [9] propôs duas tócnicas distintas, uma exata e outra heurística. A primeira, modelada como uma Programação Linear Inteira (PLI) [52], buscava reduzir o PTDPS a um problema de Fluxo em Redes Multiperíodos
[5], com dutos e oórgãaos como vóertices e transmissãoes de quantidade como arestas. Apesar da existencia de algoritmos com bom desempenho para problemas deste tipo, verificou-se que a resoluçcãao do modelo PLI do PTDPS era impraticaóvel, como consequôencia do tamanho e densidade do grafo resultante da topologia da rede. Para as ultimas versães dos resolvedores comerciais de PLI atóe a publicacçãao desta dissertaçcãao, o tempo móedio para se obter uma solucao para a relaxação linear do modelo foi de 50 horas x.
A segunda tecnica proposta em [9] caracterizava-se pela aplicacão de Times Assíncronos ao PTDPS, heurística na qual diversos agentes autônomos tratam de partes distintas do problema, trocando de tempos em tempos informaçcãoes relevantes para a sua resoluçcãao. Para viabilizar a aplicação da heurística, o problema foi modelado como um Job Shop Scheduling [9], composto por dois agentes: um para a geraçao de bombeamentos de quantidades entre bases e dutos, os jobs, e outro para o agendamento e simulacão de tais bombeamentos nos dutos, equivalente ao processamento dos jobs em móquinas (dutos).
Apesar de mais eficiente, a aplicaçcãao de Times Assóncronos proposta por [9] nãao foi capaz de gerar solucçãoes vióaveis para as instôancias apresentadas, em decorrôencia das es-tratóegias essencialmente gulosas atribuódas aos agentes. Com esta perspectiva, Laber [35] utilizaram os Times Assíncronos como a fase gulosa de uma metaheurística GRASP [49]
1Usando a ferramenta CPLEX 11, em um computador Pentium D - 3.4Ghz com 2 GB RAM
para o PTDPS, desenvolvendo uma busca local para o reparo das soluções. Como consequência, foram capazes de satisfazer todas as restrições consideradas no PTDPS, mas o tempo necessário para a ressimulaçõo após cada aplicaçõo da busca local inviabilizava sua utilizacçõao.
Posteriormente, Braconi [6] relaxou o modelo PLI de Fluxo em Redes Multiperíodos de [9], denominando a resoluçõo deste novo modelo Etapa de Planejamento. Esta soluçõo parcial era entõo utilizada como parte de uma segunda heurística, a Etapa de Agendamento, na qual atribuía-se tempos aos fluxos criados na primeira etapa. Esta tácnica permitiu obter soluçoes rapidamente, mas as relaxacoes intrínsecas à definiçao do PT-DPS, tal como tanques para todos os produtos em todos os oárgaõos, tornavam as soluçcõoes encontradas pouco aplicaáveis na praática.
Outro trabalho fundamentado na aplicaçõo de heurísticas ó de Crane [13], no qual um Algoritmo Evolutivo [22] foi aplicado para uma versõo bastante simplificada do PPAORO. Nela, a rede de dutos ó tratada como uma arvore direcionada com 8 nós, e os estoques dos tanques possuem apenas tres estados possíveis: alto, medio e baixo. Restrições de interface e tamanho mínimo de bateladas sõo tambem desconsideradas. O algoritmo proposto foi capaz de gerar soluções para horizontes de ate 3 dias mas, devido à forma como as soluçcõoes eram representadas, o algoritmo era capaz de lidar apenas com instêancias pequenas com poucos tanques e oírgõaos.
A tecnica desenvolvida por De La Cruz [15] tambám aplica um Algoritmo Evolutivo para uma versaõo simplificada do PPAORO, sem restriçcõoes de interface e com todos os dutos possuindo um mesmo diaêmetro e vazõao. No entanto, sõao considerados dutos bidirecionais e uma funçõo multi-objetivo, buscando reduzir interfaces e prazo de entrega dos produtos. Adicionalmente em [16], o autor tambem implementa um modelo PLI para o problema, usado para gerar parte das solucçõoes que compõoe a populaçcõao do Algoritmo Evolutivo. Em todos os casos, o algoritmo foi capaz de gerar solucçõoes para instêancias pequenas rapidamente, especialmente com o uso de resolvedores PLI e como decorrêencia das simplificacçõoes.
Há ainda os trabalhos de Alves [3, 2], que tambám aplica um Algoritmo Evolutivo para uma variaçcõao do PPAORO. No entanto, o procedimento desenvolvido foca na utilizaçcõao de uma rede específica da Petrobras denominada rede de escuros, utilizada para o traífego de produtos de grande viscosidade. O problema íe similar ao PTDPS de [9], com tanques agregados e vazõoes constantes, mas considerando tambíem tamanho das bateladas e uso de selos para separar produtos incompatíveis. Alíem disso, a funçcõao objetivo buscava minimizar o nõao-atendimento da demanda. O algoritmo obteve bons resultados para um horizontes de 7 e 14 dias, discretizados em períodos de algumas horas.
Uma abordagem alternativa í descrita em Sasikumar [28], onde uma tícnica baseada em Inteligência Artifical, denominada Beam Search, í agregada a heurísticas fortemente
baseadas na experiência humana. A técnica e aplicada em uma rede indiana, com restrições de sequenciamento de produtos e estoques nos érgaos. Apesar das simplificações, sõo geradas boas programações mensais para as instências em questõo.
Ainda, os trabalho de Liporace [19] e Milidiu e Liporace [34] tratam o PPAORO como um problema de Planejamento em Inteligência Artificial (PIA). Tal modelagem consiste em formular o problema genericamente como um conjunto de proposicões légicas, cuja composiçao de seus valores binérios representam um estado. O planejador iré identificar uma sequencia de acoes validas que leve o sistema do estado inicial ao estado-objetivo. Aléem de um planejador especéfico para o problema, a especificaçcõao do PPAORO como um PIA por Liporace foi incluída no benchmark oficial da International Planning Competition [11], uma competicõo internacional de planejadores genéricos. Contudo, numa perspectiva préatica, os planejadores existentes resolvem apenas instaências muito limitadas, com horizontes curtos, poucos tanques e poucas restrições.
Outro foco de pesquisa estéa em topologias simples, compostas por apenas um duto e um conjunto de éorgõaos conectados a ele. A motivaçcaõo ée que ela jaé representa diversos casos praticos existentes no mundo, incluindo sub-redes da própria Petrobras. Além disso, esta topologia permite considerar restrições mais complicadas referentes às vazoes, inventaério, perdas de volume decorrentes da criaçcõao de interfaces e custos de energia.
Neste contexto, encontram-se os trabalhos de Rejowski e Pinto [26, 32]. Ambos apresentam uma formulaçõo PLI de tempo discreto para o sistema OSBRA da Petrobras, composto por 5 érgõos, 4 produtos e um duto que liga o estado de Sõo Paulo à Brasilia. Sõo consideradas diversas restrições, tais como inventério nos érgaos e sequências permitidas de bombeamento, além de uma funçõo objetivo referente à minimizaçõo de custos de estoque e de interface. Para um horizonte de 3 dias, os autores nõao obtiveram a soluçcõao étima nos testes realizados. Contudo, em [44], o modelo é fortalecido pela introduçõo de cortes e se consegue, em um tempo computacional razoéavel, soluçcoões oétimas para todas as instêancias anteriores.
Para a mesma especificaçcõao proposta por [44], Cafaro e Cerdaé [7] apresentam uma formulacçaõo baseada em uma representacçaõo conténua do tempo e dos volumes. Conforme explicado pelos autores, esta representacçõao permite uma diminuicçõao significativa do tamanho da formulaçcaõo e do nuémero de variéaveis binaérias. Os resultados sõao comparados ao trabalho de [44], e mostram uma reducçõao de cerca de trêes ordens de magnitude dos requisitos computacionais necesséarios para resolver o problema. A representaçcõao por tempos conténuos tambéem foi implementada por Rejowski e Pinto [45], considerando adicionalmente vazoões variéaveis de bombeamento e decisõoes relativas ao controle de inventéario. Para tanto, o problema foi modelado como uma Programacçaõo Nõao-linear Inteira, baseado na formulaçcõao em [32]. O algoritmo resultante gerou boas soluçcõoes para poucos dias.
Um outro direcionamento consiste em decompor o PPAORO em subproblemas mais
fáceis de serem tratados, ao invés de resolve-lo completamente com um modelo unico. O trabalho de Magatõo [29] propõe uma divisõo em que três submodelos sõo processados sequencialmente. O modelo lida com uma rede composta por um duto conectando uma refinaria a um terminal portuario. A execuçõo inicia-se com um procedimento denominado Tanque Bound, caracterizado como um modelo em PLI responsável pela determinaçõo dos recursos (i.e., tanques) a serem utilizados em todo o agendamento. Em seguida, a Rotina Auxiliar, basicamente heurística, define alguns parâmetros de entrada para o práximo submodelo, como limites temporais que devem ser respeitados pelas tarefas no oleoduto. Por fim, o Modelo Principal, formulado como PLI e baseado nos parêametros fornecidos pelo Tanque Bound e pela Rotina Auxiliar, determina o sequenciamento e a temporizacõo das atividades de bombeamento no duto. A táecnica foi testada com sucesso na topologia em questaõo, considerando restriçcõoes de tancagem e de interface, aláem de vazõao constantes. Os autores propõe tambem em [30] uma abordagem integrada entre PLI e Programacõo por Restricçõoes para resolver as mesmas instêancias, gerando boas solucçõoes.
Mais recentemente, um conjunto de trabalhos de Relvas apresenta um estudo sobre uma rede de dutos em Portugal, formada por um duto e dois árgõos. Em [46, 48], os autores apresentam uma formulaçcaõo PLI que considera diversas restricçoões de controle de inventário, baseada em [7]. Já em [47], o modelo anterior é melhorado de forma que sejam consideradas paradas em dutos e vazõoes variáaveis, aláem do conceito de re-agendamento, em que o modelo áe resolvido apáos perturbaçcoões na solucçõao corrente.
Uma classificacõo importante para as instências encontradas na literatura á a topologia da rede de oleodutos. A tabela 3.1, apresenta algumas simples, com somente um duto ou com mais de um duto, poráem, com somente uma rota. Esse segundo caso, áe geralmente formado por unico duto segmentado onde ocorrem bases de entrega. Há ainda alguns trabalhos [36, 28] que permitem o tratamento de redes em forma de arvore. Um análise profunda desses trabalhos mostra que a topologia da rede áe base das modelagens, o que limita uma possável extensõao a outras instêancias.
Pode-se notar tambem da tabela 3.1 que essa dissertacõo tratará um numero muito maior de restriçcoões, aláem de uma rede completa, para fornecer uma soluçcõao uátil aos operadores da rede de oleodutos. Por outro lado, nõao existe uma táecnica padrõao para o problema de agendamento em dutos. Assim, fez-se necessaário um estudo de diversas táecnicas de otimizaçcõao para determinar, dada a realidade tratada, qual a mais promissora.
Nos capítulos 4 e 5 serâo discutidas as tecnicas de otimizaçao escolhidas, os critários de escolha e a aplicaçcõao delas ao problema. Essas discussõoes sõao compartilhadas com a dissertaçõo de André Cirá [10].
A literatura estudada foca o problema de agendamento diaário. Em geral, as soluçcoões especificam exatamente os horaários de movimentacçaõo e tratam um conjunto grande de restriçcõoes. Como seráa visto no capátulo 4, o planejamento mensal nõao necessita desse
19 detalhamento. Entretanto, o problema ainda precisa considerar toda a rede e um horizonte de planejamento de um mês pelo menos. Como pode ser visto na tabela 3.1, as abordagens balanceiam o uso de uma rede com grande numero de dutos contra um horizonte mais extenso. Essa dissertação mostrara duas tecnicas para resolução desse problema, uma heurística e outra utilizando modelagem por fluxo em redes, as quais tratarao o horizonte mensal com um numero satisfatório de restricães.
Capítulo 4
Arquitetura do Modelo de Resolução
O estudo dos artigos e teses apresentados no capítulo 3 evidencia que, como decorrência da grande dificuldade do PPAORO, as abordagens existentes se apáiam fortemente em simplificaçcãoes dos requisitos do problema. Por exemplo, sãao tratadas topologias de rede bastante simples na maioria dos casos, com apenas um duto de sentido uánico e terminais dispostos de forma sequencial [7, 28, 45]. Ou, ainda, não são consideradas incompatibilidade entre produtos [3, 16], ou os tanques são representados com capacidade agregada [6, 9].
Tais hipoteses permitem modelagens mais intuitivas e diretas do PPAORO, fundamentando seu tratamento pelas táecnicas de otimizaçcaão tradicionais, como mostradas no capátulo anterior. Em contrapartida, impossibilitam a representaçcaão de grande parte das restriçcãoes mais importantes para a viabilidade práatica das solucçãoes, o que torna as abordagens existentes muito pouco aplicáaveis para os cenáarios reais. Um exemplo áe quando se considera um tanque uánico de capacidade agregada. Apesar de simplificar as decisãoes relativas ao controle de inventáario, inviabiliza a aplicaçcãao de restriçcãoes como não-simultaneidade (C3), essencial para um cálculo mais realista dos tempos de bombea-mento. Note tambám que a maioria dos trabalhos existentes considera cerca de 6 árgãos, 4 produtos e poucos tanques. Por outro lado, a instêancia a ser tratada aqui agrega 14 árgaos com 242 tanques, alem de 29 dutos, 32 produtos, u.t. em minutos e diversas outras restriçcãoes.
Eá clara, portanto, a necessidade de modelos mais abrangentes para a obtencçãao de soluçcãoes factáveis para apresentar aos operadores da rede de dutos. Contudo, constatase que a resolução do PPAORO como um grande problema unico e integrado e pouco promissora. Aláem do alto nuámero de restricçãoes complicadoras que devem ser satisfeitas simultaneamente, muitos dos trabalhos baseados em resoluçcãoes integradas nãao obtiveram resultados satisfatáorios para uma topologia complexa, mesmo apáos diversas relaxaçcoães do modelo [9].
Desta forma, propãe-se uma arquitetura de resoluçao do problema composta por duas fases, executadas sequencialmente: a fase de planejamento e a fase de agendamento. Tal arquitetura e baseada nas decomposiçães recorrentes do PPAORO encontradas na literatura, as quais refletem os procedimentos manuais atualmente adotados. Cada fase e descrita em detalhes nas secçãoes seguintes.
Este capítulo é compartilhado com a dissertacão de André Ciré [10] e apresentado aqui com revisãoes e alteraçcãoes pontuais.
4.1	Fase de Planejamento
O problema de planejamento trata da movimentaçao geral na rede de dutos, onde são programados quais íorgaãos irãao receber e enviar produtos para o atendimento das demandas e escoamento das produçães. Uma vez fixados os órgãos de destino e de origem, define-se entãao quais seraão os dutos e as bases intermediíarias pelos quais os produtos irãao trafegar, determinando tambíem os volumes que serãao transmitidos nas rotas escolhidas.
As movimentaçcãoes de produto geradas pela fase de planejamento sãao representadas por uma estrutura denominada plano de entrega, que representa uma transmissao de volume de um íorgãao origem a um íorgãao destino, passando por uma determinada rota. Cada plano contóm um prazo, isto ó, o instante móximo em que todo o volume jó deve estar armazenado no íorgãao destino. Um plano de entrega íe definido por uma tupla
pe = (ti,oi,td,od,p,v,r,pz),
onde ti G T(oi) ó o tanque no órgão de origem oi G Org, td G T(od) ó o tanque no órgão de destino od G Org , v e o volume do produto p G P, r e a rota de transmissão do plano e pz e o prazo do plano dentro do horizonte de programaçao. Considera-se que um plano de entrega e indivisível, ou seja, seu volume nao pode ser fragmentado em dois ou mais planos. Contudo, um plano pode parar no duto, isto e, ser injetado de forma intermitente, o que acarreta tambem a parada de toda a rota envolvida no bombeamento. Operaçcãoes de parada sãao essenciais, por exemplo, para satisfazer o numero maximo de envios simultêneos (restrição C7) e os alinhamentos proibidos (restrição C8). Alem disso, tambem saão necessarias quando se necessita aguardar esvaziamento de tanques para que possam receber quantidades proveniente de dutos.
Assim, dadas as campanhas de produçcãao e demanda em cada orgãao, o objetivo da fase de planejamento e gerar um conjunto de planos de entrega de tal forma que, se todos forem satisfeitos, i.e., entregues no prazo, garante-se uma solução que atenda todas as demandas da rede e escoe os volumes em excesso das producçãoes.
Diferentes métodos heurísticos ou exatos podem ser aplicados para a criação dos planos para uma certa instância, os quais considerariam critérios específicos para a determinação das rotas, volumes e tanques. As tecnicas heurísticas aplicadas neste trabalho baseiam-se em escolher os érgãos com as demandas mais criticas, isto é, com maior volume e mais préximas do início do horizonte. Uma vez escolhidos, definem-se então os órgãos que vão prover volume para satisfaze-los, utilizando como critério aqueles mais próximos, isto é, conectados por um menor numero de dutos. Por fim, são selecionadas as rotas de maior vazãao e os volumes para, entãao, fixar os demais parâametros dos planos.
Além disso, visto que planos são também uma representação intuitiva do planejamento da rede, operadores dos dutos tambéem saão capazes de inserir novos planos ou alterar os existentes, muitas vezes para a representaçcãao de preferâencias de movimentacçãao nãao previstos pelo algoritmo.
A fase de planejamento encapsula as decisoães de quais rotas e volumes utilizar para a resolução de uma instância do PPAORO, mas não detalha as operaçães de bombeamento e seus respectivos tempos. O desafio da fase de planejamento é, portanto, criar conjuntos de planos com uma grande probabilidade de serem viéaveis, sem contudo aumentar a complexidade do problema a ponto de torna-lo não-resolvível.
4.2	Fase de Agendamento
Uma vez definidos os oérgaãos que iraão enviar e receber produtos e as respectivas rotas por onde os volumes irão trafegar, deve-se resolver o problema de agendamento, ou seja, determinar o néumero de operaçcoães de envios por plano de entrega e, principalmente, a ordem em que os bombeamentos serão realizados. Nesta fase, consideram-se as restricães de incompatibilidade e de capacidade dos tanques, aléem do céalculo de limitantes de tempo para envio e chegada dos volumes nos éorgaãos. Por fim, ée necessaério atribuir os exatos momentos em que ocorrerãao as operaçcãoes de bombeamento, compondo a solucçãao final do problema. Isso deve ser feito de modo a garantir que sejam satisfeitas as restriçães referentes às vazães de bombeamento, à troca de turno, à manutencão de dutos, e tambem outras restricçãoes similares.
Dado um conjunto de planos de entrega PE = {pe1,pe2, ...,penpl}, o objetivo da fase de agendamento e gerar movimentos m1, ...,mnm, conforme definidos na secão 2.3, de forma que todos os planos sejam cobertos no prazo. Isto equivale a sequenciar e agendar os planos nas suas respectivas rotas e tanques, garantindo todos requisitos do problema relacionadas no capétulo 2, como restriçcaão de interface, capacidade de tanques e nãao-simultaneidade de operacoes. Note que nm &gt; npl, já que planos podem ser bombeados por uma ou mais operaçcãoes de envio.
Apesar do grande nuémero de restricçãoes, a prée-atribuiçcãao de rotas da fase de planeja
mento abre a possibilidade de modelagens mais intuitivas e compactas do problema de agendamento, já que as decisões ficam concentradas em como ordenar e temporizar os planos nos seus respectivos dutos.
Como consequência da dificuldade em garantir heuristicamente soluções operacionalmente viaveis, sera utilizado um modelo exato como modulo resolvedor desta fase. Esse modelo, por sua vez, será implementado usando Programação por Restrições (PR) [31], sendo essa escolha motivada principalmente por duas razoes. A primeira motivaçao decorre de restricoes nõo-lineares inerentes ao sequenciamento e às vazões variáveis, impossibilitando a modelagem do problema usando Programaçõo Linear. Já a segunda razõo vem do fato de focarmos, prioritariamente, a obtencçõao de solucçõoes viáaveis ao inváes de átimas. As tácnicas de PR têm obtido grande sucesso neste quesito. Mais detalhes sobre Programacõo por Restriçao sao apresentados no capítulo 5.
Capítulo 5
Conceitos Básicos de Modelagem
Na aárea de pesquisa operacional, surgem, a cada dia, novas aplicaçcãoes de otimizacçãao. Muitas delas tratam de problemas NP-Difíceis, para os quais não se conhecem algoritmos polinomiais para sua resoluçcãao. Nesse aêmbito, áe comum a modelagem atraváes de Programacão Linear Mista [52] e de Programação por Restricães [31]. Essas tecnicas possuem soálido embasamento teoárico e garantidamente encontram solucçãoes oátimas, se essas existirem.
Cada uma das táecnicas abordadas nesta dissertaçcãao seráa descrita nas respectivas seçcãoes, e no decorrer serãao discutidas algumas formas de hibridizaçcaão entre elas.
5.1	Programação Lágica por Restriçães
A Programaçcãao (Láogica) por Restriçcãoes(PR) [31, 4] áe um ferramenta muito poderosa para a modelagem de problemas combinatáorios, principalmente na resolucçãao de problemas de planejamento e agendamento. Com ela áe possável criar um modelo usando variáaveis e relacçoães restritivas entre as variáaveis. Durante a execuçcaão do modelo sãao atribuádos valores às variáveis de forma a satisfazer as restrições definidas. Tambám e possável especificar que os valores atribuádos sejam tais que minimizem uma funcão objetivo, possibilitando a modelagem de problemas especáficos de otimizaçcãao.
Sendo a PR uma linguagem bem abrangente, podem ser usados diversos tipos de restriçcoães e, para cada tipo, existem formas diferentes de tratamento. Nesse ponto, a programaçao por restriçães se divide em dois ramos, a satisfaçao de restrições e a resoluçõo de restrições. Enquanto na satisfaçao de restrições as variaveis do modelo tem domámos finitos, a resolucçõao de restriçcõoes trabalha sobre dománios infinitos ou complexos.
A satisfaçcõao de restricçõoes áe a mais utilizada em aplicaçcãoes industriais e de otimizacçãao. Aláem disso, jáa foi utilizada anteriormente para resoluçcãao de problemas semelhantes ao proposto [30], com sucesso. Por estes motivos, ela sera uma das tácnicas principais usadas
nesta dissertação.
5.1.1	Definindo um modelo para satisfação de restrições
Ao se modelar um problema nesse ramo da programaçao por restriçães, são necessários três passos:
•	Definir um conjunto de variáveis X = {x1, x2,...,xk} e os respectivos dománios Di ,i = 1, 2,... ,k, de cada variável. Esses domínios não são necessariamente intervalos inteiros e, às vezes, nem mesmo sao numáricos.
•	Definir o problema como restriçães na forma C1 A C2 A • • • A Cn, onde cada Ci refresenta uma restriçao sobre as variaveis de X.
•	Realizar a busca por soluções. Cada solução, por sua vez, é definida por uma val-oraçao V = (x1 = v1,x2 = v2,... ,xk = vk). A valoracao V sera valida se respeitar todo os domínios e as restriçães impostas sobre as variáveis.
Um objetivo G = (x1 = g1,x2 = g2,... ,xk = gk) á uma atribuicao inicial de valores às variáveis de X. A atribuiçao pode ser irrelevante (“don’t care”) para algumas das variáveis, deixando-as livres sobre seu dománios Di. Ou a atribulo pode fixar o valor de xi em gi. Para exemplificar, dada a restricao x — y = z, e os dománios de x,y,z como [1... 3], pode-se ter como objetivo G = (x = 1, y, z), sendo x fixado e y, z livres. A possibilidade de se fixar váarios objetivos áe uma das grandes vantagens da programaçcãao por restricçãoes. Em outros paradigmas de programaçcaão, seriam necessaárias implementacçãoes especáficas para cada objetivo.
5.1.2	Encontrando uma solução
A maioria dos problemas NP-Difáceis é tratada na forma de satisfação de restrições, e a busca pela soluçao é feita de forma combinatória. Mais especificamente com uma estrategia de backtracking.
Sendo o backtracking sabidamente ineficiente, a PR fornece tecnicas para redução do esforco de backtracking. Um exemplo disso e a diminuição dos dománios das variaveis. Um modo de diminuir os dománios, e consequentemente o espaço de soluçoes, á refletir as restriçães sobre eles, o que á chamado de propagacao de restrições. Para visualizar isso, retoma-se o exemplo de restriçcãao anterior, e vêe-se que os dománios viáaveis podem ser reduzidos para: x G {2, 3}, y G {1, 2} e z G {1,2}. Apás a propagacão, caso um dos dománios venha a se tornar vazio, o problema nãao teráa solucçãao. Nesse caso desfaz-se a ultima atribuicão de valor e tenta-se outro valor (backtracking). Por outro lado, se todos
dominios possuórem um unico valor, essa seró a solucão. Se nenhum dos dois ocorrer, deve-se realizar a busca combinatoória pela soluçcãao.
Existem diversas tecnicas de busca que podem ser usadas na PR. Cada tócnica é escolhida para uma aplicaçcãao levando em consideraçcãao particularidades do problema. Em uma forma basica, porem, generica, sao utilizadas duas políticas de selecão. Na primeira, a seleçcaão óe sobre a ordem de valoracçãao das varióaveis. Pode-se, por exemplo, selecionar para a próoxima atribuiçcãao de valores uma varióavel que seja referenciada por mais restriçcãoes ou que possua um domónio menor. A segunda polótica, vale a ordem de seleçcãao dos valores nos domónios, podendo ir do menor para o maior, ou no sentido contróario, ou atóe mesmo dos valores do meio do domónio para as bordas. Outras tóecnicas, como a split-domain, nãao atribui valores diretamente, mas faz uma divisãao e conquista por domónios menores e vaólidos.
5.1.3	Melhorias na modelagem
Assim como uma boa escolha de estratóegia de busca pode influenciar drasticamente no tempo de execuçcaão, existem outras tóecnicas para tornar o modelo mais eficiente. Uma delas óe a inclusaão no modelo de restriçcoães redundantes, e o uso de restricçãoes complexas, como alLdistinct, element e cumulative [31]. Esta ultima é especialmente importante para problemas de agendamento, como o problema em questão. Todas essas restricães mais complexas possuem um tratamento especial no ambiente de PR, sendo implementadas de forma eficiente. Pode-se ainda utilizar-se de tócnicas alternativas [18, 4] ao backtracking, como o backjumping, que ao invós de retornar à variavel antecessora na órvore de busca após uma falha, retorna à varióvel que gerou a inviabilidade, mais acima.
Ainda sobre o modelo, pode-se adicionar restriçcãoes para evitar a ocorrâencia de simetrias, ou seja, a existâencia de soluçcoães equivalentes. Um exemplo de simetria estóa em um conjunto de varióaveis que podem ter seus valores permutados. A identificaçcaão de simetrias pode ser difícil, mas ó muito importante, e pode ser complementada por tócnicas que consigam identificar um grande nuómero de simetrias durante a busca [21].
Para problemas de otimizaçcãao, deve-se considerar todas as melhorias citadas, e ainda levar em conta que a PR utiliza-se de estratógias como Branch-and-Bound [12] para otimizar uma dada funcao objetivo. Nesse contexto, podem ser combinadas heurísticas como a busca local, e ate metaheurósticas [41] com o branch-and-bound, na tentativa de se obter boas soluçcoães, e em menor tempo de execuçcãao.
Alóem da hibridizaçcaão com outras heurósticas, existem diversas possibilidades de integrar PR com Programaçao Linear Mista (PLM). A PLM seró descrita na seção seguinte.
5.2	Programação Linear Mista
Problemas modelados usando Programaçõo Linear (PL) sõo problemas de otimizaçõo, onde a funcçõao objetivo e as restriçcõoes sõao todas lineares. A importaência da PL estía na existêencia de uma grande classe de problemas em pesquisa operacional que podem ser formulados dessa forma. E mais, historicamente, muitas das idíeias de PL inspiraram conceitos de otimizaçõo como a dualidade, decomposição e a convexidade.
A diferenca entre PL e Programaçao Linear Mista (PLM) estí na existência de variaveis no modelo que possuem o seu domínio no conjunto dos inteiros. Assim, definimos um modelo de PLM na forma padraõo como,
minimizar z = c1x + c2y sujeito a: A1x + A2y = b
x, y &gt; 0, x g Rn, y G Zm
onde x e y são os vetores de variáveis de decisão, A1 e A2 formam as matrizes de coeficientes das restricoes, b e o vetor dos termos independentes e c1 e c2 são os vetores de custos da função objetivo, representada pela expressão z = c1x + c2y. Se nao existerem os vetores y, c2 e A2, tem-se um problema de PL.
Ha atualmente duas famólias de tecnicas para resolução de modelos de PL. Ambas caracterizam o problema como um poliedro delimitado pelos hiperplanos das equacçãoes lineares das restriçcãoes. Demonstra-se, daó, que a soluçcãao oótima estóa em um ou mais pontos extremos de tal poliedro. A primeira famólia, que engloba os móetodos denominados Simplex, foi introduzida por Dantzig em 1949 [14] e esses mótodos buscam a otimalidade “caminhando” iterativamente pelas arestas do poliedro, verificando as solucoes básicas (ou pontos extremos) ate encontrar a ótima. E demonstrado que a complexidade de pior caso para o algoritmo Simplex óe exponencial, embora ele apresente um óotimo desempenho na pratica. Ja a segunda famólia engloba os mótodos de Pontos Interiores ou Barreiras, estes sim, de complexidade polinomial. Eles exploram o poliedro a partir de pontos do interior da regiãao vióavel, atóe encontrar um ponto extremo óotimo.
Apesar da pequena distâancia na formulaçcãao de problemas de PL para PLM, o problema geral na formulacçãao PLM óe NP-Difócil. Eó preciso, portanto, recorrer a algoritmos como branch-and-bound [12], aliados a outras tócnicas, para se encontrar limitantes superiores e inferiores para as soluçcoães, enquanto realizando uma busca mais eficiente no espaçco de solucçãoes.
Comparada com a PR, a modelagem PLM óe geralmente mais complexa em con-seqüância da dificuldade de se representar certas restriçães como equaçães lineares. Contudo, alguns modelos PLM para problemas difóceis sãao resolvidos de forma eficiente e
exata, principalmente, quando utilizam táecnicas como os planos de corte [52]. Ainda existem diversas maneiras de integrar PR e PLM [39], aproveitando-se, por exemplo, da capacidade de inferêencia fornecida pela PR e das relaxaçcõoes na PL.
5.2.1	Fluxo em Redes
Os modelos de fluxo em redes [1] sõo uma subclasse muito importante dos problemas de programaçcõao linear. Existem inuámeras aplicacçõoes desses modelos para sistemas de distribuiçõo e de comunicaçõo. De uma forma abstrata, os modelos representam uma rede formada por localidades, cada qual com uma demanda e estoques de um recurso, e por ligacçõoes entre as localidades, cada qual com uma direçcõao, capacidade e custo de transporte desses recursos. Busca-se minimizar o custo total de transporte satisfazendo as condicçõoes de viabilidade, as demandas e utilizando os estoques presentes.
Háa diversos problemas cláassicos modelados como fluxo em redes como, por exemplo, o problema do caminho de custo mínimo, o problema do fluxo maximo, o problema da circulaçcaõo e o problema de alocacçaõo. Nesse contexto, estamos focando no mais geral deles, que áe o problema do fluxo de custo mánimo. Para formulaá-lo matematicamente precisamos das seguintes definicçõoes:
•	G = (N, A) e uma rede (grafo) direcionada, onde N = (1,..., n) e o conjunto dos
nos (vertices) e A e o conjunto de arcos (arestas) direcionados representados por pares (i,j) G N x N e i = j, com sentido de i para j (ou seja i	j).
•	Cij e o custo por unidade de fluxo que passa pelo arco (i, j) G A.
•	lij e uij sõo respectivamente o limite mínimo e maximo de fluxo que pode passar pelo arco (i, j) G A.
•	bi e um numero inteiro que representa demanda quando bi &amp;lt;0, e fornecimento, quando bi &gt; 0, nono i.
•	xij e o fluxo que passa pelo arco (i, j) G A.
Sendo assim, o problema do fluxo de custo mánimo pode ser formulado como:
minimizar z =	cij xij (i,j)eA
sujeito a:	xij -	xji = bi	ví E N j:(i,j)eA	j :(j,i)eA
lij E xij E uij
v(i,j) E A
Essa formulaçao é bastante abrangente. No entanto, para o PPAORO e necessario compreender uma outra variante, onde ha diferentes recursos (commodities) passando pela rede e e necessario manter os fluxos de cada uma separadamente. Alem disso, sera necessario representar a rede em diferentes períodos, ou seja, o tempo sera discretizado para demonstrar como o fluxo evolui durante o tempo.
Diferentemente do problema de fluxo de custo mínimo que possui algoritmos especializados para sua resolucao, o problema de fluxo multicommodities, sendo mais geral, é resolvido usando o modelo de programaçao linear equivalente. Ja os multiperéodos podem ser modelados com um fluxo de custo ménimo e, portanto, com um fluxo multicommodities.
Para formular o problema de fluxo multicommodities definimos:
•	G = (N, A) e uma rede (grafo) direcionada, como definido anteriormente.
•	K = (1, 2,... ,k) é o conjunto de commodities.
•	ckj e o custo de transferir uma unidade de fluxo da commodity k pelo arco (i,j).
•	xkj e o fluxo da commodity k passando pelo arco (i,j).
•	ck e xk sao respectivamente os vetores de custos e fluxos da commodity k para todos os arcos.
•	lkj e ukj sao os limites ménimos e maximos, respectivamente, para o fluxo da commodity k pelo arco (i, j).
•	lij e Uj sao os limites mínimos e maximos, respectivamente, para o fluxo de todas as commodities pelo arco (i, j).
•M uma e matriz N x A de incidência no-arco.
•	bk e um vetor de inteiros que da a demanda ou fornecimento da commodity k para todos os nos.
Tendo essa notação, podemos formular o problema do fluxo multicommodities como:
Ek k c x
keK
sujeito a:
lij&amp;lt;	xij &amp;lt;uij, 'V(i,j) G A
keK
Mxk = bk, Vk G K
lÍj &amp;lt;xkj &amp;lt;ukj, V(i, j) G A and Vk G K
Um outro resultado sobre fluxo em redes, importante para nosso trabalho, é a possibilidade de decompor um fluxo obtido em caminhos e ciclos. Para compreender isso, definimos P e W como os conjuntos de todos os caminhos e ciclos na rede G. Assim, podemos ter fluxos f (P) : VP GP e f (W) : VW G W de forma que:
x,j = £ ôij(P)f (P)+ £ ôij(W)f (W)
P eP	W ew
Na equação acima, ôij (P) e ôij (W) dizem se o arco esta contido (ôj = 1) ou não (ôij = 0) no caminho ou ciclo em questão. Compreende-se, por essa equacão, que o fluxo em um arco é composto da contribuicão de fluxo de diversos caminhos e ciclos que contem aquele arco.
A equacao acima conduz ao algoritmo de decomposição mostrado no Algoritmo 1. Esse algoritmo de decomposicão classico [1] sera a base para a criação dos planos de entrega. Como os nos representarãao demandas, produçcãoes , tanques e trechos de uma rota, um caminho na rede contera todas as informacçãoes necessarias para criaçcãao de tais planos, apos a decomposiçcãao do fluxo obtido. Como sera visto, o algoritmo podera ser simplificado, pois nãao havera ciclos em nossa rede.
Algoritmo 1 Algoritimo de Decomposição de Fluxo	
Entrada: G = (N, A) com fluxo nos arcos x	
Saída: P com f (P), VP GP, W com f (W), VW G W NotaçAo: y - cípia do fluxo nos arcos A(y) = {(i, j) G A\yij &gt; 0} (Arcos com fluxo positivo em y) N(y) = {i\(i, j) G A(y) or (j,i) G A(y)} (Nís incidentes nos arcos em A(y)) G(y) = (N (y),A(y)) S = {i G N(y)\bi &gt; 0} (nos fornecedores) D = {i G N(y)\bi &amp;lt;0} (nos de demanda) s e t sãao os níos de início e fim do caminho P. A(P) = min{b(s), —b(t), min{yij\(i,j) G P}} (Capacidade do caminho P) A(W) = min{yij\(i, j) G W} (Capacidade do ciclo W)	
1	procedimento DeC0MP0SICA0DeFluX0
2	y = x, P = 0, W = 0
3	enquanto A(y) = 0 faca
4	S = SELECIONAR(y)
5	BusCAR(s,y)
6	se Ciclo W encontrado entao
7	W = W U{W}
8	f (W ) = f (W ) + A(W)
9	yij = yij— A(W)&gt; V(i,j) G W
10	fim se
11	se Caminho P encontrado entao
12	p = nj{P}
13	f (P ) = f (P ) + A(P)
14	yij = yij— A(P)&gt; V(i,j) G P
15	b(s) = b(s) — A(P)
16	b(t) = b(t) — A(P)
17	fim se
18	Atualizar A(y), N(y), S, D
19	fim enquanto
20	fim procedimento
21	funcao SELECIONAR(y)
22	se S = 0 entao
23	retornar s G S
24	senao
25	retornar s G N(y)
26	fim se
27	fim funcao
28	funcao BusCAR(s,y)
29	Fazer uma busca em profundidade iniciando com o nío s atíe achar um ciclo W em G(y) ou um caminho P em G(y) terminando no nío t G D
30	retornar W ou P, de acordo com o encontrado
31	fim funcao
Capítulo 6
Um modelo para o Problema de Agendamento
Prólogo
O artigo deste capítulo foi publicado em um dos periódicos internacionais mais importantes na area de Programação por Restrições, o Constraints em 2010 [27]. O artigo pode ser visto como uma evolucão do artigo apresentado nos anais do congresso The 14th Principles and Practice of Constraint Programming (CP’08), na sórie Lecture Notes in Computer Science [38]. Este por sua vez é uma evoluçao de outro artigo publicado nos anais da conferencia, Proceedings of the 11th IEEE International Conference on Computational Science and Engineering - CSE'08 [37], e eletronicamente, pela editora do IEEE. Os dois artigos de 2008 compõe a dissertação de Andró Ciró [10].
O artigo apresenta o Problema de Planejamento e Agendamento de Operações em uma Rede de Oleodutos (Pipeline Planning and Scheduling Problem) com grande detalhamento cobrindo as restricães já apresentadas no capítulo 2. A seçao de trabalhos relacionados (Related Work) do artigo foi atualizada no capítulo 3 dessa dissertacão e a arquitetura utilizada ó a mesma mostrada no capítulo 4.
A fase de planejamento ó tratada por uma heurística gulosa incremental que foi brevemente introduzida nos trabalhos anteriores [38, 37]. Esse procedimento cria os planos de entrega um apóos o outro, conforme funçcãoes de avaliaçcaão que utilizam estimativas sobre a rede ató aquele momento. Por exemplo, o produto, órgao de destino e prazo são escolhidos analisando todas as combinaçcãoes e escolhendo a base onde hóa uma demanda mais urgende para o produto.
O foco do artigo, no entanto, ó a fase de agendamento (Scheduling Phase). Essa fase foi decomposta em dois problemas: o sub-problema de sequenciamento (Sequencing Sub-problem) e o sub-problema de escalonamento (Scheduling Sub-problem).
Primeiramente, o sequenciamento definiraá a ordem das operaçcãoes dos planos nos tanques de origem e destino e nos dutos trafegados que formam a rota. Apáos isso, o escalonamento daraá os tempos exatos de inácio e táermino dessas operacçãoes. Cada um desses problemas áe tratado por meio de um modelo de programacçaão por restricçoães práoprio que faz uso extenso de restrições globais especificas para agendamento. Alám disso, novos máetodos de busca de solucçaão, especializados para a estrutura da rede de dutos, tambáem sãao propostos.
Outra contribuição estendendo os trabalhos anteriores [38, 37] á o grafo de empurra-mento (Pushing Graph), equivalente a uma restriçao global, aumentando a inferência de precedêencias entre operaçcoães ocorrendo em diferentes dutos. Essa estrutura áe especáfica para problemas de agendamentos em dutos, pois supoãe que os dutos estãao sempre preenchidos completamente e a entrada de um volume em uma extremidade soá áe possável com a saáda de um mesmo volume na extremidade oposta. Ela pode ser vista como uma rep-resentacçãao do problema, permitindo a aplicaçcãao de mais restriçcãoes globais tais como a restrição flow [24] .
Os procedimentos foram testados sobre 4 instêancias reais, as quais utilizavam uma mesma rede com 14 áorgãaos, 29 dutos e 32 produtos diferentes armazenados em 242 tanques. Um exemplo de execucçãao sobre uma instaência artifical ilustra o procedimento.
A Hybrid Model for a Multiproduct Pipeline Planning and Scheduling Problem
Tony M. T. Lopes, Andre A. Cire, Arnaldo V. Moura, Cid C. de Souza Institute of Computing - University of Campinas 13081-970, Campinas, SP
{arnaldo, cid}@ic.unicamp.br, {andre.cire, tony.lopes}@gmail.com
Abstract
Brazilian Petrobras is one of the world largest oil companies. Recurrently, it faces a very difficult planning and scheduling problem: how to operate a large pipeline network in order to adequately transport oil derivatives and biofuels from refineries to local markets. In spite of being more economical and environmentally safer, the use of a complex pipeline network poses serious operational difficulties related to resource allocation and temporal constraints. The current approaches known from the literature only consider a few types of constraints and restricted topologies, hence they are far from being applicable to real instances from Petrobras. We propose a hybrid framework based on a two-phase problem decomposition strategy. A novel Constraint Programming (CP) model plays a key role in modelling operational constraints that are usually overlooked in literature, but that are essential in order to guarantee viable solutions. The full strategy was implemented and produced very adequate results when tested over large real instances.
1	Introduction
Scheduling problems have been receiving increasing attention in the last years, mainly due to the need to deal efficiently with very large real scenarios in order for companies to persevere in highly competitive markets. A number of notable examples stems from the oil industry, where oil prospection and refined product transportation are major sources of costs. As such, Petrobras, the 14th largest oil company in the world1, faces a very difficult transportation problem in which ethanol and several petroleum derivatives, like gasoline, diesel, and naphtha must be transported from refineries to depots where consumer markets are located. Such complex transportation problems usually must be solved in the presence of very complicated facility operational restrictions.
1See www.energyintel.com.
Pipeline networks are the preferred way for transporting oil refined products. In contrast to tanks and waterborne alternatives, their costs do not escalate sharply with distance. In an example cited in [1], assuming each truck holds 200 barrels (8,400 gallons) and can travel 500 miles per day, it would take a fleet of 3000 trucks, with one truck arriving and unloading every 2 minutes, to replace a 150,000-barrel per day, 1,000-mile pipeline. In the United States of America, oil pipeline shipments account for more than 17% of the transported volume but less than 2% of the country freight cost [2]. As another example, the Brazilian pipeline network owned and operated by petrobras. It has an extension of 7,000 kilometers, comprising 30 individual interconnecting pipelines, all with very different physical characteristics, and through which more than 30 different types of products circulate. There are 14 distribution depots that can store up to 10 millions cubic meters of these products, stocked in more than 200 tanks located at such depots. A partial illustration of the Brazilian southeastern network is shown in figure 1.
Pipelines must always be completely filled with products, meaning that a volume must be pushed into a pipeline in order to pump out the same volume at the other extremity. Flow directions can also change dynamically. Moreover, certain products are chemically incompatible and can not make contact with each other in a pipeline, so as to ensure their required quality level. Also, flow rates depend on product, flow direction and on the particular pipeline being used. At the depots, not all departing and arriving operations can be simultaneous, due to restrictions imposed both by the internal valve and duct layouts, as well as by the number of local pumps. Tanks can store just one type of product. Extraction or injection of volumes from or into a tank can not be simultaneous, and must always obey the tank capacities. As can be inferred, the operation of such a network is subjected to a complex set of physical and operational constraints.
Due to its size and complexity, as well as to its financial impact, the efficient operation of this large oil pipeline network is one of the most strategic problems faced by logistics at petrobras today. Yet, nowadays, the problem is basically solved manually, by executing a trial-and-error process with the aid of a proprietary simulator that checks whether some simple physical constraints are being satisfied. This process is very time consuming and, not rarely, the final results still violate some of the more complex restrictions. Clearly, this manual process is far from optimal and limits the efficiency of the network operation, as down-level operators must frequently apply corrections in delivery orders as a means to make the system work appropriately. In fact, it is common for the company to use trucks for transporting pending volumes, thus increasing the overall transportation costs, a situation that could be avoided by a more intelligent use of the pipeline network.
Studies from the literature usually focus on more restrictive and smaller pipeline topologies, each with a reduced set of operational constraints that, despite making the problem more tractable, are far from representing real-world scenarios. This is a conse-
Refinery
Junction
Figure 1: Petrobras pipeline network.
quence of the high number of hard sequencing and timing constraints involved, complicated when large and more generic topologies are considered.
We propose new algorithms for generating feasible solutions for a very large pipeline planning and scheduling problem, where most of the hardest real-world constraints are taken into account. Our approach has two phases: the planning phase is implemented as a constructive heuristic that generates delivery orders, representing transfers between two depots; and in the scheduling phase, a Constraint Programming (CP) model, is used to establish an ordering among the delivery orders, at each pipeline and each tank. The resulting algorithm, specially tailored to deal with large instances, generates more reliable delivery orders and can also be used to validate production and demand trial scenarios. This strategy proved to be very flexible, permitting easy addition or removal of operational requirements, and also facilitating the test of new search heuristics. As will be discussed later, CP was at the core of the computational model devised, being capable of finding good operational solutions for real problem instances in an adequate amount of computer time. Several reasons motivated the use of CP. Primarily, the scheduling problem is highly over-constrained and has several non-linear constraints, which can be easily modelled in the CP paradigm. Besides, the main goal was to search for a feasible solution, and so the choice of variables for value assignment in the CP model benefits from special restart strategies.
This project was a joint work with PETROBRAS, the Brazilian state-owned oil company, which provided both problem specifications and instances, as well as analyzed the proposed solutions. The prototype developed is being considered for use as an auxiliary tool to aid planners at petrobras.
This article is an extension of our earlier works on this topic [3, 4]. It contains a much more detailed description of the problem and of the new algorithms. The text is organized as follows. Section 2 describes the problem. Section 3 presents some previous works related to pipeline scheduling. Section 4 discusses in detail the heuristic and CP
models that comprise the planning and scheduling phases. Finally, section 4 discusses our computational results while section 6 presents our conclusions and points to further work.
2	Problem Definition
A pipeline network system is composed of three sets: tanks, depots, and pipelines. Tanks are used for product storage. Depots are geographically dispersed. They represent refinery facilities and oil-derivative local markets. Each depot has its own subset of tanks. Pipelines interconnect the depots and are used for product transportation. A pipeline connects only two depots.
An illustration of a pipeline system is presented in figure 1, in which products (or fluids) F0, Fx, and F2 can circulate. The figure shows 4 depots, D0, Dy, D2, and D3, connected by pipelines P0, Py, P2, P3, and P4. A label Tj refers to the i—th tank in depot Dj for stocking product Fk. Note that two pipelines connect depots D2 and D3, which is a common situation in practice.
Volumes must be extracted from tanks before pumped into a pipeline. On being pumped out of a pipeline, volumes can either enter a tank or move directly into another pipeline. The sequence of pipelines traversed by a volume when moving from its origin to its destination comprises its route. More precisely, we define a route as an alternating sequence of depots and non-repeating connecting pipelines. For example, the sequence D0PyD2P3D3 represents a valid route in figure 1. A pipeline in a route is called a segment. All product volumes in circulation must have a pre-defined route assigned to it. Also, a volume cannot be stocked at intermediate depots in any route; it can only be deposited in a tank at its destination depot.
The problem consists of scheduling pumping operations in order to satisfy the depots’ inventory constraints. Individually, a pumping operation is taken as a continuous and atomic product injection into a pipeline at its origin depot. Each operation specifies information about the pumped product, volume, route, origin, and destination tanks, as well as about its start and end pumping times. The operations must also obey a complex set of operational restrictions over a given planning time period, or horizon. Restrictions regarding tanks, pipelines, and depots are described in the following three sections, respectively. Inventory constraints are described in section 2.3.
All volumes are given in standardized metric units.
2.1	Tank Restrictions
(1)	Tanks have a fixed maximum capacity which must always be respected. Minimum capacities are all set to zero units.
Figure 2: A pipeline network example.
□ f0
■ &gt;
■ b
(2)	A tank can only store one type of product during the whole planning horizon. This constraint, required by field operators, ensures adequate product quality by avoiding possible mixtures. A depot can contain more than one tank per product, but does not necessarily contain tanks for all products. It is possible that a depot contains no tanks at all, being used solely as an intermediate transmission facility between two pipelines. In figure 1, depot D2 depicts such a situation.
(3)	All injection and extraction operations targeting a common tank must be time disjoint. This is due to the internal connections of subsidiary pipes and valves inside a depot. Therefore, a new operation at a tank can only begin when all previous scheduled operations at that tank are already completed.
(4)	The initial product stock level at each tank must be respected.
Problem specifications in which constraint 3 is satisfied are said to have the individual tank property. Some alternative models [5] relax this restriction by considering virtual tanks for each product at each depot. Such virtual tanks aggregate the capacities of all real tanks for a product in a given depot.
2.2	Pipeline Restrictions
(5)	Pipelines must be completely filled with products at all times, since they are pressurized. Hence, in order for a certain product to leave a pipeline, it is necessary to push it out by injecting the same volume at the other pipe extremity. For example, in figure 1 suppose that a certain volume of product F2, at the extremity of pipeline P4 connecting into D3, is to be pumped out. If we had enough volume of another product, say Fo, at the extremity of pipeline P2 facing depot D2, and if its route suffix were P2D2P4D3, we could schedule a pumping operation with origin at Dx making active the route DxP2D2P4D3. Executing now this operation would push F2 into a tank at D3, as desired. Note that it will be necessary to have enough volume of some product to insert into P2 at Dx. Further, the pumping operation
with origin at D1 is just another operation to be scheduled in the network, among many others. So it must have its product, volume, route, origin and destination tanks already defined, as well as its start and end times.
(6) Pipelines must be able to operate in an intermittent fashion, i.e., some time may elapse between the end of a pumping operation and the beginning of the next one in a certain pipeline. Even though longer continuous transfers are more economical and thus preferred, a pipeline flow can be temporally suspended for several reasons. For instance, as pipelines in a depot may share the same pumps, they might not be able to function simultaneously (see also constraint 12). Another common scenario is when three pipes form a “Y” connection. Suppose that the flow is now downward from the right segment into the lower common segment. If in a route containing the left segment there are products with a more pressing deadline, as soon as the volume of the present operation that is now flowing from the right is completely inserted into the common segment, the present operation on the right side may be stopped thus allowing the flow from the left segment to start. If this situation repeats itself, we will see the right branch operating in an intermittent fashion, giving way so that more urgent products can circulate first into the common segment. Note however that once a volume is inserted in a pipeline it can not be separated in two parts by the insertion of other volumes in between.
(7)	All injection and extraction operations targeting a common pipeline must be time disjoint. In other words, it is not possible to simultaneously inject products into a pipeline from two different sources, for instance, to increase the resulting flow rate. Similarly, a product leaving a pipeline can not be injected into different tanks or pipelines.
(8)	Some pairs of products, so called incompatible pairs, can not make contact within a pipeline, otherwise a quality loss will ensue. For example, both products inside pipeline P2 in figure 1 must be compatible. Such operational restriction is also known as the interface constraint.
(9)	As there is a limited number of pumps per depot, and given that products have different densities, a maximum flow rate must be observed per pipeline, per product and per flow direction. Thus, the pumping operation flow rate can take any real value between 0 and the minimum value of the maximum flow rates of all products in the current route. We do not consider minimum flow rates due to the lack of accurate data. However, operators accepted this as a valid simplification since pressing deadlines naturally require products to be pumped as fast as possible.
Tqoq Too1 T002	To1o To11
t=0				(KBI		1)		
							
		■											
t=l					■IZZDZZI)		
												
												=:				
t=2							
														
		■													
t=3				K3 1)			
														
	■	'	■													
t=4	—						 	
Figure 3: Example of a flow reversal.
(10)	Flows can change direction dynamically, an event called pipeline flow reversal. An example of a reversal is illustrated in figure 3 for a network with a single pipeline topology. During the time period from t = 0 to t =2, product F2 is extracted from tank T002 in depot D0, and is used to push another product into tank T010 at depot D1. As soon as the first product is completely injected into its destination tank at t = 2, product F2 must return to the first depot, since there is no tank for this kind of product at depot D1. This is done by using product F1 from tank T011, at D1, to push F2 back to its original tank, at D0, thus forcing a change of flow direction in the pipeline at t = 3 and t = 4.
(11)	Although there is no restriction barring the creation of new routes, the most common choices as dictated by previous human experience should be preferred. These routes are given as input and will be denoted by a set R throughout the text. Note that we are using a fixed set of routes, and we are not exploring all possible routes through the network. In some cases, we might use a route from this set which was not used before in manual solutions to transport specific products, thus deviating from the usual routing that appear in manual solutions for those products.
2.3	Depot Restrictions
(12)	Each depot has an upper limit on the number of outgoing pumping operations, which depends on the number of locally available pumps. Therefore, it may not be possible for all the pipelines at a depot to be in operation simultaneously.
(13)	At each depot, tanks are connected to external pipes by a mesh of shared structures,
like valves and auxiliary pipes. Depending on the internal arrangement at a depot, certain sending and receiving operations can not be active simultaneously. Such sets of operations are called forbidden alignment configurations, or simply forbidden sequences. For instance, in a certain depot one may not be able to send gasoline through any pipeline while diesel is being received by any other pipeline.
2.4	Inventory Constraints
The inventory constraints are related to tank capacities and the maintenance of desired stock levels at each depot. The stock of a product at a certain depot at time t is obtained by summing the volumes of that product at time t in all tanks that can stock the product at the given depot. In this work, we only consider inventory constraints related to the satisfaction of tank capacities. Nevertheless, the pipeline operators also provide the desired maximum and minimum level of product stock levels per depot, which are being used solely as a guide to the search procedures.
The stock levels in a depot change mainly due to production and demand operations. Productions represent volume creation at refineries, while demands represent volume consumption by local markets. Both are planned in advance, using market estimates and other data such as raw products availability and refinery capabilities. Usually, a refinery depot produces more than it can actually store within the given planning horizon, so as to satisfy market demands at other locations. This, of course, requires products to circulate throughout the pipeline network. In addition, an excess of inventory in each depot is also preferred to prevent against emergency situations, such as the repair of a damaged pipeline.
The consumption rate of each product may vary greatly according to monthly seasonal markets. Moreover, it is difficult to foretell exactly the local market needs for a long time horizon. As a result, pipeline operators are required to constantly update the network schedule to accommodate new demands, guaranteeing they will be satisfied on time. Given that, and in order to represent productions and demands in a reliable and computationally feasible way, the following model was devised, and accepted by the pipeline operators as an adequate simplification. Each production and demand, given as input, is composed of a volume, a product, its corresponding depot, and a time frame that defines when the production or demand must be serviced. The production (demand) volume can be injected (extracted) instantly at any time within its time frame. Also, this volume must be necessarily injected into (extracted from) one or more tanks, the selection of which being responsibility of the algorithms. In this way, productions and demands are regarded as common tank operations. Hence by constraint 3 they can not occur simultaneously with other tank operations. Usually, the time frame given for a demand or production
corresponds to one day, i.e., its volume can be injected or extracted at any time during the day.
Although instantaneous volume injection and extraction is not physically realizable, the operators believe this is a reasonable model to capture variations about local markets, given the inherent uncertainties about the real data. Operators also have some flexibility to adjust the timing when products are delivered to clients and, to a smaller degree, they can also reschedule the production planning at refineries. Furthermore, this model gives the operators flexibility to drive the algorithms under various scenarios, allowing them to simulate different production and demand curves.
2.5	Definition of a Solution
The problem input comprises a static and a dynamic component. The static component is described by the sets of tanks, pipelines, depots, and their operational parameters, such as the maximum number of simultaneous outgoing pumping operations at each depot. The dynamic component is given by a set of productions and demands (see section 2.3) that must be satisfied. The dynamic component also contains the initial network state. The initial state is defined by the sequence of product volumes inside each pipeline, the assigned route for each of these volumes, and the stock level in each tank at the beginning of the horizon. It also gives the set of ongoing pumping operations at the initial instant.
Given the problem input, a feasible solution is defined by a set of pumping operations which ensures that all demands and productions will be fulfilled in their given time frames. That is, all product volumes from productions (demands) are to be correctly stored (extracted) without violating tank capacities. In addition, the pumping operations must obey all operational constraints stated in sections 2.1, 2.2, and 2.3. Finally, it is also necessary to make explicit the exact times and tanks allocated for each production and demand. This is done by representing the associated injections and extractions, respectively, as pumping operations that have a null route.
The program output is a table containing a list of all pumping operations. This list is then submitted to a proprietary software that executes simple consistency checks. Passing the consistency checks, the list is then handed to logistic engineers for use as a guide during the actual operation of the pipeline network. An example of such list is shown in table 1. Column headings are as follows: T and Tf are the start and end times, respectively; Vol is the volume pumped; Pd is the product code; TkOr and TkDt are origin and destination tank codes, respectively; and Route is the route code. A full solution table would contain several hundred similar lines.
In this work, no objective function are considered, as more accurate data about energy and operational costs are still being gathered by PETROBRAS. However, as we will see in
Table 1: Solution Example
Ti	Tf	Vol	Pd	Tkor	TkDt	Route
2075	2362	858	Fi	Toil	To31	Di Po Do Pi D2 P3 D3
3456	4021	722	Fi	T032	Tool	D3 P3 D2PiDo
4857	4869	30	Fo	T0i0	T000	Di P2D2P4 D3P3D2PiDo
Table 2: Comparison of the main approaches.
References	[9]	[i0, ii, i2]	[5, i3]	[i4, i5]	[i6, i7]	[i8, i9, 20]	Our work,[3]
Depots	8	5	i2	7	2	2	i4
Pipelines	8	4	28	7	i	i	29
Tanks	40	25	84	28	i6	i2	242
Products	5	4	7	4	8	6	32
Horizon	i4 days	3 days	5 days	80 units	5 days	30 days	i0 days
Continuous time		U	u				U
Variable Flow rate		d			U	U	U
Individual Tanks					U		U
General Topology	U		U	U			U
Forbidden Sequences		U	U		U	U	U
Main Technique	GA	MILP,VNS	A-Teams,MILP	GA,MILP	MILP,CP	MILP	Heuristic+CP
Results	Feasible	Optimum	Infeasible	Feasible	Optimum	Optimum	Feasible
section 3, the apparently simpler task of finding a solution satisfying such a huge number of intricate constraints is a great challenge in itself.
3	Related Work
The pipeline operation problem comprises a highly complex and diversified set of constraints. Examples of difficult operational restrictions include product sequencing inside a pipeline, interface constraints, mass balance in tanks and various inventory management conditions. Complexity analysis of some relaxed versions of the pipeline scheduling problem can be found in [6, 7, 8].
Due to the problem’s economical and practical importance, a number of methods have been proposed in the literature to automate the planning of pipeline network operation. The characteristics that distinguishes such approaches from each other are mainly related to the network topology and the granularity of the scheduling unit of time. As real-world scenarios require the satisfaction of a high number of constraints, the level of detail is an indication of the effectiveness of their solutions in practice. Table 2 summarizes some important previous approaches and their most important characteristics.
The most studied topology consists of one pipeline connecting a single origin to multiple destinations, which are distributed along the pipeline. Usually, the origin represents
an oil refinery, the destinations are consumer markets, and the flow in the pipeline is unidirectional. The study of simpler networks are motivated by the fact that many real scenarios are composed of a single pipeline. In addition, it is easier to model some of the problem restrictions, specially those involving variable flow rates, product storage, and energy costs. An early work along this line appeared in [21], where an artificial intelligence technique called Beam Search was applied to an Indian network. Although the procedure strongly relies on human intervention, it is capable of handling tank capacities and interface constraints.
Also, several Mixed-Integer Linear Programming (MILP) optimization models were developed for this type of topology. The work in [22] deals with a network composed of 5 depots, where 4 products must be transported among them. The proposed model is based on an uniform and discrete time representation and on disjunctive programming. It handles a large number of hard constraints, such as mass balances and product demands, besides minimizing storage and interface costs. However, the authors were not able to obtain optimal solutions, even considering a simple 3-day planning horizon. For this reason, in [23] the model was improved with the addition of integer cuts and redundant constraints, which enhanced the MILP computational performance.
In [10], a new continuous time and volume MILP formulation was proposed for the same problem presented in [23]. The continuous representation was effectively smaller in terms of the number of binary variables and constraints. As a result, optimal solutions were obtained in about three orders of magnitude faster than in [23]. The continuous representation was also used in [11], where the authors additionally modelled variable pumping flow rates and stock management decisions, formulating the problem also as a Mixed-Integer Non-linear Programming (MINLP) model.
As described in [11], many studies focus on decomposition techniques for single topologies. The work in [16] presents a 3-stage decomposition strategy for a network composed of a refinery, a pipeline, and a depot with a set of tanks. The first stage defines the tanks for each pumping activity. The second stage heuristically creates temporal constraints taking into account the demand requirements. Finally, the last stage is an MILP model to decide upon the pumping times, while having fixed values for the previous parameters. All the MILP models were based on an uniform time discretization. Later, the work in [17] proposed an integrated approach, using both CLP and MILP models, in order to solve the same instances, generating good solutions.
More recent works [18, 19] study a Portuguese pipeline network, with a topology similar to that considered in [16]. The authors propose an MILP model with new inventory constraints, based on [10]. In [20], the model is improved to consider intermittent pipelines and variable flow rates. Moreover, a rescheduling strategy is implemented in order to deal with possible perturbations on the instance data.
There are also studies regarding multiple origins, multiple depots, and various pipelines interconnecting them. They represent more realistic networks, since the production of oil derivatives is usually distributed in several geographic locations. In these scenarios, the problem complexity is much higher than with simpler topologies. In addition to inventory management at each depot and product sequencing in the pipelines, it is also necessary to take into account operational constraints that limit the simultaneous usage of different pipelines. Also, the models must ensure the correct synchronization of direct flow transmission between pipelines, which is common in such scenarios. In general, the current approaches for more complex topologies neglect most of the operational constraints in order to make the problem tractable.
Among such approaches, [13] proposed an MILP based on a network flow model to solve a relaxed version of the problem. The specification included about 14 depots and 29 pipelines, but considered that all depots contained tanks for all products. Furthermore, the pumping flow rate was fixed per pipeline and only simple inventory constraints were considered. Despite these relaxation, it took more than 50 hours of computer time just to find the LP initial basis. In [5], the authors propose the use of an heuristic method known as A-Teams, adapting the pipeline scheduling to a job shop scheduling. However, they were still unable to find feasible solutions.
The work from [24] implements a Genetic Algorithm for a directed tree network topology with 8 depots and with only a few restrictions, focusing mostly on the basic pipeline operations. The authors further improved the model in [15], hybridizing the evolutionary algorithm with simple MILP models. A more recent application of meta-heuristics to more general topologies, but with relaxed operational constraints, can be found in [9, 12].
Another research direction is discussed in [25], which addressed the pipeline scheduling problem as a general-purpose planning problem. A new domain specification and a planner were created in order to deal with general topologies and some tank constraints. Although not effective for large instances, the work established a new benchmark at the International Planning Competition [26].
The use of Constraint Programming for general topologies was first proposed in [4]. The work proposed a two-phase algorithm composed of an heuristic and a CP model. It also considered individual tanks, intermittent pipelines, direct pipeline flow transmissions, as well as flow reversal operations at any pipeline. This work yielded feasible solutions for real instances and motivated a novel CP model for the same problem. In [3] the heuristic was enhanced using a CP approach composed of two sub-models. In addition, it considered further difficult constraints related to forbidden alignment sequences and simultaneous pumping operations. This article is an extension of these previous works, and also describes in full detail procedures considered therein.
4	Methodology
The procedure currently applied by PETROBRAS to operate its pipeline system is based on a trial-and-error process, in which manually constructed solutions are continuously tested and adjusted with the help of a proprietary simulator. This method is not only time and people demanding, but the lack of more detailed long-term foresight forces the solution to be rebuilt everyday by the pipeline operators.
Manual procedures are still used due to the great difficulty in solving the problem in its full setting, as mentioned in section 3. Consequently, decompositions methods are almost mandatory in order to cope with the problem size, a topic more fully discussed in
[11]. We propose a novel decomposition method inspired on previous work [16] and on the manual procedures. This new framework is capable of dealing with larger and more complex topologies and can also accommodate additional constraints which are essential to guarantee the operational feasibility of solutions.
The problem is divided into two parts, the planning phase and the scheduling phase. The execution main cycle is schematically presented in figure 4. The planning phase decides the necessary volume transfers among depots. Each of such transfers must be scheduled in order to satisfy all demands, and distribute all volumes produced at refineries and so ensure an adequate stock level at each depot. Furthermore, the planning phase must also define the pipeline routes along which such transfers will occur, while minimizing traffic and possible product interfaces in each pipeline. Each transfer between depots is deemed a delivery order, a notion to be made precise shortly. The output of the planning phase is a set of delivery orders.
The scheduling phase represents the core decision process in our framework. Once the orders have been created, this phase must generate and sequence the necessary pumping operations so as to make it possible to carry out the complete set of orders. The scheduling phase must ensure that the orders are scheduled while observing all operational restrictions, such as tank capacities, forbidden sequences and interface constraints, as described in section 2.
The output of the scheduling phase is a complete solution to the problem, as detailed in section 2.4.
The planning phase takes a high level view of the pipeline network. The set of orders it generates in order to to satisfy productions and demands involves relatively few scheduling details. This phase is similar to the current initial procedures used by field operators at PETROBRAS when constructing a manual solution. In this vein, heuristic techniques proved quite suitable to this planning phase. First of all, only a small subset of pipeline constraints are analyzed in this sub-problem, and previous works showed that heuristic approaches have a good performance in these cases [9, 14]. Moreover, when putting
such techniques to the test, one can take advantage of previous human expertise when designing their search criteria, thus enhancing the chances of finding a feasible solution. In this work we propose a randomized greedy heuristic to generate the set of delivery orders. This heuristic is described in section 4.1.
The scheduling phase demands a much higher level of detail. Investigation shows that modelling it as a simple MILP is not viable, since the number of variables and constraints would grow at an unacceptable rate when considering more complex network topologies. On the other hand, pure heuristic techniques were also greatly impaired when applied to the scheduling phase. Slight modifications in a solution can create serious collateral perturbations over the problem structure. For example, since products can flow directly from one pipeline to another, changing a single pumping start time may delay the arrival of a number of other products that pass through connected pipelines. Consequently, it is difficult to define a representation in which it is possible to execute a computationally affordable number of local modifications in order to find a viable solution.
On the other hand, the CP paradigm is well-suited to the scheduling phase. It provides a powerful modelling language that permits the implementation of operationally crucial constraints, besides providing enough flexibility to extend the model if new restrictions were deemed necessary by pipeline field operators. Most importantly, it allows the exploitation of special problem patterns explicitly. This is done, for instance, by modelling multiple sub-problem representations in order to use specialized and adequate constraint propagation mechanisms to solve each of the sub-problems. When modelling specific subproblems one can take advantage of good representations proposed in previous works, such as the continuous time representation in [10]. In fact, such multiplicity of perspectives played an important role in the final model, greatly improving crucial domain reductions. Furthermore, a preliminary study [4] already indicated that CP would be flexible and powerful enough to treat the real problem faced by petrobras. Finally, the use of CP was further fostered by its well-known good performance when treating scheduling problems [27]. In particular, at this stage of development, CP suited the application’s needs due to its notable ability to find feasible solutions. The CP model for the scheduling phase is presented in detail in section 4.2.
4.1	Planning and Routing
The planning and routing phase essentially represents a global view of the problem. The main objective is to define the necessary product transmissions between depots, in a way that all demands are fulfilled and production volumes are stored without violating any inventory constraints. On the other hand, it does not define how the transmissions will be performed in an operational level, i.e., their sequence or schedule.

Instance
Solution
Figure 4: Solver Framework.
These transmissions between depots are formally modeled as structures called delivery orders, or orders for short. An order O represented by the tuple
O = (OriginT ank, DestinationT ank, Product, Volume, Route, Deadline) enforces that some Volume of a Product must be extracted from the OriginTank. After that, it will travel through a Route that starts at the depot of the OriginTank and ends at the depot of the DestinationTank. At this last depot, the Volume will be inject into the DestinationTank. All of these operations must have ended before the Deadline. The planning and routing phase must generate a set of delivery orders as its main output. The input consists of both static and dynamic components of the problem, as described in section 2.4.
In this context, an order is considered to be indivisible, i.e., once a volume from an order starts to be pumped into its first route’s segment, no volume from any other order can also be pumped into the segment while the first volume is not completely injected. Nevertheless, orders are not necessarily pumped in continuous streams, and, thus, several pumping operations might be used to pump an order into a pipeline, as long as it does not interleave with any other orders (see restriction 6, Subsection 2.2). This restriction was imposed in order to reduce product interface in the pipelines which, as said before, may result in some quality loss.
To generate orders, we created a randomized constructive heuristic that uses the accumulated human experience on the operation of the network at PETROBRAS. One of the purposes of the randomization is to produce diversified sets of orders in case the previous sets of orders were infeasible, increasing the chance of finding one or more solutions. Also, the heuristic takes into consideration other criteria that are difficult to handle manually, such as estimating the time for product volumes to arrive at depots.
Delivery orders are created incrementally. A group of functions evaluates values for the order properties, based on the input and previously created orders. This way, for each
order these functions will give different values as the network estimates changes. These estimates includes satisfied demand, pipelines, and tanks utilization. For each order its properties are determined as follows:
1.	Choosing Product, Destination Depot and Deadline: For every triple of product p, destination depot bd and day t, define
Vp,bd,t = H - (LM(t) - TNPibd),
where H is the last minute in the planning horizon, TNP,bd is the minute when enough of product p is available in all depots that are able to deliver product p to depot bd in time to fully satisfy the demand at day t, and LM(t) returns the last minute of day t. The (LM(t) — TNp,bd) component gives an estimate of how much time there is left to satisfy the demand. All times are computed relative to the beginning of the planning horizon. We randomly select some triple (p, bd, t) within the best a1 percent triples with the highest, i.e. most critical, Vp,bd,t values. The idea behind this strategy is to satisfy any pressing demands first.
2.	Choosing Origin Depot and Route: Given a selected triple of product p, destination depot bd and due date t, proceed as follows. For every pair of origin depot bo and route r starting at bo and ending at depot bd, define
V = (1 — CG(r)) x
LM (t) — (TDp,bo + Tminrp)
(1 + NRr )
where TDp,bo is the minute when there is any positive quantity of the product p available at bo, and Tminr,p gives the minimum amount of minutes for product p to travel along route r. The component (TDp,bo + Tminr,p) gives the minimum time when one unit of product could have arrived at the destination depot. The term NRr captures the number of such occurrences if route r is used and CG(r) gives an estimated fraction of use for all the pipelines in route r, based on previously created orders. A higher number of possible necessary reversals or overloading of pipelines are unfavored. Considering all these factors, a pair among the best, i.e. largest, a2 percent Vbo,r values is randomly selected. Hence, the route with the greatest difference between earliest arrival and due times, for any volume occurring in it, will be selected. Note that this strategy also strives to minimize the number of flow reversals, a possible yet expensive maneuver.
3.	Choosing Origin, Destination Tank, and Volume:
Given a destination depot bd, an origin depot bo and a product p, proceed as follows. For every pair of tanks to and td, both holding the product p and located at depots
bo and bd, respectively, let
Vto,td,vol —	max {Fto,bo,pi Ftd,bd,p}^ x vo1,
where Ft,b,p — URt/MURt,b,P. Here, URt — TAloct/Capt gives the fraction between the volume so far allocated to a tank t (TAloct) and the tank capacity (Capt) i.e., it measures how much a tank t has been used by force of previous orders, and the term MURt,b,P is defined as the maximum of URt among all tanks t at depot b that can store product p. We choose the maximum fraction between the origin and destination tanks in order to capture the one most relatively used between them.
Now, by letting
vol — min{TQdeto, Captd - TQdetd},
where TQdet is the volume residing at a tank t after all previous orders have been executed, we get the maximum volume that can be transferred from the origin tank to the destination tank.
We then select randomly within the a3 percent tanks with largest Vtojd,vol values. This gives a pair of tanks that can accommodate one of the largest volumes that can be transferred between the origin and destination depots.
As soon as there is no more demand to choose from, the planning phase terminates. After the procedure ends all demands are guaranteed to be satisfied if the resulting orders can be scheduled to arrive by their respective deadlines.
At this point, network operators can interfere in the planning of deliver orders by adding, modifying, or removing orders according to their particular needs. This flexibility is interesting since sudden needs might unexpectedly arise. For example, there might be exceptional cases where the operators want to empty certain tanks for emergency maintenance purposes. This could be achieved by issuing new orders that remove products from those particular tanks. Or the pipeline operators might dislike the proposed set of orders, for some unexpected reason.
Note that the whole planning phase can always be activated again. By doing so, the randomization built into the procedure will, most certainly, give rise to a different set of orders, for the same input data. In any case, the focus of the heuristic is to generate a set of orders that is feasible for the next scheduling phase, described in section 4.2.
Free Delivery Orders
In certain scenarios, the orders created by the planning phase are not enough to guarantee a valid solution. For instance, suppose that only two orders need to be scheduled along the
same route, and they have incompatible products. Since we can not push both products successively into a same pipeline, a third product must be inserted between them.
In order to cope with such situations, free delivery orders are created before entering the scheduling phase. In contrast to regular orders, their volumes, products, and origin or destination tanks are treated as variables instead of constants. Moreover, such free orders do not have a deadline parameter and may have a null volume associated with them. Furthermore, their routes are previously determined by choosing among those typically used by pipeline operators. Operators can change such routes by editing a configuration file.
Free orders are also used to represent products that remain in the pipeline at the end of the planning horizon in order to ensure that all pipes are always completely full. These orders do not have a destination tank, and constraints are used to indicate they are the last ones to be pumped into the pipelines. Further explanations about free delivery orders are given in section 4.5, which also considers a running example.
4.2	Scheduling Phase
The scheduling phase treats the problem of generating a number of pumping operations so as to satisfy a given set of delivery orders. These pumping operations must observe the network operational constraints, as explained in section 2. Otherwise, the solver must prove that the present set of orders is infeasible, i.e., either the deadline of one or more orders cannot be met, or there is some operational constraint, such as tank capacities, would always be violated, for any possible schedule. In the latter case, a new set of orders can be requested from the planning phase.
Our research indicated that it would not be practical to create a single CP model to tackle the scheduling phase in its entirety. In a typical horizon of 5 to 10 days, the planning phase is expected to generate hundreds of orders. Such orders involve dozens of products that leave from and arrive at several tanks, circulate through many common pipelines, and are subjected to thousands of interrelated constraints. The resulting problem size would be excessively large as shown in [4], thus preventing the use of more realistic operational restrictions.
As a result, the scheduling phase was further decomposed in two sub-problems: the sequencing and the scheduling sub-problems, solved in succession. The sequencing subproblem consists of defining the ordering according to which delivery orders will be satisfied at each pipeline and at each tank. This ordering must primarily observe interface and inventory constraints, as well as satisfy time bounds present in each delivery order. Once a valid ordering has been found, the scheduling sub-problem treats the problem of dividing each delivery order into smaller individual pumping operations, as well as as
signing their respective start and end times. Such pumping operations must enforce the remaining scheduling restrictions, respecting the fixed ordering already established by a solution to the sequencing sub-problem.
The sequencing and scheduling sub-problems are described in sections 4.3 and 4.4, respectively. We note that each sub-problem considers a restricted set of constraints, although some constraints will be represented in the models designed for both sub-problems.
All time variables represent minutes, the time granularity currently adopted by network operators. As a consequence, all variables have integer domains. Time value roundings, e.g. volumes calculated for some particular combination of flow rate and pipeline extension, can be safely neglected given the large volumes that are involved. Also, variable domains are easy to infer from input data instances and need not be further detailed here.
4.3	The Sequencing Sub-problem
The input for the sequencing sub-problem is the set of delivery orders and the problem static and dynamic components, described in section 2.4. A solution is an ordered list that defines the sequence of delivery orders to be satisfied at each tank and pipeline. This sequence must take into account ordering-related conditions, such as interface constraints, tank capacities, and flow direction in each route segment. Additionally, other essential operational restrictions are also treated, such as valid time bounds for the pumping operations.
The single CP model devised to solve this problem will be referred to as the sequencing model. Due to its complexity, more than one representation, or viewpoint, was used so that different problem restrictions could be more easily modelled. A viewpoint contains specific variables and constraints to deal with the corresponding restriction they focus on, as well as defines additional redundancy used to enforce constraint propagation [28]. The interconnection between viewpoints is done by defining channelling variables and posting additional channelling constraints [29]. In our model, it suffices to label only the channelling variables, as the constraint propagation in each viewpoint ensures that their variables are bound and, as a result, the corresponding restriction is satisfied.
Our model interrelates two different viewpoints. The order viewpoint provides a global view of the problem, dealing mainly with time and routing constraints for individual orders, and also with tank capacities. In contrast, the operations viewpoint captures a local view of the problem, representing only the operational behavior of each pipeline. Finally, the channelling variables indicate the proper sequencing of the orders in the corresponding route segments and also in the appropriate origin and destination tanks. Both viewpoints are inspired on the previous MILP formulations cited in section 3, and,
specially, in the pipeline structure presented in [10, 11, 20].
A notation for the input data and other specific details is described in section 4.3. The order viewpoint is detailed in section 4.3, while the operations viewpoint is described in section 4.3. Finally, channeling variables and constraints are presented in section 4.3. For the sake of clarity, the models are presented without considering free delivery orders. Section 4.3 describes the necessary changes to accommodate them, and Section 4.3 explains the search strategy that was used.
Some notation
Let P be the pipeline set, T be the tank set, and O = {o1,..., on} be the set of delivery orders received from the planning phase. For each oi G O, we define origin^) G T and destín^) G T as the origin and destination tanks for order oi, respectively. Also, let route(oi) = (pi,... ,pm) be the sequence of pipelines that oi must traverse, i.e. its route. The intermediate depots are not considered in this notation, as products are stocked only in its destination tank. The volume corresponding to order oi will follow a pre-defined flow direction in each pipeline p G route(oi), given by the constant direction^ which can be inferred from route(oi). We consider four possible flow directions in a pipeline: N, if the order follows the normative, or preferred, pipeline flow direction; R, if it follows the reverse direction; NR, if it starts in the normative direction, but later changes to the reverse direction, thus leaving the pipeline through the same extremity it was pumped into; and RN, similarly to NR, but with its flow starting in the reverse direction.
As explained in section 4.1, orders are indivisible. Furthermore, volumes must strictly follow the direction specified in the corresponding orders. For instance, if direction^ = N, then the volume corresponding to order oi will never follow direction R once inside pipeline p. Hence, the volume corresponding to order oi, once inside pipe p, must be pushed out of p before any volume that moves along the R direction in p can be injected into p. This also implies that volumes are never injected to or extracted from the same route segment more than once.
Let Pr and Dem be, respectively, the sets of productions and demands received from the planning phase, i.e. with their tanks already assigned. In this model, productions and demands are represented as delivery orders with routes designated as empty. Formally, Pr, Dem C O and for all oi in PrUDem, we have route(oi) = 0. In addition, production orders have their destination tanks specified and their origin tanks left as empty. Demand orders have their origin tanks specified, and their destination tanks left as empty. In this way, the relations between production, demand and delivery orders can be handled in a transparent and uniform manner.
The Order Viewpoint
The order viewpoint handles the problem globally, focusing on constraints that define valid time bounds for each order. These bounds are related to maximum flow rates, disjunction of pipeline operations and tank capacities. If any of these time bounds violate an order’s deadline or an inventory constraint, the delivery order set is clearly infeasible. Otherwise, they will help ruling out invalid order sequences.
We define the concept of an activity [30] before describing the model variables. An activity is a structure composed of two variables: a start time variable and a duration variable. For clarity, we will also consider that activities contain an end time variable, which is clearly the sum of its start time and its duration variables. A variable var of an activity act will be represented here as Var(act).
Due to the indivisibility and strict flow direction properties, each order will be represented by two activities for each segment of its route, symbolizing the time intervals in which the order occupies the extreme points of the pipeline. Formally, for each oi G O and and p G route(oi), we define two activities, sndiiP and rcvi,p. The first activity represents the time interval during which the volume from order oi was pumped into p, while the second represents the time interval during which the volume from order oi was pumped out of p. In this way, we have explicit variables that describe the times when an order’s volume is being injected in and extracted from a pipeline. This representation is depicted in figure 5.
Note that such activities do not necessarily represent continuous operations. In other words, the start time represents the initial instant in which the first volume unit was pumped into, or out of, the pipeline and, similarly, the end time is the instant in which the last volume unit was pumped into, or out of, the pipeline. Therefore, it is possible to create more than one pumping operation for each activity, as long as their start and end times observe the time interval imposed by the activity. This concept accommo dates for the possibility of an intermittent behavior during the execution of an individual order. As mentioned earlier, breaking activities into pumping operations is not dealt with at this stage.
Simple linear constraints can be used to ensure bounds on flow rates and to state delivery deadline constraints. There is no explicit variables for flow rates, since we are only interested in a lower bound for the duration of activities (restriction 7 in section 2). Let max_flow_rateP)d,pr be a constant representing the maximum flow rate in pipeline p, for direction d, and traversing product pr. For each oi G O and each p G route(oi), we
Delivery Order
2 activities
send activity
Figure 5: Activities for each pipeline in a delivery order’s route.
let:
EndT ime (rcvip))
Duratzon(sndi,p) X max—f1oW_ratep,direction^,product(oi)
DuratiOn(rCVi,p) X max_flOW_ra.t6p)directioni,p,product(oi)
&lt;	deadline (oi),	(1)
&gt;	volume(oi),	(2)
&gt;	volume(oi).	(3)
Before an order exits a pipeline, it must first traverse the full pipeline extension. Therefore, for a given order, the time elapsed between its send and receive activities in a pipeline must be at least the time necessary for its volume to traverse the full pipeline extension at the maximum flow rate. Let product (oi) be the product associated with order oi. For each oi G O and p G route(oi), we require:
StartTime(rcvip)) &gt; StartT ime(sndip)) +
volume (p)
max-f 1 OU_r at ep,directioni,p,product (oi)
(4)
By the route definition, when an order is being pumped out of one of its intermediate segments it must be immediately pumped into its next segment, and without volume loss. Equivalently, while a receive activity is being performed in an intermediate segment, a send activity must be performed in the subsequent segment at the same time. This relationship can be easily modelled with the activity variables, as illustrated in figure 6. It consists of unifying [29] consecutive send and receive activity variables in the following way. For each oi G O and for each pair (pl,pl+1) of consecutive pipelines in route(oi), simply let:
StartTime(rcvipi) = StartTime(snditpi+1), EndTime(rcVi,pi) = EndTime(sndi,pi+1).
(5)
(6)
0 pi	)—»0	)
□
Figure 6: Connection between two consecutive pipelines in an order’s route.
Order activities related to a same pipeline must all be disjunctive with respect to time (restriction 7 in section 2). That is, a send (or receive) activity from a certain order must not overlap with the send (or receive) activities of other orders that share common pipelines. In order to guarantee this, we use the global constraint disjunctive. For all p G P, let
disjunctive({snd»&gt;p : Vo» G O,p G route(o»)}),	(7)
disjunctive({rcv»;P : Vo» G O, p G route(o»)}).	(8)
Next, we define two new activities: ext» and inj», representing volume extraction and injection, respectively, at the origin tank origin(o») and destination tank destin(o») associated with order o». Volumes injected into and extracted from tanks must not overlap in time as well. For all t G T, let
disjunctive({ext» : Vo» G O, origin(o») = t} U {inj» : Vo» G O, destin(o») = t}).	(9)
Production and demand orders must occur within their corresponding time frames, satisfying the inventory constraints described in section 2.3. For each o» G Pr, let
StartTime(inj»)	&gt; ProductMinStartTime(o»),
EndTime(inj»)	&amp;lt;ProductMaxEndTime(o»),
and for each o» G Dem, post
StartTime(ext»)	&gt; DemandMinStartTime(o»),
EndTime(ext»)	&amp;lt;DemandMaxEndTime(o»).
(10)
(11)
(12)
(13)
But note that tank capacities must also be taken into account. This is achieved by using a global constraint called a reservoir [30]. Reservoirs are resources that contain a minimum, a maximum, and an initial level. Activities can both increase the level (volume injection) or decrease the level (volume extraction) from reservoirs over time. These levels can be used to implement a tank’s initial volume as well as its capacity. A link
between activities and reservoirs is defined using the keywords consumes (capacity) and produces (capacity). For a reservoir TkRest, where t G T, we must have for each Qi G O:
exti consumes (volume (oi)) TkResorigin(Oi),	(14)
inji produces(volume(oi)) TkResdestin(Oi).	(15)
Finally, the relationship between send (receive) variables and tank activities is analogous to those for pipeline volume transmissions. While an order’s volume is being extracted from a tank, it must be immediately pumped into its first route segment. Similarly, a volume is immediately injected into its destination tank while it is being pumped out of its last route segment. For each oi G O, letting p0 and pm be the first and last pipeline along route (oi), respectively, we state:
StartTime(sndip0)	=	StartTime(exti),	(16)
EndTime(sndiiP0)	=	EndTime(exti),	(17)
StartTime(rcvip&gt;m)	=	StartTime(inji),	(18)
EndTime(rcviPm)	=	EndTime(inji).	(19)
In summary, the constraints posed in the order viewpoint ensure the time consistency of orders, force deadline satisfactions, and also guarantee that operations at each pipeline and at each tank are always disjunctive. The inventory constraints are enforced in this viewpoint as well.
The Operations Viewpoint
The main intuition for this viewpoint relates to the rules for volume injection and extraction at pipeline extremities. Although some time bounds and disjunctions were established in the order viewpoint, it is still necessary to model the fact that, for a certain volume to leave a pipeline, the same volume must be pumped into the other extremity. This restriction imposes precedence relations between orders, and also further restricts activity time bounds. To capture these conditions, we state additional restrictions among the send and receive activities of different orders. These restrictions, basically, impose that a send activity is performed if and only if a receive activity occurs at the exact same time. Restrictions such as variable flow rates, which depend on the sequence of products inside a pipeline must also be considered. The model that implements these relations is described next.
We introduce a new activity structure for this viewpoint by defining operation activities. Besides start time, end time and duration variables, an operation activity also has other variables associated with it, namely a volume, a product, a direction, and an
order variable. Operation activities will be bound to orders: the order variable can be seen as a pointer to the corresponding order in the O set, while the other operation order variables will represent values for the remaining order constants (the order’s product, volume, directions, and so on). Moreover, operation activities will be created in a way that accommodates a more intuitive and compact representation of a pipeline operational behavior.
For each pipeline p G P, we define two sequences of operation activities, SndPipeP and RcvPipeP. The i-th element of the sequence SndPipeP is denoted by sndOpiP) and, similarly, rcvOpiP denotes the i-th element of the sequence RcvPipeP. The size of each sequence is the number of orders that traverse the corresponding pipeline, that is, \SndPipeP\ = \RcvPipeP\ = ¡{o» : Oi G O,p G route(oi)}|. Moreover, we consider that both sequences are time ordered, as enforced by the following constraints.
StartTime(sndO'pip) &gt; EndTime(sndOpj&gt;P),
V	sndOpip, sndOpjP G SndPipeP, i &gt; j, (20) StartTime(rcvOpi,P) &gt; EndTime(rcvOpjtP),
V	rcvOpitP,rcvOpjiP G RcvPipeP, i &gt; j.	(21)
The intended meaning of the operation activities in SndPipeP and in RcvPipeP is similar to the send and receive activities in the order viewpoint. Their timing variables represent the period of time during which the corresponding volume is occupying the extreme points of a pipeline. That is, the time variables of an activity sndOp G SndPipeP represent the time interval during which the volume specified by its volume variable is being injected into p. In the same vein, the time variables of an activity rcvOp G RcvPipeP give the time interval during which the volume, specified by the corresponding volume variable, is being extracted from p. Note that constraints (20) and (21) already enforce the precedence relation between such orders, i.e. the volume corresponding to operation activity sndOpi,P will necessarily be pumped into p before the volume corresponding to activity sndOpj,P, if i &amp;lt;j. Similarly for the operation activities in a RcvPipeP sequence. As a result, by binding orders to operation activities at each pipeline, we can enforce the pipeline order sequences.
For instance, consider the example showed in the figure 7. Suppose we have six orders, labeled A to F, all with volumes traversing the pipeline as depicted in the example. The SndPipeP and RcvPipeP sequences will have each 6 operation activities, labeled 1 to 6. As order A is bound to send operation activity 1 and B is bound to activity 2, order A will have its volume pumped first into the pipeline. In a similar way, order C, bound to the receive operation activity 5, will have its volume pumped out first than will order D, which is bound to receive activity 4.
Figure 7: Case when the send and receive activity sequences are different.
Most importantly, note that a SndPipeP sequence is not necessarily the same as a RcvPipeP sequence, due to the fact that the flow direction in a pipeline may change. In the previous example, if activities C, D and E indicate flow reversals, i.e. they flow along directions NR or RN, then they will be pumped out of the pipeline in reverse order. See also figure 3.
Using the previous representations for operation activities we can model pipeline flow direction, interface constraints, and the pipeline operational behavior. For that, we make use of a special structure, called a pushing graph, to be detailed next.
Flow Direction. Flow directions in a pipeline must be consistent. For instance, if an activity has its direction attribute set to N, then the next activity along the same pipeline must necessarily have its direction attributes set to N or NR. Direction attributes such as R and RN are only consistent after a sequence of NR activities whose total volume is equal to the pipeline volume, as required by restriction 10 in section 2. Attribute RN is treated in a similar way.
In order to ensure flow direction consistency, we use the global constraint Table Constraint [30]. First, we define a set of pairs that represent valid directions for any two consecutive activities. In our case, the set is
ValidPairs = { (N, N), (R, R), (NR, NR), (RN, RN)(N, NR), (NR, R),
(R, RN), (RN, N), (NR, RN), (RN, NR)}.
Next, we invoke table constraints over the direction variables in order to enforce that only valid pairs of consecutive operation activities can occur. For each p G P and each i G {1,..., |SndPipeP| — 1}, we post
table_constraint (Direction(sndOpi;P), Direction(sndOpi+1;P), ValidPairs), (22) table_constraint ( Direction(rcvOpi)P), Direction(rcvOpi+1)P), ValidPairs). (23)
As for pipeline reversals, a special global constraint reversal was created, encapsulating the rules for flow direction reversal. It ensures that maximum sequences of NR or RN operations have their total volume sum equal to the corresponding pipeline volume. It will also ensure the proper sequence of send and receive orders during flow reversals, as illustrated in figure 7.
Due to space considerations, this global constraint will not be described in full detail. Instead, we give intuition on the general mechanism of such procedures. For each operation activity op G SndPipep U RcvPipep, a new integer variable, called a group, is created. We state that two or more variables have the same value for the group variable if and only if they are part of the same maximum sequences of NR or RN operations. This property is implemented for the sequences SndPipep and RcvPipep separately. For each p G P and each i G {1,..., \SndPipep\ — 1},
Group(sndOpi,p) = Group(sndOpi+1,p)	&lt;&gt; R	Direction(sndOpip)) = Direction(sndOpi+1,p)	
		Direction(sndOpi,p) G {RN, NR},	(24)
Group(rcvOpi,p) = Group(rcvOpi+1,p)		Direction(rcvOpip) = Direction(rcvOpi+i,p)	
	R	Direction(rcvOpip) G {RN,NR},	(25)
Group(sndOpip&gt;)	&lt;	Group(sndOpi+i,p),	(26)
Group(sndOpi,p)	&lt;	Group(rcvOpi+1,p).	(27)
The following conditions, implemented using set constraints [30], ensure that the maximum sequences must sum to the pipeline volume. Let Gk = {opip : Group(opip&gt;) = k, Direction(opi,P) G {RN,NR}}. For each p G P and each possible value k for the group variable,
E
sndOpi’p^GkflSndPipep
Volume(sndOpip&gt;)
E
rcvOpi’p^Gfc C\RcvPipep
Volume(rcvOpip&gt;)
Volume (p),
Volume (p).
(28)
(29)
The group variables are also used to ensure the correct inverse bind sequence in flow reversals. First, it is necessary to guarantee that a send and receive operation activity have the same group value if and only if they are bound to the same order. For each p G P and each distinct i,j G {1,..., \ SndPipep\},
Order (sndOpip&gt;) = Order(rcvOpj,p)	Group(sndOpi&gt;p) = Group(rcvOpj,p). (30)
If two send activities have the same group variable value, then the receive binding
sequence is the inverse of the send bind sequence. Thus, we have to impose the following conditions, for each p G P and each i, j G {1,..., |SndPipep|}.
Group(sndOp ,p) = Group(sndOpj ,p) A Direction(sndOp ,p) G {RN, NR}	(31)
3 k &amp;lt;l s.t. Order(rcvOpk ,p) = Order(sndOpj,p) A Order (rcvOp ,p) = Order(sndOpi;P).
The global constraint reversal implements condition 31 in a more compact and efficient way. Furthermore, additional conditions are posted so as to enforce propagation, thus linking the channelling variables discussed in section 4.3 with the above flow direction restrictions.
Interface Constraints. The interface constraint (see restriction 8 of section 2) requires that we identify which volumes are in contact inside a pipeline. Contact between volumes corresponding to consecutive orders in a time ordered sequence can occur in two scenarios. First, if the orders specify the same pipeline flow direction. Secondly, if a reversal is about to begin (in a send operation activity sequence) or is about to end (in a receive operation activity sequence). Note that, in the latter case, the pipeline ordering will be inverted. Thus, if CompatiblePairs is a set of compatible product pairs, the interface constraints can be enforced as follows. For each pipeline p and each i G {1,..., |SndOpp| — 1},
DirecRon(sndOpi)p) = Direction(sndOpi+X)p) V (32) ^Direction(sndOpi)p), Direction(sndOpi+X)p)) G {(N, NR), (R, RN), (NR, RN), (RN, NR)} =^ table_constraint (Product(sndOpi;p), Product(sndOpi+X;p), CompatiblePairs),
DirecRon(rcvOpi)p) = Direction(rcvOpi+X)p) V (33) ^Direction(rcvOpi)p), Direction(rcvOpi+X)p)) G {(NR, R), (RN, N), (NR, RN), (RN, NR)} =^ table_constraint (Produci(rcvOpi&gt;p), Produci(rcvOpi+X&gt;p), CompatiblePairs).
The Pushing Graph. The main idea of the operations viewpoint is to take advantage of time ordered sequences for the purpose of modelling the pushing of volumes inside pipelines. To clarify, let rcvOp-;p G RcvPipep. The volume associated with rcvOp-;p can only be received when an activity sndOpi&gt;p G SndPipep is being simultaneously injected at the other extremity of pipe p. As such, we say that activity sndOpi;p pushes activity rcvOpj)p out of p. As a consequence, the intersection between the corresponding time intervals must not be empty. In order to correctly establish this relationship, a special structure, called a pushing graph, is introduced. It largely explores the pre-defined precedences between operation activities in both sending and receiving sequences.
Send/Receive Sequences
Figure 8: Example of edges in the pushing graph for a single pipeline.
A pushing graph is a digraph G — (V, E) where each vertex v G V C O x P represents an order o G O and a pipeline p G P. For simplicity, we will use the notation v — (o,p) for vertices. Clearly, we can only have a vertex v — (o,p) if p G route(o). Now, let v — (oi,pl) and w — (oj,pm). In the pushing graph, there is an edge (v,w) G E if and only if an operation activity sndOpx&gt;Pl, bound to order oi, pushes an operation activity rcvOpyPm, bound to order oj, out of pipeline pm. From now on, we will use the notation v w when (v,w) G E.
Figure 8 shows an example of a pushing graph for a network composed of a single pipeline p having a volume of 75 units. In the figure, orders A, B, and C need to be sequenced, where volume(A) — 30 units, volume(B) — 45 units, and volume(C) — 65 units. Three vertices are thus created: (A,p), (B,p), and (C,p). Suppose that both the sending and receiving operation sequences are exactly A, B, and C. After activities sndOp1,p and sndOp2,P are executed, we can infer that the pipeline is entirely filled with the volumes corresponding to orders A and B. As such, when sndOp3p&gt; is executed, the volume associated to order C will push out of the pipeline a certain amount of the volumes corresponding to orders A and B. This shows that there is a time relationship between activity sndOp1,p and the activities rcvOp1tP and rcvOp2,P. Therefore, a direct edge from vertex (C,p) to vertices (A,p) and (B,p) is inserted in the pushing graph. Furthermore, it is also possible to calculate the actual volumes associated with each of these edges, a volume that will be pushed out of the pipeline when activity sndOp3p&gt; is executed. As the volume from order A leaves the pipeline first, it will consume 30 units from order C. The remaining volume associated to order C namely, 35 units, will push out of the pipeline part of the volume associated with order B. In the figure, these numbers are represented above the corresponding edges.
The pushing graph is initialized with the complete set of vertices and by letting E — 0. The edges are dynamically created by monitoring the corresponding volumes and variable domains when operation activity bindings occur during the labelling process. This relation is bidirectional: if new edges are added, a propagation mechanism is invoked to update the variable domains accordingly.
The dynamic update of the pushing graph structure occurs as follows. Let p G P
be a pipeline. A new variable accj is created for each operation activities sndOpi,p G SndPipep and rcvOpj,p G RcvPipep, where i &gt; j. It represents the volume in p before inserting the total volume associated to activity sndOpi,p and after extracting the total volume corresponding to rcvOrpjP. This volume is known as the accumulated value between the activities. For instance, acc3,1,p = 35 units in the example depicted in figure 8.
As the send and receive sequences are time-ordered, it can be shown that sndOpi,p never pushes rcvOpj# out of p, if i &amp;lt;j. Thus, for each i &gt; j the acci,j,p variables can be represented by simple constraints. We let:
acci,j,p
=	volume(rcvOpkp,) — y^ volume(sndOpk,p).
(34)
k&lt;j
k&lt;i
If acci,j,p &gt; volume(p), then it is not possible for the volume associated with sndOpi,p to push the volume corresponding to rcvOpj,p inside p since a quantity greater than or equal to the pipeline volume was already injected in the pipeline between both such volumes. On the other hand, if acci,j,p + volume(sndOpi&gt;p) + volume(rcvOpj,p) is at most volume(p), then the volume in sndOpi,p does not suffice to completely push the volume of rcvOpj,p out of the pipeline. We state the following edge-existence constraints:
3	edge (Order(sndOpitp),p)	(Order(rcvOpj,p),p)
(35)

[accj &amp;lt;volume(p)^ A [accj + volume(sndOpi&gt;p) + volume(rcvOpj,p) &gt; volume(p)^.
We also define a function pvol : E —&gt; ^+. For an edge (oi,pi)	(oj,pj), pvol
represents the volume of order oi in pipeline pi that was effectively used to push the volume corresponding to order oj out of pipeline pj. In figure 8, pvol(e) is the number above edge e. Note that such volume is not necessarily the total volume of one of the orders; oj can push several other orders out of a certain pipeline and, similarly, oj can be pushed out of a pipeline by several other orders as well. The function pvol can be calculated by the following relation, where e = ( (Order(sndOpip&gt;),p) (Order(rcvOpj,p),p)}:
pvol(e)
min
rcvOpj,p), volume(rcvOpj,p)
(36)
+ volume(sndOpi&gt;p) + accj
— volume(p)
}
— max
|o, volume(rcvOpj,p) + accj
volume (p)
.
Using constraints (34), (35), and (36), extended for all p G P and their operational activities, the pushing relations at individual pipelines can all be enforced. A simple
procedure is used to guarantee edge creation in the pushing graph, thus providing a global view of all pushing operations. It is described next.
First, we define two new functions invol : E —&gt; and outvol : E —&gt; Take an edge e = (oi,pi)	(oj,pj). The value invol(e) represents the volume of order oi that
has already been injected into pipeline pi immediately before it starts pushing the volume corresponding to order oj out of pipeline pj. Similarly, the value outvol (e) represents the volume of order oj that has already left the pipeline pj immediately before the volume associated with order oi starts to push it out of pj. For instance, in figure 8, let e = (C,p) (B,p). Then, we have invol(e) = 30 and outvol(e) = 0. The invol and outvol functions can be easily calculated by changing equation (36) appropriately.
For clarity, we define two similar functions: afterinvol and afteroutvol. The first represents the volume of order oi that has been injected into pipeline pi after it pushed volume pvol(e) of oj out of pipeline pj. The second represents the volume of order oj that has left pipeline pj after the volume pvol(e) was pushed out of pj by the volume associated with order oi. Clearly, afterinvol(e) = invol (e)+pvol(e) and afteroutvol(e) = outvol(e) + pvol(e). In figure 8, if e = (C,p) (B,p), then we have afterinvol(e) = 65 and afteroutvol (e) = 35.
Let pm,pm+1 be two consecutive pipelines along the route of an order o. Also, let v,w G V, and with edges v	(o,pm) and (o,pm+1)	w in E. In direct volume
transmissions between pipelines, a situation enforced by constraints (5) and (6), we can post
outvol(v	(o,pm)), afteroutvol(v	(o,pm))
(37)
n
invol ((o,pm+1)	w), afterinvol((o,pm+1)	w)
v w.
= 0
The pushing relations are transitive along a route, provided there is an intersection among the invol and outvol intervals. This transitivity is a mathematical view of the following fact. While a volume associated with v is pushing a certain volume of o out of pipeline pm, this same amount of volume is being directly transmitted to pipeline pm+1. As such, it will also push some volume out of pipeline pm+1, corresponding to order w in our example. Therefore, a volume corresponding to v in pipeline pm is pushing a volume associated with w in pipeline pm+1. So, an edge must be created between vertices v and w. Hence, every time a new edge is dynamically inserted in G, the propagation mechanism will try to add new edges using condition (38), thus defining a global precedence relation between pipelines and their activities. The pvol of the new edge will be the minimum of the pvol of both previous edges. We post the following constraint when a new edge e is added to the graph of a pipeline p G P, to state the time dependency between activities
sndOpPi and rcvOpPyi, both related to edge e:
StartTime(sndOpi,P), EndTime(sndOpi&gt;P)j Q
StartTime(rcvOpj,P), EndTime(rcvOpj,P) = 0.	(38)
Also, let MaxFli be a variable representing the maximum flow rate for activity sndOpP,i, related to variable Product(sndOpP,i), and let MaxFlj stand similarly for activity rcvOpP,j. We state:
volume(sndOpi,P)
EndTime(sndOpiP) — StartTime(sndOpitP) volume(rcvOpj,P)
EndTime(rcvOpj P) — StartTime(rcvOpj P)
&amp;lt;MaxFlj	(39)
&amp;lt;MaxFli.	(40)
The pushing graph is capable of ensuring complex precedence relations, as it provides a global view of the pumping conditions of all activities. Moreover, it is clear that it can be seen as a network flow graph as well: the pvol sum for the edges that push the volume of an order o in a pipeline p must be equal to the pvol sum for the edges representing the orders pushed by the volume of o. The value of this sum is precisely volume(o). Clearly, then, in order to enhance domain reductions, we can use a flow global constraint [27] involving sequences of send and receive variables.
Channeling Variables and Constraints
Finally, it is necessary to bind orders to operation activities, thereby connecting the order viewpoint to the operations viewpoint. This can done by defining positional variables sndPosiP and rcvPosiP, accounting for the positions of, respectively, the send and receive activities of order oi at pipeline p G route(oi).
First, two different orders can not be associated to the same pipeline position. We use alldifferent global constraints [29] to enforce this restriction. For each p G P, we let
alLdiff({sndPosiP : oi G O,	p G route(oi)}),	(41)
alLdiff({rcvPositP : oi G O,	p G route(oi)}).	(42)
The	order	and operation viewpoints can be	easily connected using the element constraint	[29] together with positional variables,	as follows. For an	element constraint
z = xy,	where	x, y are variables and z is either a	constant or variable,	we use the notation
element (z,x,y). We state
element(StartTime(sndip&gt;), StartTime(sndOpk,P), k = sndPosip)), element(EndTime(snditP), EndTime(sndOpk,P), k = sndPosip)),
and, for all oi G O and all p G route(oi), we state further:
element (oi, Order(sndOpk,P), k = sndPosi,P),
element(volume(oi), Volume(sndOpk,P), k = sndPosi,P), element (direction^), Direction(sndOpk,P), k = sndPosiiP), element(product(oi), Product(sndOpk,P), k = sndPQSi&gt;P).
(43)
(44)
(45)
(46)
(47)
(48)
A similar set of constraints is applied to the receive sequences.
It is also necessary to enforce sndPosiiP = rcvPosiiP if and only if direction (oi) G {N, R}, that is, the order is not related to any pipeline flow reversal. The other cases are handled by the global constraint reversal, described in section 4.3. At last, we note there are positional variables for sequencing orders in tanks as well, which are modelled in a similarly way. But note that, as tanks do not involve operation activities, the corresponding restrictions only involve variables from the order viewpoint model. Since they are simpler and declared analogously, they will be omitted due to space considerations.
Free Delivery Orders
Only minor changes to the previous modelling are necessary in order to handle free orders. Among them, in the order viewpoint, volumes and products should be changed from constants to variables in all constraints. Also, Alternative Resource Set [30] constraints can be used to guarantee that origin and destination tanks are assigned to all free orders. The operations viewpoint model remains unchanged.
Search Strategy
The search strategy refers to the algorithms responsible for finding a feasible solution to the CP problem. In the sequencing model, a solution is found by labelling only the positional variables. The constraint propagations in the order and operations viewpoint models ensure the satisfaction of the problem restrictions. Also, time variables do not need to be labelled since we are only interested in valid time bounds for order satisfaction, given by the minimum and maximum values of the resulting domains.
Different types of search strategies were tested in order to solve the sequencing model. The currently implemented version is shown in Algorithm 2. It combines a backtracking
mechanism [29] with a special variable ordering strategy. The algorithm has two consecutive parts: disjunctive components determination and adaptive backtracking. More details about each part now follow.
Algoritmo 2 Procedure for search strategy
1: procedimento
2:	Identify network disjunctive components C
3:	Para each c G C faça
4:	Build resource graph G(c) and sort it topologically, obtaining order N
5:	N' := N; k := initial _k
6:	enquanto N' = 0 faça
7:	p := first element from sequence N'; N' := N'/{p}
8:	Label positional variables, and volumes/tanks in case of free orders
9:	se fails in labeling &gt; k and not cyclic condition então
10:	k := k+incremental factor; N' := N
11:	Move p to the beginning of sequence N'
12:	fim se
13:	fim enquanto
14:	fim Para
15: fim procedimento
Disjunctive Components Determination. A disjunctive component is defined as a subset of the network which can be sequenced separately, without affecting other regions. Two pipelines belong to the same component if they are both contained in a route associated to some order. The same reasoning applies to tanks. Therefore, it is possible to deal with smaller search spaces, as each component has its own backtrack tree.
The disjunctive component determination also gives some room for parallelism during execution, although it was not implemented in the current experiments.
Adaptive Backtracking. We implemented backtracking using the positional variables for each pipeline and each tank. The term adaptive stems from the fact that we used a restart strategy [31].
The labelling process is done for each pipeline and each tank separately, both treated as resources. Given an initial resource ordering N, all the positional variables of a resource are labelled before the labelling of the next resource. In case the number of fails (i.e., failed value assignment to positional variables) reaches a parameter k during the labelling of a resource, the ordering N is changed dynamically, as described shortly. The process is then restarted.
The values of positional variables are randomly chosen, giving higher probabilities to orders with the earliest deadlines. For free orders, volumes, products and tanks are set after their respective positional variables are labelled.
The initial sequencing is constructed as follows. Firstly a resource graph is created, in which nodes represent resources and there is a direct arc from node p to q if there is a consecutive pair (p, q) in a route associated with some order. In case there are two arcs (p,q) and (q,p), only the one associated with the order having the earliest deadline is maintained. Secondly, the graph is topologically sorted, the result being the desired initial sequencing. Clearly, this strategy considers first those pipelines or tanks with the least number of volumes that are injected directly from other pipelines.
After the occurrence of k fails involving a resource, the backtrack tree is reinitialized with that resource as the first element in the topological ordering, and k is incremented by a constant. This implementation was motivated by the fact that, during test runs, it was observed that a fair number of fails were caused by earlier decisions taken when instantiating variables associated to pipelines in the given sequencing. We empirically determined that k = 150 was a good increment. Also, some precautions were taken to avoid the repetition of pipeline sequences that have already been tried, as indicated in step 9 of Algorithm 2.
4.4	The Scheduling Sub-problem
The second sub-problem of the complete CP model is solved by a simpler constraint model which is responsible for assigning the exact times to pumping operations, respecting forbidden alignment configurations and avoiding simultaneous pipe usage. Once a solution to the sequencing model is found, we already have the sequencing of all orders at each pipeline and at each tank.
The pumping operations are created by simply checking the edges of the pushing graph, as explained in section 4.3. They already represent the minimum number of pumping operations required, given the way the graph is generated. For each edge, a new type of send and receive operation is created, with the corresponding volume set to pvol. Additionally, a procedure for unifying such activities was built in order to reduce the number of variables in the model. Basically, it analyzes paths in the pushing graph, checking if activity attributes such as volumes and times are the same. A simple example can be seen in figure 9. If activity A, pushes activities Aj and Aj+1, four operations will be created. However, only two operations are truly required, since Op\ is the same as Opj, and similarly for Op2 and Op{+1. This procedure can be efficiently implemented by simply decomposing paths in the pushing graph.
Let Dep be the set of depots, and let PumpOpsd give the pumping operations that
A	a.
Opn Op,
Op^1
□
Figure 9: Example of activity unification.
□
will start at depot d, for each d G Dep. The simultaneous sending constraints can be enforced using a discrete resource, DiscSendingd. Such a resource limits the number of simultaneous operations to a certain maximum number [30]. Thus, we associate each operation in PumpOpsd with its respective resource DiscSendingd, and with an input value limit set to DepotMaxSimultaneousOperationsd. The constraints are, for all d G Dep:
pumpOp requires DiscSendingd : V d G Dep, pumpOp G PumpOpsd	(49)
MaxCapac(DiscSendingd) = DepotMaxSimultaneousOperations d.	(50)
Similarly, the forbidden alignment configurations are enforced using discrete resources AlignDisca)d, one for each alignment restriction a and depot d. The operations associated with each resource are easily identifiable by checking their product type and flow direction. Assume that the forbidden alignment configuration set at depot d is given by Alignd. For each a G Alignd, let OpAlignd;a be the set of pumping operation tuples of size |a|, starting in d, that might violate the alignment conditions. This latter case is easily identifiable by just checking product types and flow directions. We then state, for all d G Dep and all a G Alignd:
pumpOp requires AlignDisCd,o : pumpOp G OpAlignd;a	(51)
MaxCapac(AlignDiscd)a) = |a| — 1.	(52)
The time variables are labeled with the least possible value in their domains. This forces pumping to start as soon as possible. In case a failure ensues, a new sequencing solution is requested, most certainly a different one, due to the randomizations present in the previous model.
4.5	A Running Example
In this section we use a small running example to illustrate important aspects of the planning and scheduling phases. To this end, consider the net topology depicted in figure 10.
We have six depots: Do,... ,D5. Products Fo and F1 need to be pumped from D4 and D5 to D1 and Do, respectively. Right next to each depot we have two tanks. For example, at depot Do we have tanks Tooo and T001 for products Fo and F1. At the initial instant, tank Tooo contains 5 units of volume, indicated by writing 5u inside the rectangle representing that tank. At time 2, tank T010 at depot D1 contains 15u of volume, and so on. Note that depots D2 and D3 are just junctions, there is no storage tanks next to them.
There are 5 pipelines depicted in the figure: Po, . . . , P4. We assume, for simplicity, that all pipelines have capacity of 5u and have all the same length. Flow rates are assumed to be constant all over the network.
In order to move products from D4 and D5 to D1 and Do, respectively, we will use four routes. They are:
1 Ro = D4P2D2P4D3 P1D1
2.	R1 = D5P3D3P4D2P0D0
3.	R2 = D4 P2 D2P4D2 Po Do
4.	R3 = D5P3D3P4D3P1D1
Inside the rectangle representing each pipeline, we indicate the product it contains, as well as the route assigned to that product. For example, at time 1 pipeline P2 contains 5u of product Fo on route R2. Note that Ro is a direct route from D4 to D1; it will be used to move 5u of product Fo from D4 to D1. Also, R1 goes directly from D5 to Do and will be used to move 5u of F1 from D5 to Do. Suppose that the planning phase generates, for some reason, orders to send 5u of fuel Fo on route Ro and another 5u of fuel F1 on route R1. Note that both these routes include pipe P4, and so the flow will have to reverse direction at that pipe, so as to accommodate for the passage of Fo and F1 through it, but in opposite directions. We can use the routes R2 and R3 to accomplish this reversal but, as a result, the planning phase will have to generate free delivery orders to make this happen.
At the beginning of the planning horizon all pipes are completely filled with products already routed to their destinations. For one such product, the route starts at the pipe where the product is at the beginning of the planning horizon and describes the sequence of depots and pipes to be traversed by the product until it reaches its destination depot. In other words, for products that start in some of the pipes, their routes are suffixes of
one of the four routes Ri. We can see this by examining figure 10 at time 0. At that time, pipe P4 contains 5u of fuel Fo on the shortened route S4 — P4D3P1D1. Note that S4 is a suffix of the full route Ro. The shortened routes that concern us in the example are:
1.	Suffixes of Ro:	(i)	Si —	P1D1,	(ii) S2 — P2D2P4D3P1D1, and	(iii) S4	— P4D3P1D1.
2.	Suffixes of Ri:	(i)	So —	P0D0,	and (ii) S3 — P3D3P4D2PqDq.
Now, lets follow some actions that could happen at the planning phase. Suppose that, at the beginning, we have a demand of 15u of fuel F1 at depot Do at time 10. The planning algorithm notices that we already have 10u of F1 in the pipelines, namely, at P3 and at Po. Since it favors shortened routes because, potentially, they have smaller travelling times, it generates two delivery orders: Oo — (0,ToO1,F1, 5u,S0,10) and O1 — (0, T001, F1, 5u, S3,10). Notice the shortened associated routes. Since these volumes have no origin depots, that data is written as 0 in these orders. We need some more 5u of F1 to be pushed to Do. The shorter route from D4 or D5 to Do is R1 (R2 also fits, but it is longer and involves a flow reversal at P4). So, the algorithm generates one more delivery order: O2 — (T131, T001, F1,5u, R1,10). By this order, we request that 5u of F1 from tank T131 at D4 to be sent to tank T001 at Do, via route R1. In order to satisfy the demand for 15u of F1 at Do, the algorithm then generates another delivery order: O3 — (T001,0,15u, 0,10). Note that this order just discharges 15u of F1 from tank T001 at time 10.
Further, suppose that at we have a production of 15u of F1 at D5 at time 5. Although this volume need not be used to satisfy the demand, it may be necessary at D5 in order to push other products that are already waiting in pipes along routes R1 and R3, and that have more pressing deadlines to arrive at their destinations. In response, the planning algorithm might generate a delivery order like O4 — (0,T131,15u, 0, 5), saying that tank T131, at D5, receives 15u of fuel by time 5.
The scheduling phase will distribute and allocate the orders in a way that all tanks and pipelines capacities are respected. A typical sequence of movements, commented as appropriate, could be as follows (see figure 10.):
From time 0 to time 1: Pumping from D4, with active route Ro.
1.	A free order injects 5u of fuel Fo from tank T120 (at D4) into P2, on route R2. We denote this injection move by m0. Note that this volume is scheduled for flow reversal at P4, later on. This free order would have been generated by the planning algorithm.
2.	Move m0 pushes Fo from P2 into P4, on route S2. It is easy to check that this new move, denoted by m1, is compatible with route S2.
3.	Move mX, in turn, pushes Fo from P4 into PX, on route S4 and is compatible with route S2.
4.	A free order generated by the planning algorithm extracts 5u of fuel Fo from PX into tank ToXo (at DX).
From time 1 to time 2: Pumping from D4, with active route Ro.
1.	A free order injects 5u of fuel Fo from tank T020 (at D4) into P2, on route Ro. This injection move is denoted by m2 and would have been generated by the planning algorithm.
2.	Move m2 pushes Fo from P2 into P4, on route R2. The latter move is denoted by m3 and can be easily checked to be compatible with route R2. This volume on P4 will reverse its flow on the next move.
3.	Move m3 pushes Fo from P4 into PX, on route S2. The corresponding move, denoted by m4, is compatible with route S2.
4.	A free order generated by the planning algorithm extracts 5u of fuel Fo from PX into tank ToXo (at DX).
From time 2 to time 3: Pumping from D5, with active route RX.
1.	A free order injects 5u of fuel FX from tank TX3X (at D5) into P3, on route RX. This free order would have been generated by the planning algorithm and is denoted by m5.
2.	Move m5 pushes FX from P3 into P4, on route S3. The resulting move, denoted by m6, is clearly compatible with route S3.
3.	Move m6 pushes Fo from P4 into Po, on route R2. This move is compatible with route R2, and its volume reverses the flow direction in P4.
4.	Order O4 extracts 5u of fuel FX from Po into tank TooX (at Do). This is a free order generated by the planning algorithm.
Note that we had five free orders generated by the planning algorithm. Also note that order Oo has been serviced already. Further, the volume of FX, of order OX is now in pipe P4 and the the volume of FX, of order O2 is now in pipe P3. Hence, we have now 5u of fuel FX in tank TooX, and we have 10 more units of FX in the pipeline. If they arrive by time 10, we will guarantee enough of FX at Do to satisfy the demand specified by order O3. Finally, production order O4 can now inject 15u of FX in tank TX3X, at D5. We see that tank TX3X is already empty by time 3 and, if it remains empty by time 5, it will be able to accommodate the injection specified by order O4.
Figure 10: A small example.
5	Results
Solutions were obtained on a Intel Pentium D 3.40 Ghz CPU platform, with 4GB of memory. The planning and scheduling phases were coded in C++ and compiled using GCC-4.0. The CP model was solved using ILOG Solver 6.2 and ILOG Scheduler 6.2, with medium to high propagation enforcement.
We used four real field instances to test the models. The first two rows in Table 3 indicate the planning horizon and the number of deliver orders generated by the planning phase, respectively, for each of the test instances. The remaining lines give details of typical runs. All instances share the same network topology of 14 depots, 30 pipelines, 32 different product types and 242 tanks distributed among the depots. Pipelines volumes range from very small 30 m3 capacity pipes up to 8,000 m3 volume pipes. Most of the tank capacities are between 4,000 and 30,000 m3.
Figure 11 shows the total tankage in all depots for product groups LPG, Diesel, Gasoline, and Naphtha in two different instances. Here, a group is formed by gathering products with the same composition but different quality. For instance, in the Gasoline group we have normal and premium quality gasoline. This grouping is used often by pipeline operators. The figure displays volume variations over time in a typical solution, covering the entire planning horizon. Note that, in certain cases, there was a reduction of more than 15,000 m3 in a single group, attesting to an intense use of the pipeline network. Mainly, this volume variation indicates refilling activities necessary to maintain inventory levels, specially for those lines connected to depots with low-capacity tanks. For this same reason, some pipelines did not show the typical intermittent usage, but were continuously used throughout the planning horizon (not shown in the figure). Also, notice from figure 11 that the algorithm maintained the final and initial stocks at similar levels.
In all cases, the solver found a solution with only one iteration between phases and in a reasonable amount of computer time, e.g., within 10 minutes. The planning phase was
Time (io3min)	Time (io3min)
Figure 11: Tankage Evolution for two instances.
slower because it has to iterate through many combinations of products, bases, routes, and tanks for each order. Also, most variables of the scheduling phase were instantiated as a result of constraint propagation making it run faster. The search heuristic, which proved crucial in the planning phase, was also instrumental to improve other important aspects of the solution quality, a fact attested by logistic engineers. For instance, usually, the solution computed by the algorithm showed only a very small number of pipeline flow reversions, the kind of operation that engineers prefer to keep to a minimum. Also, new and interesting delivery routes were identified for some products. Some of them came as a surprise to logistic engineers, who are biased towards using of the same traditional routes they already know about from manually planning the network operation.
6	Conclusions
We proposed a novel procedure for generating feasible solutions for real instances stemming from planning and scheduling the operation of a very-large pipeline network, used to transport petroleum derivatives and ethanol. The operation of such a network is subjected to a complex set of physical and operational constraints. It makes possible the delivery of oil and biofuel to local markets, as well as the storing of the excess production from refineries. Using the CP paradigm, these constraints were adequately modelled. Problems of this size and complexity, as known by the authors, would not be solved by other
Table 3: Solver and model statistics
Instance	1	2	3	4
Horizon	10 days	7 days	7 days	7 days
Orders	924	645	724	693
Planning Phase Time	4 min	5 min	4 min	6 min
Planning Phase Peak Memory	78MB	61MB	67MB	63MB
Sequencing Model Variables	37,326	21,381	25,938	24,315
Sequencing Model Constraints	382,565	148,075	160,302	155,409
Sequencing Choice Points	3,355	2,462	3,417	2,518
Sequencing Fails	2,301	1,291	987	1,902
Sequencing Time	2 min	1 min	1 min	1 min
Sequencing Peak Memory	450 MB	240 MB	310 MB	270 MB
Scheduling Model Variables	12,350	7,530	8,931	8,032
Scheduling Model Constraints	27,088	16,768	19,231	18,292
Scheduling Choice Points	1,516	1,164	801	1,810
Scheduling Fails	301	429	210	120
Scheduling Time	2 min	1 min	1 min	1 min
Scheduling Peak Memory	450 MB	250 MB	290 MB	280 MB
Total Time	8 min	7 min	6 min	8 min
approaches reported in the literature to date, in which much of the difficult constraints and topologies are overlooked.
The algorithm has two phases. The planning phase generates the so called delivery orders, which describe how product volumes should be transmitted between depots. A delivery order contains information regarding product, volumes, origin and destination tanks, as well as timing deadlines. In this phase, a number of randomized heuristics work together in order to select appropriate depots, tanks and volumes so as to satisfy demand and production schedules. The scheduling phase, on the other hand, creates an ordering among the delivery orders and, further, assigns start and end times for each delivery order, while observing all deadlines and operational constraints. Additionally, it also assigns volumes and tanks for the so called free delivery orders. Several reasons motivated the use of CP techniques to model the activities that comprise this phase. Primarily, the scheduling problem is highly over-constrained and has several non-linear constraints, easily modelled in the CP paradigm. Besides, the main goal was to search for a feasible solution. Notably, the choice of variables for value assignment in the CP model uses a special type of restart strategy. In case no solution is found in this phase, a new set of orders can be requested from the planning phase.
The present modelling and implementation stage was reached after 2 years of problem specification, data gathering, model development, and testing. The procedure is already integrated with a proprietary flow simulation tool and the company is currently consider
ing it for routine use on a daily basis. The tool has already proved its value, showing that it can save many valuable work hours of skilled engineers. Also, the tool allows for many different planning and scheduling scenarios to be easily set-up and quickly tested, by varying local demand needs and production schedules at refineries. In this way, a significant difference in the end-user daily routine is the ability to save many hours interacting with the simulator when searching for a feasible and adequate solution.
There are several opportunities for further research related to this problem. First, new real-world constraints are being considered to improve the adequacy of the overall model. Such could include inventory management restrictions, limitations on energy use at critical daily periods and at specific depots, and shut-down periods or partial operation intervals for tanks and pipelines. Also, one can implement more sophisticated search heuristics for both the planning and scheduling phases, making the overall approach capable of dealing with more specific real instance classes. When modelling such new constraints, we feel that the flexibility of the CP paradigm will again prove to be crucial. Finally, one can consider objective functions that would help guide the heuristics. This would provide a yardstick that could be used to gauge solution quality.
Acknowledgments. We thank the anonymous reviewers for their insightful feedback. This research was supported by grants 05/57343-0 and 05/57344-7 from FAPESP and grants 301732/07-8, 478470/06-1, 472504/07-0, and 473726/07-6, 305781/2005-7 from CNPq. The authors are also grateful to Fernando Marcellino and the team of engineers from PETROBRAS-Tl/SP.
References
[1]	Group, A.E.: How pipelines make the oil market work - their networks, operation and regulation (2001)
[2]	Wilson, R.: Transportation in america, eighteenth edition. Washington, D.C.: Eno Transportation Foundation, Inc. (2001)
[3]	Moura, A., de Souza, C., Cire, A., Lopes, T.: Planning and scheduling the operation of a very large oil pipeline network. In: Lecture Notes in Computer Science - Proceedings of the 14th International Conference on Principles and Practice of Constraint Programming. Volume 5202. (Setembro 2008) 36-51
[4]	Moura, A., de Souza, C., Cire, A., Lopes, T.: Heuristics and constraint programming hybridizations for a real pipeline planning and scheduling problem. In: Proceedings of the 11th IEEE International Conference on Computational Science and Engineering - CSE’08. (Julho 2008) 455-462
[5]	Camponogara, E., Souza, P.S.: A-Teams for oil transportation problem through pipelines. In: Information Systems Analysis and Synthesis, Orlando, United States (1996)
[6]	Milidiu, R., dos Santos Liporace, F.: Planning of pipeline oil transportation with interface restrictions is a difficult problem. Technical Report 56, Departamento de Informatica, PUC-Rio, Rio de Janeiro, RJ, Brasil (2003)
[7]	Milidiu, R.L., Pessoa, A.A., Laber, E.S.: Pipeline transportation of petroleum products with no due dates. In: LATIN ’02: Proc. of the 5th Latin American Symposium on Theoretical Informatics, London, UK, Springer-Verlag (2002) 248-262
[8]	Milidiu, R.L., Pessoa, A.A., Laber, E.S.: The complexity of makespan minimization for pipeline transportation. Theoretical Computer Science 306(1-3) (2003) 339-351
[9]	Alves, V., Filho, V.J.: Pipeline scheduling of petroleum derivatives using genetic algorithm. In: IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petruoleo e Guas, Campinas, Brazil (2007)
[10]	Cafaro, D.C., Cerda, J.: Optimal scheduling of multiproduct pipeline systems using a non-discrete MILP formulation. Computers &amp;amp; Chemical Engineering 28(10) (2004) 2053-2058
[11]	Rejowski, R., Pinto, J.M.: A novel continuous time representation for the scheduling of pipeline systems with pumping yield rate constraints. Computers &amp;amp; Chemical Engineering 32 (2008) 1042-1066
[12]	Filho, E.M.S., Filho, V.J., de Lima, L.S.: Variable neighborhood search (VNS) applied to pipeline distribution problem with capacity constraints. In: IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petróleo e Gás, Campinas, Brazil (2007)
[13]	Camponogara, E.: A-Teams para um problema de transporte de derivados de petroleo. Master’s thesis, Instituto de Matematica, Estatóstica e Ciência da Com-putaçao, Universidade Estadual de Campinas, Campinas, Brazil (1995)
[14]	de la Cruz, J., Andrós-Toro, B., Herrón-Gonzólez, A., Porta, E.B., Blanco, P.F.: Multiobjective optimization of the transport in oil pipelines networks. In: Proceedings of the IEEE Conference on Emerging Technologies and Factory Automation. Volume 1. (2003) 566-573
[15]	de la Cruz, J., Herróan-Gonzaólez, A., Risco-Martón, J., Andróes-Toro, B.: Hybrid heuristic and mathematical programming in oil pipelines networks: Use of immigrants. Journal of Zhejiang University SCIENCE 6A(1) (2005) 9-19
[16]	Magatão, L., Arruda, L., Neves, F.: A mixed integer programming approach for scheduling commodities in a pipeline. Computers &amp;amp; Chemical Engineering 28(1) (2004) 171-185
[17]	Magatãao, L., Arruda, L., Neves, F.: Using CLP and MILP for scheduling commodities in a pipeline. Computer-Aided Chemical Engineering 20B (2005) 1027-1032
[18]	Relvas, S., Barbosa-Póvoa, A.P.F.D., Matos, H.A., Fialho, J., Pinheiro, A.S.: Pipeline scheduling and distribution centre management - a real-world scenario at CLC. In: Proceedings of the 16th European Symposium on Computer Aided Process Engineering and 9th International Symposium on Process Systems Engineering, Garmisch-Partenkirchen, Germany (2006) 2135-2140
[19]	Relvas, S., Matos, H.A., Barbosa-Poóvoa, A.P.F.D., Fialho, J., Pinheiro, A.S.: Pipeline scheduling and inventory management of a multiproduct distribution oil system. Industrial &amp;amp; Engineering Chemistry Research 45(23) (2006) 7841-7855
[20]	Relvas, S., Matos, H.A., Barbosa-Póvoa, A.P.F.D., Fialho, J.: Reactive scheduling framework for a multiproduct pipeline with inventory management. Industrial &amp;amp; Engineering Chemistry Research 46(17) (2007) 5659-5672
[21]	M. Sasikumar, M., Prakash, P.R., Patil, S.M., Ramani, S.: Pipes: A heuristic search model for pipeline schedule generation. Knowledge-Based Systems 10(3) (1997) 169175
[22]	Rejowski, R., Pinto, J.M.: Scheduling of a multiproduct pipeline system. Computers &amp;amp; Chemical Engineering 27(8) (2003) 1229-1246
[23]	Rejowski, R., Pinto, J.M.: Efficient MILP formulations and valid cuts for multiproduct pipeline scheduling. Computers &amp;amp; Chemical Engineering 28(8) (2004) 1511-1528
[24]	Crane, D.S., Wainwright, R.L., Schoenefeld, D.A.: Scheduling of multi-product fungible liquid pipelines using genetic algorithms. In: Proceedings of the 1999 ACM Symposium on Applied Computing, San Antonio, USA (1999) 280-285
[25]	Milidiu, R., dos Santos Liporace, F., de Lucena, C.J.P.: Pipesworld: Planning pipeline transportation of petroleum derivatives. In: Proceedings of ICAPS’03 -Workshop on the Competition: Impact, Organization, Evaluation, Benchmarks, Trento, Italy (2003)
[26]	Competition, t.I.P.: http://zeus.ing.unibs.it/ipc-5/
[27]	Hooker, J.N.: Integrated Methods for Optimization (International Series in Operations Research &amp;amp; Management Science). Springer-Verlag, Secaucus, USA (2006)
[28]	Cheng, B.M.W., Choi, K.M.F., Lee, J.H.M., Wu, J.C.K.: Increasing constraint propagation by redundant modeling: an experience report. Constraints 4(2) (1999) 167-192
[29]	Marriot, K., Stuckey, P.: Programming with Constraints: An Introduction. 1“ edn. MIT Press, Cambridge, Massachusetts (1998)
[30]	ILOG: ILOG Scheduler 6.2: User’s Manual. ILOG. (2006)
[31]	Kautz, H., Horvitz, E., Ruan, Y., Gomes, C., Selman, B.: Dynamic restarts policies. In: Proceedings of the AAAI-2002, Edmonton, Alberta (2002)
Epílogo
A fase de planejamento aqui desenvolvida utilizou-se do conhecimento e experiêencia dos operadores da rede para a construçõo do conjunto de planos de entrega. Como visto, essa construçao é incremental, com um grupo de funções avaliando as possíveis propriedades de um plano. Apéos a avaliaçcõao, a escolha da propriedade ée aleatéoria sobre um subconjunto das melhores candidatos. Assim, planos sõao criados para atender as demandas mais urgentes atravées da rota que permita uma entrega mais réapida que cause o menor néumero de reversoões. O tanque origem ée aquele com maior volume disponéível do produto e o de destino ée aquele com maior espaçco livre. Aléem disso, o volume do plano de entrega ée maximizado de acordo com os tanques escolhidos.
A criaçao de cada plano tem como objetivo a satisfaçõo de uma demanda e o procedimento termina quando todas demandas tenham sido atendidas. Neste ponto, o conjunto de planos pode ser alterado pelos operadores para satisfazer outras necessidades como, por exemplo, a transferêencia de quantidades entre éorgaõos para satisfazer demandas futuras, dentre outras.
No modelo de agendamento apresentado, os planos de entrega sõo vistos como atividades, ou seja, estruturas que permitem a aplicaçõo de restrições globais mais específicas para problemas de agendamento [25]. Os planos geram duas atividades para cada duto por onde passam, uma atividade para a entrada no duto e a outra para a saéda do duto. Cada atividade ée, de forma geral, composta por um tempo de énicio e tempo final, os quais modelam os intervalos de ocorrêencia do plano em cada duto, ao invées de modelar os bombeamentos explicitamente.
Esta representaçcaõo com intervalos de tempo permite uma formulaçcõao mais compacta do modelo para a rede de dutos, e adicionalmente, facilita a aplicaçcõao de restriçcoões globais relativas as disjunções temporais, como as restricões cumulative e disjunctive, apresentadas no texto. Como héa tambéem um menor nuémero de variaéveis, tambéem ée possével aumentar o nével de propagacçaõo das restriçcoões, o que reduz o tamanho da éarvore de backtracking.
O sequenciamento dos planos de entrega foi dividido segundo dois pontos de vistas de modelagem: a visõo do plano (order viewpoint) e a visõo das operaçoes (operations viewpoint). A primeira visõao engloba as restriçcõoes que definem a movimentacçõao do plano pela sua rota, definindo limitantes temporais à sua realizaçõo. Isso inclui o tratamento das vazõoes, a conexõao entre o recebimento em um duto e o envio no proéximo duto, o atendimento do prazo na base destino e a utilizacçaõo de recursos nos tanques de origem e destino. Aléem disso, nessa visõao ée aplicada àa restricçõao de disjuncçõao temporal entre as realizaçcoões das ordens entre si num mesmo duto ou tanque. A visaõo das operaçcoões implementa o funcionamento dutos, forçcando a necessidade de se extrair uma quantidade
igual de volume da extremidade oposta quando uma quantidade é injetada no duto. Da mesma forma, essa visão determina como a direçao de movimentação em um duto pode ser alterada considerando a necessidade de planos específicos para a relizaçao de reversães. Outro aspecto tratado são os pares incompatíveis, proibidos de seguirem juntos num mesmo duto.
O grafo de empurramento (Pushing graph) e uma representação redundante do problema, mas que ajuda na propagação das restricães, principalmente, aquelas referentes à precedência de atividades. O grafo é construído sobre as atividades, analisando um se-quenciamento destas em toda a rede. Os víertices desss grafos saão os pares de planos e dutos, jé que as atividades são criadas segundo esses mesmos pares. Assim, se uma atividade de envio ocorre ao mesmo tempo que outra de recebimento no mesmo duto, entaão um plano de entrega ao entrar por uma extremidade empurra outro plano de entrega para fora do duto. Isso cria uma aresta no grafo de empurramento entre dois pares de planos naquele duto. Sobre essa representacão pode-se criar diversas restrições relacionando as quantidades dos planos de entrega, o volume dos dutos e as precedêencias entre as atividades.
A representaçcaão pelo grafo de empurramento daí uma visãao global sobre as relaçcoães de precedêencia, sendo essencial para a eficiêencia do modelo de programaçcãao por restriçcoães do subproblema de sequenciamento.
As atividades com suas movimentaçcãoes por intervalos de tempo, contudo, nãao caracterizam uma solucão do PPAORO, conforme descrito no capítulo 2. Assim, um segundo modelo PR para atribuição de tempos í utilizado para determinar exatamente os tempos dos bombeamentos. Tais tempos sao calculadas a partir do sequenciamento dos planos, obtido pela solucçãao do modelo anterior. As variíaveis do modelo de atribuicçãao de tempos representam exatamente as operaçcãoes de envio e recebimento que ocorreraão nos dutos, determinadas a partir de uma solucçãao parcial do problema de agendamento. As restriçcãoes faltantes, tal como envios simultaneos e alinhamentos, sao facilmente implementadas neste segundo submodelo. O artigo não apresenta a modelagem dos requisitos C5, C10 e C15 em decorrêencia da falta de dados na instêancia, mas estas podem ser implementadas utilizando-se simples restriçcãoes de disjuncçaão temporal.
O artigo tambíem apresenta um míetodo de busca diferenciado de soluçcoães, denominado backtracking adaptativo. Ao invés de fixar uma ordem de variaveis para atribuição de valores, o algoritmo procura identificar os dutos mais críticos a partir do numero de fails gerados pelo resolvedor de PR durante o sequenciamento dos planos. Espera-se que a ocorrência de muitos fails seja devida à decisães equivocadas no passado e, portanto, os dutos problematicos ganham prioridade na ordem de sequenciamento, quando uma nova érvore de backtracking í construída.
O modelo apresentado foi obtido apíos 2 anos de especificaçcãao, extraçcaão de dados,
modelagem e testes. O procedimento foi integrado a um simulador proprietário da empresa e as soluçao foram validades por engenheiros da Petrobras. E importante notar que as novas rotas encontradas estão dentro das existentes, porám nao sao usuais para os produtos utilizados. Como foi demonstrado, o tempo de execução para horizontes de ate 10 dias manteve-se aceitável.
Existem muitas oportunidades de melhoria dos modelos de progamacçaão por restricçãao. No entanto, á notário que a fase de planejamento mensal recebeu atenção reduzida nesse artigo e a utilizaçao de uma heurística, mesmo que suficiente para os propásitos de agen-damento, ainda áe um passo inicial. O práoximo artigo apresentaráa uma nova modelagem que tratará a fase de planejamento usando fluxo em redes.
Capítulo 7
Um modelo para o Problema de Planejamento
Prólogo
O artigo deste capítulo foi submetido ao periúdico Computers &amp;amp; Chemmical Engineering, em 2010, e apresenta uma formalização do problema de planejamento junto com uma modelagem baseada em fluxo em redes.
No artigo apresentado anteriormente, a fase de planejamento recebe um tratamento heurústico. Naão húa, no entanto, uma formalizacçãao do problema determinando quais as restriçcoães tratadas ou mesmo uma funcçaão objetivo. O conjunto de caracterústicas tratadas do PPAORO restringe-se as estimativas de atendimendo da demanda, ocupação dos dutos e utilizaçcãao dos tanques. Nãao úe p ossúvel , por exemplo, determinar o estado de toda a rede em um instante de tempo qualquer, o que seria necessaúrio para verificaçcaão de restriçcoães baúsicas do PPAORO.
Embora o tratamento apresentado seja suficiente para obtençao de instâncias de entrada para o problema de agendamento, húa pouca informaçcaão sobre a qualidade dessas instâancias. Naão úe surpresa que um conjunto de ordens criado considerando-se menos re-striçcãoes traraú dificuldade para o algoritmo de agendamento. Portanto, uma modelagem que considerasse mais restriçcãoes possivelmente forneceria entradas de maior qualidade.
Os tratamentos estudados na literatura resolveram o PPAORO focando na obtençcãao de uma solucçãao para o problema de agendamento. No entanto, nenhum desses procedimentos conseguiu tratar eficientemente uma rede com topologia complexa e um horizonte de um mâes. Isso deve-se ao fato, primordialmente, que o problema de agendamento detalha diariamente, em horas ou minutos, as operaçcãos nos dutos. O problema de planejamento mensal nãao necessita disso, podendo sua solucçãao indicar somente o trúafego diúario. Sendo assim, muitas restrições deixam de ser aplicúveis, como por exemplo, aquelas referentes à
sequência dos bombeamentos.
O artigo a seguir apresenta uma formalização do problema de planejamento utilizando um subconjunto de restriçães do PPAORO e uma funçao objetivo que minimiza o custo de transporte. A seleçao das restriçães foi feita conforme as principais preocupaçães dos engenheiros de logística quando constroem solucães manuais
A modelagem de fluxo em redes, aqui proposta, não utiliza a visão tradicional utilizada em outros modelos [9], e pode ser resolvida usando um resolvedor de modelos de programaçao linear. Isso torna o procedimento eficiente para teste de diversos cenários, variando a previsãao de demanda e o planejamento de produçcaão.
Nesse artigo, a fase de planejamento á entendida tambám como um problema isolado de planejamento tático. Neste problema é necessario dizer quais serâo os bombeamentos diarios partindo de cada rota para satisfazer as demandas previstas e escoar as produçcãoes planejadas. Os resultados obtidos com o uso do procedimento foram comparados com as resolucçoães manuais desse mesmo problema e apresentaram melhorias significativas.
Planning The Operation of a Large Real-World Oil Pipeline
Tony M. T. Lopes, Andre A. Cire, Arnaldo V. Moura, Cid C. de Souza Institute of Computing - University of Campinas 13081-970, Campinas, SP
{arnaldo, cid}@ic.unicamp.br, {andre.cire, tony.lopes}@gmail.com
Abstract
A set of oil derivative distribution depots, including refineries and terminals, have local demands and productions of different products in a given time horizon. However, there may be not enough local stock of some product to satisfy the corresponding demand, or there may not be enough tank capacity to stock the local production. This brings the need for transportation of oil derivatives through a network of pipelines. To accomplish that, a tactical pumping plan is composed monthly, and a more detailed operational schedule, spanning a few days, must be updated daily. Both the planning and the scheduling must satisfy a large set of operation constraints. This work defines the tactical planning problem and proposes a novel network flow model to solve it. Also, a procedure is given to decompose the solution into a specific input format, as needed by another solver that computes the final, detailed, daily scheduling solution. Our model treats the oil pipeline network that is operated by the Brazilian oil company Petrobras. This is one of the most complex and large topologies when compared to other networks treated in the open literature. The model was tested with real-world instances and showed significant improvements over human planning.
1	Introduction
The Oil Industry faces many difficult logistic problems that must deal with unstable markets and large amount of resources. In this context, planning problems are amongst the most important and have received intense attention [1, 2, 3, 4, 5].
This paper focus the inland oil derivatives distribution problem stemming from a network of pipelines operated by the Brazilian oil company PETROBRAS. Being the 15th largest oil company in the world1, it faces a very difficult transportation problem in which
1See www.energyintel.com.
Figure 1: A Sample Pipeline Network.
□ f0
■	f.
■	f2
ethanol and several petroleum derivatives, like gasoline, diesel, and naphtha, must be transported from refineries to depots, where consumer markets are located. Pipeline networks offer the most economical way available to transport oil derivative products inland. The scenario studied here has an extension of 7,000 kilometers, comprising 29 individual interconnecting pipelines. There are 14 distribution depots that can store up to 10 millions cubic meters of products, stocked in more than 200 tanks located at various depots. Figure 2 depicts the network topology.
The use of such a complex network must be approached at the strategic, tactical, and operational levels [6]. While the first level deals mostly with planning adjustments and extensions to the current network, the latter two manage the network operation. The difference among them resides in the amount of details each one treats, the time horizon considered, and in their operational objectives. At the tactical level, one usually aims at checking if the production plans in the refineries are enough to satisfy the forecasted demand. It must take into account as many operational decisions as possible, while still keeping the problem solvable in a feasible amount of time. It usually spans large horizons comprising from months to years. At the operational level, one treats the problem of constructing detailed daily schedules for the pumping operations at each depot, in such a was as to guarantee that all listed demands are satisfied and all refinery productions are properly stocked.
Most of the previous approaches to this problem, however, focus the operational level where detailed daily pumping schedules must be planned [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 3]. A few other works could be considered tactical approaches [17, 18, 19]. In any case, they could not be directly applied to our problem, since they handle much simpler networks, usually with only one pipeline.
Solving the tactical problem manually can be ineffective. It is necessary to obey many refinery production schedules and the pipeline network is too complex for in depth man
ual analysis of all possible operational constraint violations. In fact, the only constraints usually verified in manually constructed solutions are mass conservations at pipelines and tanks. On the other hand, the resulting tactical plan has a huge impact when scheduling daily plans. A bad tactical plan can result in overloading certain pipelines while underusing others. This, in turn, can lead to overdue demands. As another consequence, refinery productions of some derivatives might have to be reduced because local stocks are too high and products are not properly scheduled to be timely extracted from the corresponding tanks at refineries. To avoid these situations, engineers have to produce very conservative plans with many decisions depending solely on their past experiences. Furthermore, such manual procedures do not admit precise cost optimization considerations.
In this paper, we present a formal description of the planning problem, as we are going to call the tactical planning problem henceforth. This formalization takes into account the operational constraints that will have the greatest influence at the subsequent daily scheduling problem. A network flow model [20] is proposed to solve the planning problem. The main difficulty was to model specific pipeline characteristics, e.g. that they must be always completely full, while moving products through predefined pipeline routes. Transportation costs will be the objective to minimize. A decomposition algorithm is also given to extract individual pumping operations from the network flow solution. These operations could, then, be used as input to detailed daily scheduling algorithms, such as the one proposed in [3]. Computational results showed that the proposed model has an adequate execution time and produces solutions with up to 25% cost reductions when compared to manual solutions.
Section 2 describes the tactical planning problem. Section 3 applies network flow to model the tactical planning problem. The computational results can be seen in section 4. Section 5 summarizes our contributions and suggests further advances.
2	Problem Definition
The topology of a pipeline network system is given by three sets: tanks, depots, and pipelines. Tanks are used for product storage. During the whole planning period, a tank can store only a single type of product. Depots are geographically dispersed units where local demands for oil-derivatives occur. Each depot has its own subset of tanks and some depots may also hold refinery facilities. Pipelines interconnect the depots and are used for product transportation. Each individual pipeline connects only two depots.
An illustration of a pipeline system is presented in Figure 1, in which products (or fluids) Fo, F1, and F2 can circulate. The four depots Do ,D1, D2 and D3 are connected by the pipelines Po, P1, P2, P3, and P4. A label Tijk refers to the i-th tank in depot Dj being designated to stock product Fk. Note that two pipelines connect depots D2 and
Depot
Figure 2: The inland pipeline network.
Refinery
____'j Junction
D3, which is a common situation in practice.
Volumes must be extracted from tanks before pumped into a pipeline. After pumped out of a pipeline, volumes can either enter a tank or move directly into another pipeline. The sequence of pipelines traversed by a volume when moving from its origin to its destination comprises its route. More precisely, we define a route as an alternating sequence of depots and connecting pipelines. For example, the sequence D0PiD2P3D3 represents a valid route in Figure 1.
A single pipeline in a route is called a segment. All volumes in circulation must have a predefined route assigned to them. Also, a volume cannot be stocked at intermediate depots while moving along its route; it can only be deposited in an available tank at its destination depot.
The problem consists of planning oil derivative transfers between depots through valid routes in order to satisfy all depots inventory constraints, meet local demands, and accommodate all the refineries production schedules. The planning must also obey a complex set of operational restrictions over a given planning time period, or horizon, usually a month.
The constraints described in the next subsections were selected among many real operational constraints [3]. They represents the minimum set of constraints that are necessary to observe in order to produce a feasible tactical planning. All of these constraints must be verified by the end of each day, except for the stock levels, which are verified weekly. When producing a detailed operational pumping schedule, there are additional aspects that must be taken into consideration, and which are not considered by the tactical planner. These restrictions will not be treated here (see [3] for further discussions.) Restrictions regarding tanks, pipelines and stock levels are described in the following three
sections, respectively.
2.1	Tank Restrictions
All tanks must satisfy the following restrictions:
(1)	Tanks have a fixed and limited maximum capacity which must always be respected. Minimum capacities are all set to zero.
(2)	A tank can only store one type of product during the whole planning horizon. This constraint, required by field operators, ensures adequate product quality by avoiding possible mixtures. A depot can contain more than one tank for a given product, but it does not necessarily contain tanks for all products. It is possible that a depot contains no tanks at all, being used solely as an intermediate transmission node between two pipelines. In Figure 1, depot D2 depicts such a situation.
(3)	There is a limit to the amount of product that can be extracted and/or injected within a time period. This is due to many operational constraints that arise when managing tanks.
(4)	The initial product stock level at each tank is given and must be respected.
Problem specifications in which constraint 3 is satisfied are said to have the individual tank property. An alternative view used in some scheduling models [11] relax this restriction by considering virtual tanks for each product at each depot. Such virtual tanks aggregate the capacities of all real tanks of each product in a given depot.
2.2	Pipeline Restrictions
Pipeline restrictions are as follows:
(5)	Since they are pressurized, pipelines must be completely filled with products at all times. Hence, in order to pump a certain product out of a pipeline, it is necessary to inject an equal volume at the other pipeline extremity.
(6)	At the beginning, every pipeline is filled with products, separated in batches. All such batches have already being assigned a route that must be preserved.
(7)	As there is a limited number of pumps per depot, and given that products have different densities, a maximum flow rate must be observed per pipeline, per product and per flow direction.
(8)	In order to simplify the modeling, a set of assignments of products to corresponding acceptable routes is given as input.
2.3	Inventory Constraints
At each depot, stock levels must obey the following restrictions:
(9)	The stock of a product at a certain depot at time t is obtained by summing the volumes of that product at time t from all tanks that can stock the product at the given depot. The desired maximum and minimum level of each product stock per depot must be satisfied at the end of specific time periods, usually a week. Some depots might have undefined stock levels for some products. In these cases, it is assumed that the minimum level is zero and the maximum level is the sum of capacities of all tanks that can stock the product in the depot.
(10)	The stock levels at a depot vary mainly due to production and demand operations. Productions represent volumes created at a local refinery, while demands represent volume consumptions by the local market. Both are given in advance, using market estimates and other data such as raw products availabilities and refinery capabilities. Usually, a refinery depot produces more than the local tanks can actually store within the given planning horizon. Excess must be pumped out so as to accommodate the local productions and satisfy market demands at other locations.
The consumption rate of each product may vary greatly according to monthly seasonal markets. Moreover, it is difficult to foretell exactly the local market needs for a long period. As a result, pipeline operators are required to constantly update the network schedule to accommodate new demands, guaranteeing they will be satisfied on time. This can be done by solving the problem, taking an updated input instance, every time there is a need for it.
2.4	Input Instances and Solutions
The problem data is composed by: (1) the network, described by the sets of tanks, pipelines, depots and their initial states; (2) operational parameters, such as tank capacities, pipeline flow rates and stock levels; (3) a time horizon and a set of production and demand schedules (see Section 2.3) that must be accommodated and satisfied, respectively, at each depot.
Given the problem data, a feasible solution is obtained by defining the amount of products that must be pumped into pipelines each day, while satisfying all restrictions.
Table 1: Initial values and constants for an input instance
Constant	What it represents
vol(l)	total volume of pipeline l.
PilelineStarti	A set of triples (p, qty, r) each representing a quantity qty of product p that must follows route r that is initially inside pipeline l. The sum of the qty values over all triples is equal to vol(l).
stockd,tk	the initial volume inside tank tk at depot d.
productionp,d,t	the volume of product p produced at depot d in period t.
demandp,d,t	the volume of product p demanded at depot d in period t.
stockLevel M ind,p, stockLevel M axd,p	the minimal and maximum volumes of product p allowed at each depot.
maxQtyInjecte&gt;p&gt;i, maxQtyInjectp&gt;i, maxQtyInjectej, maxQtyInjectl	the maximum quantity that can be injected in one time period in pipeline l. Here, e represents a flow direction for product p in pipeline l: P for the normal direction and R for the reverse direction. When any of the three indices is missing, the intended meaning is to take the sum over the missing indices.
maxTransferr,p,n,u	the maximum volume of product p that can be injected into the n-th pipeline of route r after u time periods. If there are n — 1 segments in route r, then index n refers to the volume that can be delivered at the last depot in route r.
maxDepotQtyInjectd	the maximum quantity that can be injected into pipelines leaving depot d in one time period. It is calculated considering the number of pumps available at depot d.
Sometimes, for a given set of production and demands, there may not be a feasible solution. In these cases, it is interesting to identify which productions or demands cannot be satisfied so that the input data can be adjusted.
The objective function considers the minimization of the total transfer cost in the whole network. In reality, different pipelines might have distinct operational costs. Here, we are considering homogeneous costs as these data were not fully available. So, minimizing costs is the same as minimizing the total volume transfered over the same time horizon.
3	A Network Flow Model for the Planning Phase
In a previous work of [11], a classical network flow model for our problem has been studied. This integer programming model, however, proved inefficient in practice. [21] used a linear relaxation from this model in order to get a solution for the tactical planning problem. This relaxed solution proposed flows along each pipeline, at every time instant. With this information, a heuristic was designed to construct operational schedules with feasible pumping movements. But the detailed operational schedules so produced spanned only a few days or a few products . The model we propose overcomes these difficulties and its output can be directly used by the daily scheduler proposed in [3].
But, first, note that the classical network flow model for the problem is not yet suitable because one cannot constrain the flow to follow predefined routes. This could be troublesome, as we could obtain inadequate paths for some movements. An alternative approach is to build the network flow using the predefined routes for each product . This approach is described in the next subsections.
3.1	Network Model Definition
The network model will be built by considering pairs (r, p), where r is a route and p is a product . Each of these pairs represents a commodity. There will be T time periods and the last one will be a special one. It will signal the end of the horizon. Each period spans one day, as demands and productions are given in a daily basis. This will also help to keep the model small, with less variables and with less constraints applying to each time period. Along with the given sets of depots, pipelines, and products an input also must define the values and constants described in Table 1.
Nodes will be created in accordance with the following rules (see also Table 1 for a summary of term definitions):
• Tank Nodes: For each tank tk, each depot d and each time period t, with 0 &amp;lt;t &amp;lt;T, there will be two nodes: (1) node i (or NodeStartTkd,tk,t) with bi = stockd,tk
Table 2: Node description for the Pipeline Network flow Model
Node	What it aggregates
N odeStartT kd,tk,t	production and previous stocks at the start of period t in depot d and tank tk.
N odeEndT kd,tk,t	total of volumes received from the network and volumes that were not distributed at period t in depot d and at tank tk.
NodePInP,d,t	volumes received from the network at the start of period t of a particular product p in depot d.
NodePOutP,d,t	volumes that will be distributed to the network at period t of a particular product p in depot d.
NodeProP,d,t	the production volume productionP,d,t of a product p in depot d at period t.
NodeDemP,d,t	the demanded volume demmandP,d,t of a product p in depot d at period t.
N odePipeStartP,r	the volume of product p inside a pipeline l at the beginning of the horizon and that has to follow route r.
NodePipeEndi	volumes that will be stocked inside pipeline l at the end of the horizon.
NodePiper,i,P,ti,t	volumes of product p that traveled along route r and are currently at pipeline l at period t having departed from route’s r origin at period ti.
if t = 0, or else b = 0 if t &gt; 0, and (2) node j (or NodeEndT kd,tk,t) with bj = 0. The first node represents the tank state at the beginning of period t and the other represents it at the end of that period. All incoming and outgoing flows at tank tk will go through these nodes.
•	In and out nodes: For each product p with tanks at depot d and each time period t, with 0 &amp;lt;t &amp;lt;T, there will be a node i (or NodePInP,d,t) and a node j (or NodePOutP,d,t) with bi = bj = 0. Every incoming and outgoing flow at a depot will pass through these nodes. These are intermediate nodes between tanks and the pipeline network.
•	Demand and Production Nodes: For each product p, each depot d and each period t, with 0 &amp;lt;t &amp;lt;T, there will be: (1) a node i (or NodeDemP,d,t) with bi = —demandP,d,t, and (2) a node j (or NodeProP,d,t) with bj = productionP,d,t.
•	Pipeline Initial Stock Nodes: For each pipeline l and each triple (p,qty,r) in PilelineStarti, there will be a node i (or NodePipeStartP,r) with bi = qty.
•	Pipeline Terminal Stock Nodes: All pipelines must remain completely filled at the end of the planning horizon. So, for each pipeline l there will be a node i (or NodePipeEndi) with bi = vol(l). In this way, the flow at the end of the horizon will sum up to the pipeline volume.
•	Pipeline Route Nodes: Some nodes will be used to model movements of products along the pipelines. An index ti names the period where the movement starts, and an index t will represent the current period. For each pair (r,p) of a route r and a product p, and each pipeline l that is part of route r, there will be a node i (or NodePiper,i,P,ti,t) with bi = 0, for each time period 0 &amp;lt;ti &amp;lt;t &amp;lt;T. In order to handle situations when the volume was already inside the pipeline at the first period, we have nodes with ti = 0.
Table 2 summarizes each node function. The next step is to connect these nodes with arcs. In the following description, the traffic costs are zero and flows must be greater than zero unless stated otherwise.
•	Tank Stock Arcs: For each node NodeEndT kd,tk,t there will be two arcs. The
first arc, NodeStartTkd,tk,t	NodeEndT kd,tk,t, aggregates production and previous
stocks. The second one, NodeEndT kd,tk,t	NodeStartTkd,tk,t+i, represents a stock
transition between time periods. Figure 3 show these arcs as the down arrows that come out of tank nodes.
Figure 3: Nodes and arcs representing pairs of depots d and products p. Items within parenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index.
•	Tank In and Out Arcs: For each pair of nodes NodeStartTkd,tk,t and NodeEndTkd,tk,t
there will be two arcs: NodePInp,d,t	NodeEndTkd,tk,t and NodeStartT kd,tk,t
NodePOutp&gt;d,t. Here, tank tk stores product p. Volumes pass through these arcs before coming from or going to some pipeline. Figure 3 shows them as crossing arcs.
•	Production and Demand Arcs: For each pair of nodes NodeDemp,d,t and NodeProp,d,t,
there will be arcs NodeEndTko,tk,t	NodeDemp,d,t and NodeProp,d,t	NodeStartTko,tk,t,
for all tanks tk that can store product p at depot d. The maximum capacity of these
arcs will be the same as the demand or production volumes of the respective products. Figure 3 shows these arcs as the two left horizontal arrows at the left.
•	Initial Stock Arcs: For each node NodePipeStartr and its associated content
(p,qty,r), there will be an arc NodePipeStartr	NodePiper,i,p,o,o with minimum
and maximum capacities given by qty. Figure 4 illustrates the subnetwork generated to represent a pipeline stock.
•	Outgoing Terminal Arcs: For each node NodePiper,i,p,t,t where l is the first pipeline and d is the starting terminal of route r, there will be an arc NodePOutp,d,t
NodePiper,l,p,t,t. The maximum capacity of this arc is maxTransferrp0,i which measures the maximum quantity of product p that can be injected into pipeline l over a whole day. These arcs are the leftmost ones shown in Figure 5.
•	Intermediary Stock Arcs: For each node NodePipergp,ti,t there will be an arc
NodePiper,l,p,ti,t	NodePiper,l,p,ti,t+1 with capacity given by the pipeline volume
vol(l). These arcs are the vertical ones in Figures 4 and 5.
	(1)	(11)	(11)	
	(P.r) NodePipeStart			
(t=0)	(p,ti=O) V	i		
	NodePipeTp	Pl	j		
(t=l)	A		1	
	A	Pl	j		
(t=2)	A			NodePIn
		Pl	j	Pl	J	—
	V	▼	▼	
Figure 4: Nodes and arcs for the stock of a pipeline with contents (p,qty,r). Items within parenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index.
•	Route Arcs: For each pair of nodes NodePiper,i1tP,ti,t and NodePiper,i2,p,ti,t where l1 and l2 are sequential segments in route r, there will be an arc NodePiper,i1tptti,t
NodePiper,i2pti,t between them. If x is the index of pipeline l2 in route r, the maximum capacity of this arc is calculated as maxTransferr&gt;p&gt;x&gt;t-ti+1. This is the same as the maximum quantity of product p that can be transfered out of pipeline l1 starting at period ti and ending at period t from the beginning of route r. Figures 4 and 5 show these arcs connecting adjacent nodes that are inside rectangles representing pipelines.
•	Incoming Terminal Arcs: For each node NodePiper,ipt,t where l is the last segment and d is the last terminal of route r, there will be an arc NodePiper&gt;i&gt;p&gt;ti&gt;t
NodePInp,d,t- If n — 1 is the index of segment l in route r, the maximum capacity of this arc is calculated as maxTransferr,p,n,t-ti+1- This is the same as the maximum quantity that can be transfered to terminal depot d starting at period ti and ending at period t along route r. These arcs are the rightmost ones in Figure 5.
•	Pipeline Terminal Stock Arcs: For each node NodePipeEndi, with T the last
period, there will be an arc NodePipergp,ti,T-1	NodePipeEndi with maximum
capacity equal to vol(l).
Figure 5: Nodes and arcs representing volumes traveling along routes. For a fixed route r and product p, at every period ti a new subnetwork is created so that the quantity will only be delivered after enough periods have passed. The subnetwork for period t = 3 was omitted to show more of the subnetwork for period t = 2. Items within parenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index.
3.2	A Linear Programming Model
In order to define the constraints and the objective function of the model we need the set of nodes at period t, Nodest, the set of nodes along pipeline l at period t, Nodesij, and the set of all nodes for product p at pipeline l and at period t, Nodesp&gt;i&gt;t. Also, DP, P, and PL will indicate the set of all depots, products, and pipelines respectively.
The following model is not strictly a network flow model. Nevertheless, the problem structure itself retains many features of a Multi-commodity Multi-period Network Flow Model and a path decomposition algorithm will be described [20] later on.
Nodes Mass Balance
E
xij
Xji = bi + Slacki
(1)
j-(i,j)&amp;amp;A	j ■■(j,i)&amp;amp;A
'di E Nodest,	0 &amp;lt;t &amp;lt;T
We consider that the pipeline initial and terminal stock nodes are all in the Nodes0 set. Also, this constraint is not applied to tank nodes in the last period. This is necessary in order to model what will be in stock inside tanks after the end of the horizon. The Slacki,
variable will only be present when one wants to know which stocks cannot be satisfied. In this case, if node i is a production node we define Slacki = -InsatisfiedProductioni,
and for a demand node i we let Slacki = InsatisfiedDemandi.		
Arc Bounds	lij &amp;lt;xij &amp;lt;uij ,	V(ir j) G A	(2)
Pipelines must always remain full		
	xij = vol(l) j :(i,j )€A Vi G Nodesi,t, l G PL, 0 &amp;lt;t &amp;lt;T	(3)
An amount injected at one end equals the
amount delivered at the other end
xij	xji
j: (i,j)€A	j: (j,i)€A
Deliver(R,i,j)	Inject(P,j,i)
Vi G Nodesi,t,	l G PL, 0 &amp;lt;t &amp;lt;T
(4)
xij =	xji
j: (i,j)eA	j: (j,i)&amp;amp;A
Deliver (P,i,j)	Inject(R,j,i)
Vi G Nodesi,t,	l G PL, 0 &amp;lt;t &amp;lt;T
(5)
The functions Inject(e, j, i) and Deliver(e, i,j) tell if arcs (j, i) and (i,j) inject or deliver volumes, respectively, through extremity e in the pipeline represented by node i.
Pipelines Flow Rates
E
Xij &amp;lt;maxQtylnject^pj
j:(i,j)GA
Inject(R,i,j)
(6)
Vi G Nodespgt, P G P, l G PL, 0 &amp;lt;t &amp;lt;T
E
xij
&amp;lt;maxQtyInjectP,p,i
j : (i,j)€A
Inject(P,i,j)
(7)
Vi E Nodesp,l,t, p E P, l E PL, 0 &amp;lt;t&amp;lt;T
52 Xij +
Xj &amp;lt;maxQtyInjectp,l
j: (i,j)€A
Inject(R,i,j)
j:(i,j)&amp;amp;A
Inject(P,i,j)
(8)
Vi E Nodesp,l,t, p E P, l E PL, 0 &amp;lt;t &amp;lt;T
Xj &amp;lt;maxQtyInjectR,l
j:(i,j)^A
Inject(R,i,j)
(9)
Vi E Nodesl,t, l E PL, 0 &amp;lt;t &amp;lt;T
Xj &amp;lt;maxQtylnjectpl
j : (i,j)€A
Inject(P,i,j)
(10)
Vi E Nodeslj, l E PL, 0 &amp;lt;t &amp;lt;T
j:(i,j)&amp;amp;A
Inject(R,i,j)
xij +52 Xj &amp;lt;maxQtyInjectl
j : (i,j)€A
Inject(P,i,j)
(11)
Depot Injection Limit
Vi E Nodesl,t, l E PL, 0 &amp;lt;t &amp;lt;T
x-ij &amp;lt;maxDepotQtyInjectd
(i,j)^ArcsOutDd t
(12)
Vd E DP, 0 &amp;lt;t &amp;lt;T
The set ArcsOutDd,t contains all the arcs that start in NodePOutp,d,t, for all products in depot d and at period t.
E
E
E
E
E
Stock Levels
Xij &gt; stockLevelMindp&gt;
(i,j)^ArcsOutTankEndd,p,t
(13)
Vd e DP, Vp e P, Vt e WE
xij &amp;lt;stockLevelMaxd,p
(i,j)^ArcsOutTankEndd,p,t
(14)
Vd e DP, Vp e P, Vt e WE
The set ArcsOutTankEndd,p,t contains all arcs connecting node NodeEndTkd,tk,t to node NodeStartTkd&gt;tk,t+i, for every tank tk at depot d with product p and at period t. These are the arcs that transmit stocks between periods. The set WE contains the periods where stock levels should be verified. It should be of the form {6,13, 20, 27...}, representing a weekly check.
Objective Function When engineers want to check if a proposed production plan is feasible against the forecasted demands they use the following objective function:
minimize f	InsatisfiedProductioni +
i^NodesPro
E
i^NodesDem
InsatisfiedDemmandi
•&gt;
(15)
where the sets NodesPro and NodesDem contain the all production and demand nodes, respectively. The solution obtained with this objective function can also be used to correct production or demand values. This correction deals with many economical and operational issues that are not discussed here.
After finding a feasible set, the next objective function to be used is the classic one:
minimize
y^ xij
(16)
E
E
(i,j)eA
Together with the constraints, we have a complete model for the planning phase. The next step is to extract the orders using a modified decomposition algorithm.
3.3	Network Flow Decomposition
Figures 3, 4 and 5 show no bidirectional arcs and no paths going back to a previously visited node. So, no cycle can be generated within the network. This observation allows us to use a specialized version of the flow decomposition algorithm [20]. We also introduced some modifications that are specific to our problem, as described in Algorithm 3.
The main purpose of the preferences mentioned in Select and Search is to make it easier to supply a demand by considering the longest time between the moment it is needed and the moment it is available. These heuristics do not affect the result stating that the flow can be fully decomposed into paths.
Let P' the set of paths and let f (P) be the flow associated to a path P GP'. We create the necessary orders that can be input to the operational scheduling solver described in [3] by analyzing the nodes traversed by P. An order O will be represented by the tuple
O = (OriginTank, DestinationTank, Product,
Volume, Route, Deadline).
A path P is built following the inverse order with respect to the network timeline. This way it will always start at a demand node, a tank node or a pipeline stock node at the last period. The deadline is either the demand node period or the last period when the node corresponds to tank or pipeline stocks. A path P should always end at a production node, tank initial node or pipeline initial stock node. Sometimes the path will not contain any pipeline nodes. Such is the case when a demand is satisfied by a production inside the same depot. In these cases, the route will be null. Conversely, the path P can contain nodes present in more than one route. In this case, one must create as many orders as there are pipeline nodes in P, because each order has exactly one route associated to it.
The origin and destination tanks should be the ones connecting to pipeline nodes. If there is no route, the two tank variables will have be the same value. Finally, the volume is given by the flow f (P) associated with the path.
A decomposition of the network can generate a huge number of orders with small volumes. It is interesting, then, to aggregate similar orders. If two orders have the same origin tank, destination tank, product, route, and close deadlines, they can be merged into one order with their volumes summed up. Two deadlines are close if they happen within a range of days. The horizon can be divided in as many ranges as necessary. In our case, it was divided in ten ranges of three days each, generating a set of orders with adequate size.
Algoritmo 3 Pipeline Network Flow Decomposition Algorithm
Entrada: G = (N, A) with arc flow x Saída: P with f (P), VP E P
Notation:
y - flow working copy A(y) = {(i,j) E A\yij &gt; 0} (Arcs with positive flow in y) N(y) = {i\(i, j) E A(y) or (j,i) E A(y)} (Nodes incident to arcs in A(y) G(y) = (N (y),A(y))
S = {i E N(y)\bi &gt; 0} (supply nodes) D = {i E N(y)\bi &amp;lt;0} (demand nodes) s and t are the start and end nodes of path P. A(P) = min{b(s), —b(t), min{yij\(i, j) E P}} (Capacity of path P)
1: procedimento PIPELINEFLOWDECOMPOSITION
2:	y = x, P = 0
3:	enquanto A(y) = 0 faça
4:	s = SELECT(y)
5:	SEARCH(s,y)
6:	se Path P found	entao
7:	P = P\J{P}
8:	f (P ) = f (P ) + A(P)
9:	yij = yij — A(P)V(i,j) E P
10:	b(s) = b(s) — A(P)
11:	b(t) = b(t) — A(P)
12:	fim se
13:	Update	A(y),N(y),S,D
14:	fim enquanto
15: fim procedimento
16: funçao SELECT(y)
17:	Order nodes in S first by the most pressing demands;
secondly, by those tank nodes at the last period, and lastly, by pipeline terminal stock nodes.
18:	retornar the first node in S by the given ordering.
19: fim funçao
20: funcao SEARCH(s,y)
21:	Do a DFS starting with node s until a path P is found in G(y) ending at node
t E D.
22:	Inside the DFS, before choosing the next node, order the candidate nodes
firstly by being of the same tank, if applicable, then by those nodes being in the same time period.
23:	retornar The path P found.
24: fim funçcao
Instance	Rows	Columns	Non-zeros	Model Time (s)	Decomp. Time (s)	Orders
1	23801	51948	266778	22.1	3.3	700
2	22935	49788	256470	19.5	3.2	685
3	22346	48607	248310	18.4	3.5	700
4	22976	50494	257631	17.9	4.1	731
5	23237	50711	260774	20.3	4.5	759
6	24532	54414	281496	23.0	4.0	841
7	23079	50448	258469	20.3	3.4	826
8	24355	53797	278574	28.0	4.2	897
9	24462	53152	273019	22.9	3.7	776
10	25948	57326	295073	26.8	3.9	796
11	25536	56357	290854	26.5	4.0	818
12	21554	46487	236411	17.6	3.9	727
Mean	23730	51960	266988	21.9	3.8	771
Table 3: Execution Results
Instance	1	2	3	4	5	6	7	8	9	10	11	12	Mean
Proportion	0.72	0.69	0.80	0.71	0.81	0.82	0.83	0.76	0.72	0.67	0.69	0.73	0.75 ± 0.05
Table 4: Manual planning vs Real planning - Total Network Flow Proportion
4	Computational Results
Solutions were obtained on a Intel Pentium Core 2 Duo 2.1 GHz CPU platform, with 3MB L2 Cache and 4GB RAM. The program was coded in C++ and compiled using GCC-4.2 without optimization. The network flow model used the CPLEX 10 solver with presolving columns and row elimination. Among the linear programming solving techniques available, the barrier method was selected as it gave the best execution times.
All instances refer to the same network topology, with 19 pipelines, as depicted in Figure 2. The number of tanks vary from 0 to 20 at each depot, with a total of 192 tanks. Also, there are 11 products that circulate through the network.
The model was tested against 12 real instances, spanning a whole year of planning, one instance per month. Some characteristics of these instances cannot be disclosed, as they could expose classified data.
From Table 3 it can be seen that the whole execution takes around 20 seconds. This makes the procedure suitable for testing “what-if” scenarios. The number of orders per
Product	P1	P2	P3	P4	P5	P6	P7	P8	P9	P10	P11	Mean
Proportion	0.91	0.65	1.05	0.73	1.05	0.79	0.92	0.83	0.58	0.15	0.56	0.75 ± 0.26
Table 5: Manual planning vs Real planning - Total Network Flow Proportion by Product
5.	Conclusions and Future Work
104
Pipeline	Dx	D2	D3	D4	D5	D6	D7	Dg	Dg	DXo	
Proportion	0.27	0.85	0.65	0.95	0.91	0.85	1.05	1.00	0.34	0.82	
Pipeline	Dxx	DX2	DX3	DX4	DX5	DX6	DX7	DX8	DX9		Mean
Proportion	0.58	0.64	0.70	0.66	1.04	1.14	0.78	0.18	0.91		0.75 ± 0.27
Table 6: Manual planning vs Real planning - Total Network Flow Proportion by Pipeline month never exceed 900, and so, roughly, it is necessary to schedule 30 orders per day in order to reach the planning goal.
Petrobras also provided data on manually generated plans for each of the instances. In Table 4, the total volume scheduled to be transfered by a real planning is compared against the one proposed by the model. The mean proportion is 0.75, meaning that the model transfers 25% less units of volume each month on the average. This represents a quite significant economy when multiplied by the very large volumes that are moved each month. It must be noted that the model does transfer what is necessary in order to satisfy every demand and keep the stock levels in safe conditions. Thus, these savings in product shipments were not obtained at the expense relaxing some problem constraints.
One reason for the 25% reduction could be related to the choice of products used to push others along pipelines, when really necessary. Sometimes, the products used to push others out of a pipeline are not directly useful for the planning goals. This incurs in wasted pumping moves. Examining Table 5 one can see that the differences in product choices are high. As an example, product PXo has a proportion of only 0.15.
Another important aspect of this issue is the choice of routes. A refinery has many outgoing routes and, so, poor choices of routes along which products will be set to flow along may also lead to wastes. Table 6 shows that pipelines DX, Dg and DX8 are rarely used. Hence, there will be less need to push products out of them.
The objective was to minimize the total volume transported across the network. This means that a product will be moved only to satisfy a constraint. Engineers have the same objective but, having solely on their past experiences to rely upon, and having very limited time to workout a solution, they will accept any solution that keeps wastes below an “acceptable” level. The threshold where the solution is acceptable might be related to the 25% reduction in transported volumes.
5	Conclusions and Future Work
This paper described the oil pipeline planning problem faced by Petrobras, a Brazilian oil company. The operation of its pipeline network involves many constraints related to tanks, volumes, pipeline utilization, stock levels as well as demand and production sched-
ules. There is also a large set of complex operational constraints that must be satisfied by feasible schedules [3]. The objective was to obtain a minimum cost transportation plan for all oil derivatives and ethanol, given that the specified demands and productions are adequate to meet the constraints. Although the real network operation requires a daily pumping schedule, here the problem is solved at the tactical level, where the horizon spans one or more months. See [3] for a scheduler that takes as input the tactical plan constructed by our algorithm and outputs a detailed daily schedule.
In its fullest, the problem can only be solved for a span of a few days. In order to make it more tractable, only the most important characteristics were included in our formal definition of the problem. Engineers validated these characteristics as the ones having the greatest impact over the network daily operation. An important characteristic requires that all pipelines must always remain completely full, and tanks should keep the local stock within their capacities. Transfers had to observe permitted pipeline flow rates, which can vary by pipeline, by product and by flow direction. Productions and demands were satisfied on a daily basis. Stock levels were verified weekly. Another important constraint was that volumes should follow along predefined routes that depend on product type.
A model to solve this problem was proposed using network flow ideas. Nodes were defined so as to model the state of each depot. Pipelines were modeled by classifying the nodes that represent each route that a product can travel. The model could also be used to test if the proposed demand and production schedules were feasible or, else, to give a minimum cost transportation plan for feasible movements.
Test results showed that the model can adequately deal with the Petrobras network topology and with monthly scenarios, within small computational times. Also, the solutions generated were compared to the ones proposed by the company expert engineers. It was found that the model almost always gave a 25% cost reduction. Tentative interpretations for this gain were listed.
Although the model already included most of constraints the engineers consider when managing the tactical planning problem, more constraints could be considered. One of them could be to model what happens when two products that cannot make contact are to be injected in a pipeline. In this case, a third product must be used to separate them. Also, since sometimes pipeline and tank maintenance periods are known beforehand, such constraints could be incorporated into the model. The algorithms presented here were developed together with the work described in [3]. Finally, the tactical plan it outputs could be used as input to the daily scheduler discussed in that same work.
Acknowledgments This research was supported by grants 05/57343-0 and 05/573447 from FAPESP and grants 301732/07-8, 478470/06-1, 472504/07-0, and 473726/07-6,
305781/2005-7 from CNPq. The authors are also grateful to Fernando Marcellino and the team of engineers from PETROBRAS-Tl/SP.
References
[1]	Dempster,	Pedron, N.H., Medova, E.A., Scott, J.E., Sembos, A.: Planning
logistics operations in the oil industry. The Journal of the Operational Research Society 51(11) (2000) 1271 - 1288
[2]	Milidíu, R., dos Santos Liporace, F., de Lucena, C.J.P.: Pipesworld: Planning pipeline transportation of petroleum derivatives. In: Proceedings of ICAPS’03 -Workshop on the Competition: Impact, Organization, Evaluation, Benchmarks, Trento, Italy (2003)
[3]	Lopes, T.M., Cirí, A.A., Souza, C.C., Moura, A.V.: Special issue on the 14thinterna-tional conference on principles and practice of constraint programming. Constraints 15(2) (2010)
[4]	Herran, A., de la Cruz, J., de Andres, B.: A mathematical model for planning transportation of multiple petroleum products in a multi-pipeline system. Computers &amp;amp; Chemical Engineering 34(3) (2010) 401 - 413
[5]	Moura, A.V., Pereira, R.A., de Souza, C.C.: Scheduling activities at oil wells with resource displacement. International Transactions in Operational Research 15(6) (2008) 659-683
[6]	Maravelias, C.T., Sung, C.: Integration of production planning and scheduling: Overview, challenges and opportunities. Computers &amp;amp; Chemical Engineering 33(12) (2009) 1919 - 1930 FOCAPO 2008 - Selected Papers from the Fifth International Conference on Foundations of Computer-Aided Process Operations.
[7]	Alves, V., Filho, V.J.: Pipeline scheduling of petroleum derivatives using genetic algorithm. In: IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petróleo e Gós, Campinas, Brazil (2007)
[8]	Cafaro, D.C., Cerdó, J.: Optimal scheduling of multiproduct pipeline systems using a non-discrete MILP formulation. Computers &amp;amp; Chemical Engineering 28(10) (2004) 2053-2058
[9]	Rejowski, R., Pinto, J.M.: A novel continuous time representation for the scheduling of pipeline systems with pumping yield rate constraints. Computers &amp;amp; Chemical Engineering 32 (2008) 1042-1066
[10]	Filho, E.M.S., Filho, V.J., de Lima, L.S.: Variable neighborhood search (VNS) applied to pipeline distribution problem with capacity constraints. In: IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petróoleo e Góas, Campinas, Brazil (2007)
[11]	Camponogara, E., Souza, P.S.: A-Teams for oil transportation problem through pipelines. In: Information Systems Analysis and Synthesis, Orlando, United States (1996)
[12]	Camponogara, E.: A-Teams para um problema de transporte de derivados de petroleo. Master’s thesis, Instituto de Matematica, Estatística e Ciência da Com-putaçao, Universidade Estadual de Campinas, Campinas, Brazil (1995)
[13]	de la Cruz, J., Andrés-Toro, B., Herrán-González, A., Porta, E.B., Blanco, P.F.: Multiobjective optimization of the transport in oil pipelines networks. In: Proceedings of the IEEE Conference on Emerging Technologies and Factory Automation. Volume 1. (2003) 566-573
[14]	de la Cruz, J., Herran-Gonzalez, A., Risco-Martín, J., Andrés-Toro, B.: Hybrid heuristic and mathematical programming in oil pipelines networks: Use of immigrants. Journal of Zhejiang University SCIENCE 6A(1) (2005) 9-19
[15]	Magatão, L., Arruda, L., Neves, F.: A mixed integer programming approach for scheduling commodities in a pipeline. Computers &amp;amp; Chemical Engineering 28(1) (2004) 171-185
[16]	Magatãao, L., Arruda, L., Neves, F.: Using CLP and MILP for scheduling commodities in a pipeline. Computer-Aided Chemical Engineering 20B (2005) 1027-1032
[17]	Relvas, S., Barbosa-Pávoa, A.P.F.D., Matos, H.A., Fialho, J., Pinheiro, A.S.: Pipeline scheduling and distribution centre management - a real-world scenario at CLC. In: Proceedings of the 16th European Symposium on Computer Aided Process Engineering and 9th International Symposium on Process Systems Engineering, Garmisch-Partenkirchen, Germany (2006) 2135-2140
[18]	Relvas, S., Matos, H.A., Barbosa-Páovoa, A.P.F.D., Fialho, J., Pinheiro, A.S.: Pipeline scheduling and inventory management of a multiproduct distribution oil system. Industrial &amp;amp; Engineering Chemistry Research 45(23) (2006) 7841-7855
[19]	Relvas, S., Matos, H.A., Barbosa-Pávoa, A.P.F.D., Fialho, J.: Reactive scheduling framework for a multiproduct pipeline with inventory management. Industrial &amp;amp; Engineering Chemistry Research 46(17) (2007) 5659-5672
[20]	Ahuja, R.K., Magnanti, T.L., Orlin, J.B.: Network flows : theory, algorithms, and applications / Ravindra K. Ahuja, Thomas L. Magnanti, James B. Orlin. Prentice Hall, Englewood Cliffs, N.J. : (1993)
[21]	Braconi, V.M.: Heurísticas multifluxo para roteamento de produtos em redes du-toviárias. Master’s thesis, Departamento de Informática, PUC-Rio, Rio de Janeiro, RJ, Brasil (2002)
Epílogo
A definição formal do problema de planejamento é a mesma do PPAORO, removendo-se um subconjunto de restriçães. Nos tanques, C3, C4 e C5 foram desconsideradas pois a simultaneidade de operaçães ou a sequencia delas não é importante quando não se detalha um dia. As restrições C7, C8, C9 e C10 foram consideradas pelos operadores no calculo das quantidades méximas que um orgao pode enviar de cada produto e durante um peréodo. No dutos, C13, mesmo nãao sendo considerada, nãao foi violada em nenhuma solucçãao devido a agregaçcaão de planos de entrega. A restricçãao C15 foi desconsiderada pela falta de dados, mas tambéem poderia entrar nos calculos de quantidade de envio méaxima por período. Ja as restricães de incompatibilidade para o sequenciamento nos dutos C14 naão foram consideradas, pois naão sãao importantes e grande parte das incompatibilidades sãao prée-resolvidas na criaçcãao do conjunto de produtos e selecaão das rotas permitidas.
O modelo de fluxo em redes para o problema de planejamento é construído sobre os tanques e, principalmente, sobre os pares de produtos e rotas pré-definidos. Essa escolha permite uma modelagem compacta, onde nãao seraão criados movimentos desnecesséarios ou improvéaveis. A rede criada separa os noés em camadas, representando a evoluçcãao do tempo. Em cada peréodo, sãao criados os noés que representam a movimentaçcãao nos tanques, o atendimento de demandas, o escoamento das produçcãoes e as entradas e saédas de uma base. O traéfego de volumes pela rede possui uma representacçaão especial, pois para implementar uma simulacçaão do transporte de um volume por uma rota ée necessaério saber em qual período ele foi enviado. Isso faz com que a cada novo período, seja necessária uma rede a mais, do que no peréodo anterior, para representar o tréafego por rotas.
A estrutura de rede criada ée livre de ciclos, o que permite a simplificaçcaão do algoritmo de decomposiçcaão de fluxo em redes. Esse algoritmo extrai a partir do fluxo obtido, os planos de entrega que servirão de entrada para a fase de agendamento. Um pés-processamento sobre esse conjunto de planos foi realizado para reduzir o seu tamanho. A agregaçcaão de planos ée uétil para facilitar o agendamento e atender requisitos de tamanho ménimo de bateladas.
Uma outra motivaçcaão do artigo ée a utilizaçcãao do modelo para o planejamento taético da movimentaçcãao nos oleodutos . A escolha de um modelo de fluxo em redes, e que fosse possével implementar atravées de uma programaçcãao linear, foi feita principalmente para manter o tempo de execuçcaão controlaével. Os testes demonstraram que para a rede apresentada pela Petrobras é possével obter soluçães em poucos minutos para horizontes de um mes. Isso permite a execuçao de cenérios condicionais para, por exemplo, verificar se é possével atender as demandas com uma nova proposta de produção das refinarias.
Os resultados, quando comparados a solucçãoes manuais do planejamento téatico, mostraram custos 25% menores para o atendimento dos mesmos néveis de estoque. Isso demonstra que
a ferramenta desenvolvida pode ser útil, mesmo sem a execução da fase de agendamento. Trabalhos futuros incluem a integração dessa nova modelagem para o planejamento com o modelo de programação por restricães do agendamento. Como foi visto no capítulo 6, o conjunto de planos gerado pela abordagem heurística tem em torno de 900 planos de entrega para 10 dias de horizonte, enquanto na abordagem de fluxo em redes o mesmo número de planos é suficiente para 30 dias. Além disso, ao verificar a validade do estado da rede diariamente, entende-se que o conjunto de novos planos, gerados em novas ativaçcoães do algoritmo, seréa mais facilmente sequenciado e escalonado.
Capítulo 8
Conclusões
Esta dissertaçao trata o problema de distribuiçao de derivados de petróleo e álcoois em redes de duto. Tambem denominado PPAORO, o problema á atualmente enfrentado pela Petrobras.
O objetivo e definir movimentos de transporte de produtos entre árgaos, de tal forma que as campanhas de produção e os mercados locais, representados por valores estimados de demandas, sejam totalmente satisfeitos. Para tanto, um amplo conjunto de restrições operacionais sobre as movimentacçãoes em dutos e tanques deve ser respeitado , envolvendo sequenciamentos validos de produtos, capacidade de tanques e limites de envio simultaneo.
Ate então, modelos para o PPAORO pressupunham fortes relaxacoes de seus principais requisitos, ou lidavam apenas com topologias de rede restritas, sendo assim, tratáaveis eficientemente com táecnicas de otimizacçãao cláassicas. Por outro lado, tais relaxaçcãoes deram origem a soluçcoães pouco aplicaáveis para os cenáarios reais, pois descartavam restricçãoes fortes para os operadores de duto, tais como interface de produtos e nãao-simultaneidade de operaçcãoes em tanques.
O trabalho aqui desenvolvido propãoe formulaçcãoes capazes de representar a maior parte das restriçcãoes fundamentais do PPAORO, com potencial para serem utilizadas em instancias de tamanho real. Para tal, a modelagem é dividida em duas fases, planejamento e agendamento.
Uma formulação em Programação por Restrições para a fase de agendamento do PPAORO foi desenvolvida. Tal tecnica foi utilizada devido à sua flexibilidade em modelar problemas de agendamento e por conta dos fortes mecanismos de propagaçcãao existentes, os quais permitem encontrar soluçães factíveis rapidamente.
Os primeiros resultados utilizaram uma versãao heurástica da fase de planejamento, resultando na publicaçao de um artigo científico no periádico internacional Constraints [27], um dos mais importantes da área de programação por restriçães.
Em seguida, como uma evoluçcaão do tratamento da fase de planejamento, um artigo foi
submetido ao periódico internacional Computers &amp;amp; Chemical Engineering apresentando uma modelagem usando fluxo em redes. O artigo formaliza o problema de planejamento e propõe um modelo linear. Tal modelo foi capaz de gerar as entradas para a fase de agendamento, bem como soluções para o problema tótico de planejamento como descrito no artigo.
Como trabalhos futuros, um primeiro passo poderia ser a integracõo dessa nova abordagem do planejamento com a fase de agendamento. Após isso, poder-se-ia acrescentar novas restricçoões a ambos os modelos, bem como realizar testes em diferentes topologias da propria Petrobras.
Referências Bibliográficas
[1]	Ravindra K. Ahuja, Thomas L. Magnanti, e James B. Orlin. Network flows : theory, algorithms, and applications / Ravindra K. Ahuja, Thomas L. Magnanti, James B. Orlin. Prentice Hall, Englewood Cliffs, N.J. :, 1993.
[2]	Vanessa Alves e Virgílio J.M.F. Filho. Pipeline scheduling of petroleum derivatives using genetic algorithm. IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petróleo e Gas, Campinas, Brazil, 2007.
[3]	Vanessa Renná Frota Moraes Alves. Programação de transferência de derivados de petráleo em rede dutoviaria usando algoritmo genático. Dissertação de Mestrado, COPPE - Universidade Federal do Rio de Janeiro, Rio de Janeiro, RJ, Brasil, 2007.
[4]	R. Barták. Constraint programming: In pursuit of the holy grail. Week of Doctoral Students (WDS99), Part IV, MatFyzPress, Prague, páginas 555-564, June de 1999.
[5]	M.S. Bazaraa, J.J. Jarvis, e H.D. Sherali. Linear Programming and Network Flows. John Wiley and Sons, 1990.
[6]	Viviane Monteiro Braconi. Heurásticas multifluxo para roteamento de produtos em redes dutoviáarias. Dissertaçcaão de Mestrado, Departamento de Informaática, PUC-Rio, Rio de Janeiro, RJ, Brasil, 2002.
[7]	Diego C. Cafaro e Jaime Cerdaá. Optimal scheduling of multiproduct pipeline systems using a non-discrete MILP formulation. Computers &amp;amp; Chemical Engineering, 28(10):2053-2058, 2004.
[8]	E. Camponogara e P. S. Souza. A-Teams for oil transportation problem through pipelines. Information Systems Analysis and Synthesis, Orlando, United States, 1996.
[9]	Eduardo Camponogara. A-Teams para um problema de transporte de derivados de petráoleo. Dissertacçãao de Mestrado, Instituto de Matemáatica, Estatástica e Ciêencia da Computacão, Universidade Estadual de Campinas, Campinas, Brazil, 1995.
[10]	André Augusto Ciré. Modelos computacionais para o escalonamento de tarefas em redes de dutos. Dissertação de Mestrado, Instituto de Computação, Universidade Estadual de Campinas, Campinas, SP, Brasil, 2008.
[11]	5th International Planning Competition. http://zeus.ing.unibs.it/ipc-5/.
[12]	Thomas H. Cormen, Charles E. Leiserson, e Ronald L. Rivest. Introduction to Algorithms. MIT Press, 2 ediçao, 2001.
[13]	D. Scott Crane, Roger L. Wainwright, e Dale A. Schoenefeld. Scheduling of multiproduct fungible liquid pipelines using genetic algorithms. Proceedings of the 1999 ACM Symposium on Applied Computing, paginas 280-285, San Antonio, USA, 1999.
[14]	G. B. Dantzig. Linear Programming and Extensions. Princeton University Press, 1963.
[15]	J.M. de la Cruz, B. Andrés-Toro, A. Herrén-Gonzélez, E. Besada Porta, e P. Fernandez Blanco. Multiobjective optimization of the transport in oil pipelines networks. Proceedings of the IEEE Conference on Emerging Technologies and Factory Automation, volume 1, páginas 566-573, 2003.
[16]	J.M. de la Cruz, A. Herran-González, J.L. Risco-Martin, e B. Andrés-Toro. Hybrid heuristic and mathematical programming in oil pipelines networks: Use of immigrants. Journal of Zhejiang University SCIENCE, 6A(1):9-19, 2005.
[17]	Erito Marques de Souza Filho, Vanessa Renno Frota Moraes, e Virgilio José Martins Ferreira Filho. Utilizaçcãao de téecnicas de pesquisa operacional em problemas de distribuiçao dutoviéria: Uma revisão. XXXVIII Simpósio Brasileiro de Pesquisa Operacional, péginas 1873-1880, Goiania, Brazil, 2006.
[18]	R. Dechter e D. Frost. Backtracking algorithms for constraint satisfaction problems; a survey. Relatério técnico, University of California at Irvine, 1999.
[19]	Frederico dos Santos Liporace. Planejadores para transporte em polidutos. Tese de Doutorado, Departamento de Informéatica, PUC-Rio, Rio de Janeiro, RJ, Brasil, 2005.
[20]	Erito M. Souza Filho, Virgílio J.M.F. Filho, e Leonardo S. de Lima. Variable neighborhood search (VNS) applied to pipeline distribution problem with capacity constraints. IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petróleo e Gas, Campinas, Brazil, 2007.
[21]	I. Gent e B. Smith. Symmetry breaking during search in constraint programming. Proceedings of ECAI'2000, páginas 599-603, 2000.
[22]	D. E. Goldberg. Genetic Algorithms in Search, Optimization and Machine Learning. Addison-Wesley, 1989.
[23]	A. Herran, J.M. de la Cruz, e B. de Andres. A mathematical model for planning transportation of multiple petroleum products in a multi-pipeline system. Computers &amp;amp; Chemical Engineering, 34(3):401 - 413, 2010.
[24]	John N. Hooker. Integrated Methods for Optimization (International Series in Operations Research &amp;amp; Management Science). Springer-Verlag, Secaucus, USA, 2006.
[25]	ILOG. ILOG Scheduler 6.2: User's Manual. ILOG, 2006.
[26]	R. Rejowski Jr. e Josá M. Pinto. An MILP formulation for the scheduling of multiproduct pipeline systems. Brazilian Journal of Chemical Engineering, 19(4):467-474,
2002.
[27]	Tony M. Lopes, Andre A. Cirá, Cid C. Souza, e Arnaldo V. Moura. Special issue on the 14th international conference on principles and practice of constraint programming. Constraints, 15(2), 2010.
[28]	M. M. Sasikumar, P. R. Prakash, S. M. Patil, e S. Ramani. Pipes: A heuristic search model for pipeline schedule generation. Knowledge-Based Systems, 10(3):169-175, 1997.
[29]	L. Magatao, L.V.R. Arruda, e F. Neves. A mixed integer programming approach for scheduling commodities in a pipeline. Computers &amp;amp; Chemical Engineering, 28(1):171-185, 2004.
[30]	L. Magataao, L.V.R. Arruda, e F. Neves. Using CLP and MILP for scheduling commodities in a pipeline. Computer-Aided Chemical Engineering, 20B:1027-1032, 2005.
[31]	K. Marriot e P.J. Stuckey. Programming with Constraints: An Introduction. MIT Press, Cambridge, Massachusetts, 1“ edicao, 1998.
[32]	Rodrigo Máas e Josáe M. Pinto. A mixed-integer optimization strategy for oil supply in distribution complexes. Optimization and Engineering, 4(1):23-64, 2003.
[33]	R.L. Milidíu e Frederico dos Santos Liporace. Planning of pipeline oil transportation with interface restrictions is a difficult problem. Relatorio Tácnico 56, Departamento de Informaática, PUC-Rio, Rio de Janeiro, RJ, Brasil, 2003.
[34]	R.L. Milidíu, Frederico dos Santos Liporace, e Carlos José P. de Lucena. Pipesworld: Planning pipeline transportation of petroleum derivatives. Proceedings of ICAPS'03
-	Workshop on the Competition: Impact, Organization, Evaluation, Benchmarks, Trento, Italy, 2003.
[35]	R.L. Milidéu, A.A. Pessoa, V. Braconi, E.S. Laber, e Rey P.A. Um algoritmo GRASP para o problema de transporte de derivados de petréleo em oleodutos. Proceedings of the XXXIII Brazilan Symposium on Operations Research, péginas 237-246, 2001.
[36]	S.A. MirHassani e M. Ghorbanalizadeh. The multi-product pipeline scheduling system. Computers &amp;amp; Mathematics with Applications, 56(4):891 - 897, 2008.
[37]	A.V. Moura, C.C. de Souza, A.A. Cire, e T.M.T. Lopes. Heuristics and constraint programming hybridizations for a real pipeline planning and scheduling problem. Proceedings of the 11th IEEE International Conference on Computational Science and Engineering - CSE'08, péginas 455-462, Julho de 2008.
[38]	A.V. Moura, C.C. de Souza, A.A. Cire, e T.M.T. Lopes. Planning and scheduling the operation of a very large oil pipeline network. Lecture Notes in Computer Science
-	Proceedings of the 1fth International Conference on Principles and Practice of Constraint Programming, volume 5202, péginas 36-51, Setembro de 2008.
[39]	G. Ottonsson. Integration of Constraint Programming and Integer Programming for Combinatorial Optimization. Tese de Doutorado, Uppsala University, Information Technology, Computing Sceince Department, 200. Uppsala, 2000.
[40]	C.H. Papadimitriou e K. Steiglitz. Combinatorial Optimization: Algorithms and Complexity. Dover Publications, 1998.
[41]	Gilles Pesant e Michel Gendreau. A view of local search in constraint programming. Principles and Practice of Constraint Programming, péginas 353-366, 1996. Disponével em citeseer.ist.psu.edu/pesant96view.html.
[42]	PETROBRAS. Relatéorio anual de atividades, 2004.
[43]	PETROBRAS. RIMA - Relatéorio de Impacto Ambiental, Plano Diretor de Dutos de São Paulo PDD/SP, Setembro, 2007.
[44]	R. Rejowski e Jose M. Pinto. Efficient MILP formulations and valid cuts for multiproduct pipeline scheduling. Computers &amp;amp; Chemical Engineering, 28(8):1511-1528,
2004.
[45]	R. Rejowski e José M. Pinto. A novel continuous time representation for the scheduling of pipeline systems with pumping yield rate constraints. Computers &amp;amp; Chemical Engineering, 32:1042-1066, 2008.
[46]	Susana Relvas, Ana Paula F. D. Barbosa-Pévoa, Henrique A. Matos, João Fialho, e Antonio S. Pinheiro. Pipeline scheduling and distribution centre management - a real-world scenario at CLC. Proceedings of the 16th European Symposium on Computer Aided Process Engineering and 9th International Symposium on Process Systems Engineering, péginas 2135-2140, Garmisch-Partenkirchen, Germany, 2006.
[47]	Susana Relvas, Henrique A. Matos, Ana Paula F. D. Barbosa-Povoa, e João Fialho. Reactive scheduling framework for a multiproduct pipeline with inventory management. Industrial &amp;amp; Engineering Chemistry Research, 46(17):5659-5672, 2007.
[48]	Susana Relvas, Henrique A. Matos, Ana Paula F. D. Barbosa-Péovoa, Joaão Fialho, e Antéonio S. Pinheiro. Pipeline scheduling and inventory management of a multiproduct distribution oil system. Industrial &amp;amp; Engineering Chemistry Research, 45(23):7841-7855, 2006.
[49]	M.G.C. Resende e C.C. Ribeiro. Greedy randomized adaptive search procedures. F. Glover e G. Kochenberger, editors, Handbook of Metaheuristics, péginas 219-249. Kluwer Academic Publishers, 2002.
[50]	Alvaro García Sanchez e Miguel Ortega Mier. Programacién de oleoductos: pre-sentacién del problema y revisién de enfoques. Anales del IX Congreso de Ingeniería de Organización (CIO 2005), 2005.
[51]	R.A. Wilson. Transportation in america, eighteenth edition. Washington, D.C.: Eno Transportation Foundation, Inc., 2001.
[52]	L. A. Wolsey. Integer Programming. Wiley-Interscience, 1998.</field>
	</doc>
</add>