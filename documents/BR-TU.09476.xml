<?xml version="1.0" encoding="utf-8"?>
<add>
	<doc>
		<field name="docid">BR-TU.09476</field>
		<field name="filename">14461_Cruz_JoselitoMenezesda_M.pdf</field>
		<field name="filetype">PDF</field>
		<field name="text">UNIVERSIDADE ESTADUAL DE CAMPINAS EACULDADE DE ENGENHARIA MECÂNICA DEPARTAMENTO DE PROJETO MECÂNICO
Projeto e Desenvolvimento de um Sistema de Geração Automática de Trajetória para Manipuladores
Autor: Joselito Menezes da Cruz
Orientador: Prof. Dr. João Mauricio Rosario
.1.0/93
ÉSTE EXEMPLAR CORRESPONDE A REDAÇÃO FINAL DA
TESE DEFENDIDA POR	.
..	............E APROVADA PELA
COMISSÃO JUÓGADüRA EM G K / É! /G i .
UNIVERSIDADE ESTADUAL DE CAMPINAS FACULDADE DE ENGENHARIA MECÂNICA DEPARTAMENTO DE PROJETO MECÂNICO
Projeto e Desenvolvimento de urn Sistema de Geração Automática de Trajetória para Manipuladores
Autor: Joselito Menezes da Cruz
Orientador: Prof. Dr. João Maurício Rosário
Curso: Engenharia Mecânica
Área de Concentração: Projeto Mecânico
Dissertação de mestrado apresentada à comissão de Pós Graduação da. Faculdade de Engenharia Mecânica como requisito para a obtenção do titulo de Mestre em Engenharia Mecânica.
Campinas, 1993
S.P. - Brasil
FICHA CATALOGRÁFICA ELABORADA PELA BIBLIOTECA DA ÁREA DE ENGENHARIA - BAE - UNICAMP
C889p
Cruz, Joselito Menezes da
Projeto e desenvolvimento de um sistema de geração automática de trajetória para manipuladores / Joselito Menezes da Cruz.—Campinas, SP: [s,n.j, 1993.
Orientador: João Maurício Rosário.
Dissertação (mestrado) - Universidade Estadual de Campinas, Faculdade de Engenharia Mecânica.
1,	Robótica. 2. Automação. 3. Interface de usuário (Sistema de computador). 4. Plataforma continental. I. Rosário, João Maurício. II. Universidade Estadual de Campinas. Faculdade de Engenharia Mecânica. Hl Título.
UNIVERSIDADE ESTADUAL DE CAMPINAS FACULDADE DE ENGENHARIA MECÂNICA DEPARTAMENTO DE PROJETO MECÂNICO
Tese de Mestrado
Projeto e Desenvolvimento de um Sistema de Geração Automática de Trajetória para Manipuladores
Autor: Joselito Menezes da Cruz
Orientador: Prof. Dr, João Maurício Rosário
Aprovado por:
Campinas-SP, 08 de outubro de 1993
AGRADECIMENTOS
-	Ao amigo e professor João Maurício Rosário, pedo incentivo e acorrq&gt;a.nhamento durante iodas as etapas do trabalho.
-	Ao amigo Josemar Ta vares pelo constante estímulo e interesse demonstrados durante o trabalho.
-	A.o amigo Luiz .Antônio, pelo companheirismo e pelas discussões elucidativas,
-	Aos amigos Fançony e Coelho pelo apoio e sugestões.
-	Ao colegas da. república: Rogério, Fábio, Oswaldo, Rober. Michael e Fred pela convivência quase sempre tranquila.
-	A Coordenação de Aperfeiçoamento de Pessoa] de Ensino Superior (CAPES), pelo apoio financeiro para, a realização deste trabalho.
-	Aos técnicos do Laboratório de Projeto mecânico (DPM-FEM)e do Centro de Tecnologia (CT-UNICAMP) pelos serviços prestados na realização da parte experimental.
-	Ao DPM, pela estrutura, cedida, para o desenvolvimento deste trabalho.
-	Ao CE-NPES-PETROBRÁS pela oportunidade e apoio para areal ização deste trabalho de pesquisa.
-	A todos que, direta, ou indiretamente, contribuíram para a. conclusão deste trabalho.
/lo.s meus pais pelo amor e carinho que sempre me dedicaram, e pela formação moral que me deram.
A os meus irmãos pelo companheirismo e espírito incentivado?.
RESUMO
0 objetivo principal deste trabalho é o desenvolvimento de um cisterna, de geração automática de trajetória: para manipuladores, coin o intuito de viabilizai1 a automatização de tarefas submarinas. A motivação para. sua. realização se de ve a um programa de cooperação científica envolvendo a Uní-versida.de Estadual de Campinas, a. Petrobrás c o Instituto de Pesquisas Tecnológicas de Geesthacht (GKSS) da. Alemanha, no qual se pretende utilizar dispositivos robóticos para auxiliar na prospecçao de petróleo em plataformas marítimas.
0 desenvolvimento de uní ambiente submarino automatizado utilizando robôs pressupõe a existencia de um sistema capaz de controlai’ e monitorar as tarefas a serem realizadas. 0 sistema proposto por este trabalho visa suprir a um telemanipulador as necessidade de controle inerentes a ambientes hostis, pois conta com diversas facilidades tais como módulos de programação de tarefas on-line e off-line, possibilidade de visualização cartesiana ern tempo-real e animação gráfica.
Inicialmente são introduzidos conceitos sobre robôs e manipuladores e a formulação matemática para trabalhar com eles, em seguida é apresentada a estrutura do sistema e a estratégia utilizada para, resolver o problema, proposto. 0 sistema foi implementado em um microcomputador compatível com a. linha: IBM-PC-AT
ABSTRACT
The main objective of this work is the development of an automatic trajectory generation system with the intention of to turn viable the automation of underwater tasks. The motivation to its execution is due to a scientific- cooperation program between State University of Campinas (UNICAMP), Petrobras and Geesthacht Institute of Technology (GKSS) from Germany, in which one intends to use robotics devices to assist in exploy-tation of oil on off-shore platforms.
The development of an automatic underwater environment using robots presupposes the exixtence of a system able to control and monitoring the tasks to be carried out. The proposed system by this work aims to supply a telemanipulator the control needs inherents to hostile environments, since it has a number of facilities such as modes of on-line and off-line task programming, possibility of cartesian real time visualization and graphic animation.
Firstly, the concepts of robotics and the mathematical formulation to handle with it are introduced, next, the structure of the system and the strategy used to solve the problem is presented. The system was implemented in a microcomputer compatible with the standard IBM-PC.
Prólogo
A utilização de robôs industriais adaptados para, a realização de tarefas sub-marinas automatizadas tem sido feita para, possibilitar reparas, inspeções e manobras e.m águas intermediárias e profundas, nas quais seria, altamente oneroso e perigoso o envio de um homern para, a execução do trabadlo.
Com esse objetivo, iniciou-se um projeto de cooperação envolvendo a Petrobrás, o Instituto de Pesquisas Tecnológicas de Geesthacht (GKSS) da. Alemanha e a Universidade de Campinas, Unicamp, visando o desenvolvimento de uma célula, automatizada de operações que permitisse a geração automática, de tarefas a partir do conhecimento do ambiente de atuação, utilizando fundamentalmente robôs e telernanipuladores.
Dentro desse programa de cooperação, o GKSS cedeu o robô Manutec r3 e a Petrobrás, o manipulador submarino Kraft, para que fosse desenvolvida na Unicamp toda a infra-estrutura de apoio, a. nível de construção mecânica., software e hardware, necessária, para, o desenvolvimento do projeto. Estes robôs tiveram que sofrer algumas alterações em relação às suas configurações originais para que se adaptassem ao tipo de tarefa às quais seriam submetidos.
Algumas das etapas básicas do projeto foram:
•	Construção Mecânica (Base móvel, Maquetes para testes, ferramentas dedicadas);
•	Desenvol vimento de um software de programação off-tine do sistema robótico;
*	Desenvolvimento de uma interface Homem-Máquina amigável com o manipulador Kraft;
A interface Homem-Máquina seria uma plataforma pa.ra se atingir dois outros objetivos maiores:
9	Desenvol vimento de um si stema d e Ident i íí cação de p ar â.m et ros e rn ed i d a d e a.cu r áci a;
*	O desenvolvimento de uma linguagem de programação textual para o manipulador;
*	0 desenvolvimento de um sistema de geração automática.- de trajetória,
Este trabalho descreve o desenvolvimento da iriteriace de comunicação com o .manipulador, e o procedimento utilizado para. a. geração automática, de trajetórias, Com esta finalidade, o trabalho é subdividido em quatro capítulos, conforme descritos a seguir:
0 capítulo 1 faz uma introdução aos objetivos do programa de cooper tição Umcamp/Petrobrás/GKSS e apresenta, os sistemas robóticos disponíveis para o desenvolvimento do projeto, bem como a estrutura, mecânica construída, de forma, a dar suporte a esses dispositivos.
O capítulo 2 descreve o sistema Kraft e apresenta de forma suscinta o desenvolvimento da interface de comunicação entre o manipulador e um microcomputador, assim como o software de controle para esta interface.
No capítulo 3 faz-se o desenvolvimento da modelagem geométrica do robô Ma-nutec e do manipulador Kraft e é discutido alguns métodos numéricos para a. solução do problema, da modelagem cinemática de robôs.
0 capítulo 4 trata diretamente do problema de geração de trajetórias, abordando principalinente os métodos de geração no espaço de juntas e no espaço cartesiano.
0 sistema proposto no trabalho é validado através de sua implementação no manipulador Kraft e dos testes realizados no Centro de Pesquisas da Petrobrás (CENPES). 0 capítulo 5 descreve a. metodologia utilizada para a execução desses testes e para a validação do sistema.
Finalmente, são apresentados os comentários finais, as perspectivas e as conclusões do trabalho.
Conteúdo
1	Posicionamento do Problema	16
1.1	Introdução........................................................ J6
1.2	Utilização de Ilobôs e Manipuladores	em Ambiente Submarino........ 17
1.3	Descrição dos Dispositivos Robóticos	Utilizados..................  18
1.4	Estrutura Mecânica Construída..................................... 24
1.4.1	Base Móvel .............................................   24
1.5	Programação Off-line.............................................  25
1.6	Conclusões .................................................       28
2	Interface Homem-Máquina	29
2.1	Introdução......................................................   29
2.2	Interface com o Robô Manutec R3................................... 30
2.3	Interface com o Manipulador KRAFT................................. 30
2.4	O Hardware ....................................................... 36
2.5	O Software.......................................................  39
2.6	Conclusões ......................................................  42
3	Modelagem do Manipulador Kraft e do Robô Manutec r3
43
3.1	Introdução..........................................................   43
3.2	Posicionam en to do Problema......................................... 4.4
3.3	Modelo Geométrico..................................................... 44
3.3.1	Transformação Homogênea........................................ 46
3.3.2	Descrição da Matriz de Orientação Através de Angulos............47
3.3.2.1	Ângulos de Euler...................................... 48
3.3.2.2	Ângulos Roll, Pitcli, Yaw ............................ 50
3.3.3	Parâmetros de Denavit-Hartenberg (D.II.)....................... 52
3.4	'Modelo Geométrico do Manutec	r3....................................  54
3.5	Modelo Geométrico do Kraft ........................................... 56
3.6	Problema Inverso...................................................... 57
3.6.1	Modelagem Cinemática Inversa..................................  59
3.7	Conclusões...........................................................  62
4	Geração de Trajetórias	63
4.1	Introdução............................................................ 63
4.2	Controle de Trajetória................................................ 64
4.3	Trajetória, no Espaço de Juntas....................................... 65
4.3.1	Lei de Movimento............................................... 67
4.3.2	Gravação do Caminho Contínuo................................... 69
4.3.3	Gravação Ponto-a-Ponto......................................... 72
4.3.3.1	Interpolação.......................................    73
4.3.3.2	Filtragem ............................................ 75
4.4	Trajetória no Espaço Cartesiano......................................  80
4.4.1	Estratégia Implementada .....................................   81
4.5	Conclusões
85
5	Implementação e Validação do Sistema	86
5.1	Introdução.......................................................... 86
5.2	Teste do Hardware de Comunicação.................................... 86
5.2.1	Funcionamento das Placas A/D e D/A............................ 87
5.2.2	Chavea,mento dos Modos	de Operação ........................... 88
5.3	leste do Módulo de Geração de Trajetória............................ 88
5.3.1	Obtenção das Trajetórias	..................................... 88
5.3.2	Validação d.o Sistema....................................     91.
5.3.2.1	Procedimento........................................  92
APÊNDICE A	96
APÊNDICE B	102
.1 Características do Manipulador Kraft................................  103
.1.1	Especificações Gerais.......................................  103
.1.2	Efetua,dor....................................................103
,1.3	Movimento das Juntas........................................  103
.2 Características do Robô Manutec r3....................................104
.2.1	Especificações Gerais.........................................104
.2.2	Velocidades...................................................104
.2.3	Acelerações...................................................105
.2.4	Movimento das Juntas .......................................  105
.3 Características da Placa A/D Utilizada ...............................106
.4 Características da Placa D/A Utilizada................................107
.5 Esquema Eletrônico da Placa I CM K .....................JOS
APENDICE C . ,.i?	108
Lista de Figuras
1.1	Manipulador Krafl. - Slave.................................... 19
1.2	Manipulador Krafl. em operação na Unieamp..................... 20
1.3	Manipulador Krafl - Master.................................... 21
1.4	Robô Manutec r3 em operação na Unieamp.........................22
1.5	Mock-up construido na Unieamp para testes............. ..... 25
1.6	OCTOS~100$M. Plataforma na qual o sistema irá	atuar. ........ 25
1.7	Robô Manutec rS operando sobre a Base Móvel.................  .	26
1.8	Estrutura da Programação off-line..............................27
2.1	Esquema de Programação off-line no robô Manutec.	. ........... 31
2.2	Sistema Master-Slave Kraft Grips.......................... 32
2.3	Configuração inicial do sistema...........................     33
2.4	Configuração atual do sistema..............................   34.
2.5	M.odo Monitoramento.......................................     35
2.6	Modo Controle................................................. 36
2.7	Modo Simulação de Vóo......................................... 37
2.8	Esquema do Software de Controle. . ........................... 40
3.1	Diagrama de. blocos de um controlador de trajetória............	44
3.2
3.3
3.4
3.5
3.6
3.7
4.1
4.2
4.3
4.4
4.5
4.6
4.7
4.8
4.9
4.10
4.11
4.12
4.13
5.1
5.2
5.3
Vetor posição e orientação da garra.................................. 47
.Definição dos Ângulos de Eulcv.....................................  49
Definição da Junção ATANíi........................................... 50
Definição dos Ângulos Roll, Pilch e Yaw............................. 5.1
Parâmetros de Dcnavil-Hartenberg........................	............ 52
Múltiplas Soluções para o Modelo Geométrico Inverso.................. 58
Diagrama de blocos de um controlador de trajetória................... 64
Possíveis caminhos suaves d.e 0q a 9/................................ 66
Trajetória linear no espaço de juntas................................ 67
Trajetória de um. robô no plano xy. Os set-pomts são indicados por pontos ao longo da linha.................................................... 68
Perfil de posição linear com extremidades parabólicas................ 69
Perfil de velocidade, trapezoidal: Necessário para movimento suave... 70
Uso de um gravador multicanal para gravar os sinais dos potenciômetros das juntas de um robô,............................................... 71
Trajetória de uma junta i após o processe de interpolação. . ........	76
Filtro FIR do tipo Janela Triangular. . ............................. 77
(a)Exemplo de filtro triangular. (b)Exemplo de um- sinal a ser filtrado. ...	78
Processo de convolução discreta.........................	79
Movimenta em Linha Reta............................................   82
Processo de inversão do Jacobiano. .................................. 83
Ligação do sistema para teste das placas A/D e D/A................... 87
Estrutura do sistema de geração de trajetória ponto-a-ponto. ........ 90 Trajetória interpolada e filtrada.................................... 91
5.4	Sincronização do movimento das juntas 2 e 3................................ 92
5.5	Esquema da bancada para leste de verijicação do (mniporiamerdo do mani-
pulador ao cxecular uma trajetória in.lcrpolada e uma Jiltrada............. 93
.6 Circuito eletrônico da phica 1'CM.K ..........................................108
Lista de Tabelas
1.1	Mamdec x Krafl................................. 23
3.1.	Definição dos Parâmetros de Dcnavit-ifarlenberg - 2 links adjacentes. ...	53
3.2	Robô Manulcc r3 - Parâmetros de Denavit-Harlenbcrg. ... 54
3.3	Manipulador Submarino Krafl - Parâmetros de D.fí....... 56
5.1 Trajetória ?/ízfe«íí« para os testes.
Capítulo 1
Posicionamento do Problema
1.1	Introdução
A utilização de robôs em ambientes de difícil acesso ao homem tem se tornado cada vez mais objeto de interesse dos pesquisadores em todo o mundo.
Diversa,s companhias de renome estão injetando recursos vultuosos em pesquisas nessa área, que já é uma realidade crescente. A NASÁ desenvolveu um telemanipulador cora a finalidade específica, de auxiliar no posicionamento de dispositivos espaciais em órbita, tais como, satélites, telescópios, antenas etc., eliminando assim a. necessidade d.e um homem arriscar sua vida para, executar a mesma tarda. Também, robôs com a. finalidade de explorar solos de outros planetas tem sido desenvolvidos.
Uma outra aplicação cada vez mais frequente é a utilização dessas máquinas para inspeção e manutenção do interior de reatores nucleares.
A necessidade de prospecção de petróleo em águas intermediárias e profundas, e o alto custo e risco da utilização de mergulhadores para, a execução de serviços de manutenção, inspeção e reparo propiciou a realização de um trabalho de investigação na área de automação com o objetivo de automatizar as tarefas através de dispositivos robot i cos.
No decorrer deste capítulo serão descritas as principais etapas do programa de pesquisa: citado com o objetivo de motivar o leitor e despertá-lo para, a riacessidade do desenvolvimento de interfaces que permitam a. realização dos objetivos propostos neste trabalho.
1.2	Utilização de Robôs e Manipuladores em Ambiente Submarino
Para a execução de tarefas submarinas automatizadas, é necessário um sistema dedicado, controlado remotamente para, observação de operações, inspeções, reparos e manobras em equipamentos e instalações. Os robôs industriais normalmente substituem o homem na execução de tarefas manuais bem-estrutura d as, repetitivas c ¿rs vezes bastante tediosas. A utilização de robôs tele-operados, por outro lado, além de viabilizar a automação de tarefas menos corriqueiras, possibilita maior interação do homem com o ambiente submarino, aumentando .suas capacidades manuais e perceptivas e extendendo-as a um ambiente remoto, hostil c perigoso, antes inacessível a ele.
A adaptação de robôs para trabalho submarino tem tornado possível st; conceber e planejar tarefas de inspeção, reparo e manutenção (IRM) em locais antes considerados impossíveis, portanto, está se abrindo um novo mercado de oportunidades e um novo campo parir a adaptação de robôs industriais [Rosário,91].
A Universidade Estadual de Campinas, Uuicanip, em um programa de cooperação científica envolvendo o Centro de Pesquisas de Geesthacht (GKSS) na Alemanha, e a Petrobrás (através de seu centro de pesquisas - CENPES) está realizando um projeto conjunto de pesquisa e desenvolvimento na área de tecnologia submarina. Ura interesse especial do projeto é a adaptação de manipuladores submarinos para trabalhos automatizados no fundo do mar, a profundidades que variam de 500 a 2000m. Esse programa, pode ser subdividido em três partes principais:
• Instalação de um Ambiente Submarino: Construção de um ambiente submarino apropriado para aplicações robóticas utilizando um robô industrial adaptado para, o trabalho submarino [Aust,90] e sua unidade de controle, assim como um
Posicionamento do Problema. _____________________________	18
manipulador submarino (ambos serão descritos posteriormente). 0 projeto e desen-
*
volvímento dessas instalações foram realizadas tendo em vista a. utilização desses dois robôs c a implementação do sistema em águas profundas brasileiras. Corno resultado disso, foi fechado um acordo ¡rara a realização de um programa experimental, e então decidiu-se pela, construção de dois Mock-ups (maquetes), um para, ser instalado na Unicamp e outro no GKSS. As tarefas a serem automatizadas também foram especificad as.
« Adaptação Robô/Manipulador: Construção de uma base móvel sobre a qual o sistema está, colocado e que é capaz de se movimentar por sobre trilhos existentes no mock-up e construção de ferramentas dedicadas para uso dos robôs;
« Programação Off-line: A programação off-linc consiste no desenvolvimento de um programa, computacional para simulação do cenário completo de atuação do robô e sua ba.se móvel (o sistema, completo de manobra, as ferramentas dedicadas utilizadas, o ambiente de trabalho, etc.).
• Tarefas Automatizadas: Desenvolvimento do controle e de interfaces homem-máquina voltadas para aplicações de automação de tarafas submarinas utilizando robôs e manipuladores.
1.3	Descrição dos Dispositivos Robóticos Utilizados
0 Kraft é um sistema robótica tele-operado de propósitos gerais projetado para executar tarefas em ambiente submarino ou em outros ambientes hostis. Um robô teleoperado é aquele em que os movimentos do manipulador (slave) são comandados por um operador a partir de um dispositivo de controle. No caso, esse dispositivo é um mínimaster, ou simplesmente masíer, que é um modelo do manipulador em escala reduzida.
Ele apresenta as vantagens de já estar condicionado ao ambiente submarino e adaptado a operações de telepresença. Sua estrutura mecânica é constituida de titânio e seu acionamento é hidráulico, proporcionando-lhe assim uma alta capacidade de carga, (ele é capaz de suportar até 34 Kg com o braço totalmente extendido [Kraft,85]). Um inconveniente, é a necessidade da utilização de uma unidade de hidráulica de potência. A
■figura LI mostra a unidade slave do manipulador Kraft e a figura 1.2 mostra uma foto desse manipulador durante um operação simulada..
Figura 1.1: Manipulador Kraft - Slave.
O master é uma cópia reduzida do slave. Por movimentar seus links, o operador controla o movimento do slave. Tanto um quanto o outro, possuem potenciômetros dc precisão de tal forma que o sistema de controle (KMC 9100) consegue acessar a informação angular proveniente de cada junta. Dois contra-pêsos são utilizados para contrabalançar o master na elevação do ombro e no cotovelo (fig. 1.3). Mais detalhes sobre esses dispositivos serão fornecidos no próximo capítulo.
O Manutec r3 é um robô industrial fabricado pela Siemens e adaptado para
Figura 1.2: Manipulador Kraft em operação na Unicamp.
Figura 1.3: Manipulo,dor Kraft - MasUr.
as condições submarinas pelo GKSS. Ao contrario do que se podería supor, o Manutec r3, por ser uin robó em escala industrial tem custo de implantação semelhante ao do manipulador Kraft, mesmo tendo características de performance melhores e também urna vasta quantidade de facilidades.
Como dito anteriormente, o projeto pretendia utilizar o robó Manutec ou o manipulador Kraft no sistema de intervenção submarina,, dependendo da performance de cada um deles quando executando tarefas pré-definidas. Essa performance está diretamente ligada às características construtivas dos robôs, de forma, que, a prioré, o Manutec parecia levar uma. certa varita,gern visto que por possuir acionamento elétrico (Motores Brushless) ele é capaz de conseguir melhor precisão e repetibilidade, que é talvez, o principal atrativo quando se deseja automatizar tarefas. A figura 1.4 rnostra esse robô executando uma operação.
Se isso não bastasse, o Manutec ainda contava cora uma unidade de controle bastante sofisticada (Sirotec RCM), capaz de fazê-lo executar linhas retas em qualquer direção, interpolações circulares, mostrar a posição cartesiana, da garra e muito mais, ao passo que ao Kraft restavam como características positivas sua maior capacidade de carga, o melhor comportamento de seus adoradores quando submetidos a ambientes submarinos e expostos a altas pressões e o fato de suas partes mecânicas já serem apropriadas para
í'ifíSjwttS Í'tÍÍÍÍv&lt;&lt;ÍÍ&lt;lÍ
K*44i*r L
!WíriKW«a;«Wfr.® $í íí^^í iííy$?í	Síí&amp;amp;^í^t*
't t^íJWÍÍ
■ *í b£'fc
F^Si'w*Lsíl.	*	. . .mj A. .
. ^viiiçfSíSÍ fit	Jít-^írt';.
&gt;r£í2^^Í	rrtíi^W'.
A\YA&gt;&lt;^V5&gt;V'l’‘"A&gt;'&lt;l. lV'VlH'l*il*V.S4V|.VrlV.* óh »K -L ./ia', . ■.« ■ -J ».’&gt; Í^i%^^lÍÍÍ4ÍÍÍÍÍÍ«K^eA^Í^ÍÍ* ■"‘- • ~'— t+itVHÍffr^SrtáA r-íí-Vd b'Wrt'íH 'A-4-í'írKS'’Vl’.'. VV*rV4tí&lt;r4k»rJ.. ÊStífe sEWHB 3^
* * 4'Í.Í ¿Í	h J í-í t	E-ítíÇ J h* K '
JA'- b^íiílí-ÜM.I-C'líi'HAÍÍi* «W itt nilstitttintitttttt► stí«
Figura 1.4: Robô Manutcc r3 cm operação na Unicamp.
o trabalho submarino. Porém, a necessidade de um operador para acioná-lo, a ausência de informações do sistema e a impossibilidade de programá-lo através de uma linguagem textual faziam do manipulador Kraft o menos indicado para, o serviço. Contudo, era precoce qualquer prognóstico, uma. vez que o sistema Kraft permitia grande acesso a.o seu interior.
A tabela 1.1 faz um resumo comparativo das características do manipulador Kraft e do robô Manutec r3.
CARACTERÍSTICAS CONSTRUTIVAS		
	Manutec r3	Kraft
Acionamento	Elétrico {B rush less)	Hidráulico
Sensores de junta	Encoders óticos	Potenciómetros de precisão
Programação	Linguagem Textual	Via Ma,ster/Slave
Controlador	Sofisticado	Simples
Informações do Sistema	Muita.	Pouca
Custo	Alto	Alto
Tabela 1.1: Manutec x Kraft.
Com base nas características mostradas na figura 1.1, pode-se citar as seguintes vantagens do Manutec com relação ao Kraft:
•	Melhor precisão e repetibilidade;
•	Exibição da. posição instantânea da. garra;
•	Programação através de linguagem textual;
•	Possibilidade de programação nos modos ponto-a-ponto, linear e circular;
•	Aprendizagem via, teclas;
•	Sensores de junta mais precisos.
Obviamente, o manipulador Kraft também tem seus pontos fortes, que são citados abaixo comparativamente com o robô Manutec:
•	Maior capacidade de carga;
•	Melhor comportamento de seus acionadores quando submetidos a.o ambiente submarino e expostos a altas pressões;
•	Maior robustez;
» Partes mecânica já adaptada para, funcionamento na água.
Con siderou-se eniào a possibilidade de se tentar obter as características positivas de ambos os robôs e decidiu-se pelo desenvolvi.mento de um sistema, de automação utilizando uma interface de comunicação com um .microcomputador que tornasse possível a operação do manipulador de forma semelhante à do robô.
1.4	Estrutura Mecânica Construída
Para a realização dos testes de performance com os dois robôs, foi construída na Unicamp duas maquetes em escala-real {Mock-up - figura 1.5) de um cenário submarino típico (Template-Manifolã) que permitirá, a. execução desses testes a sêco na. Unicamp e em águas rasas no GKSS (Alemanha) [Saramago,93].
Essas maquetes simulam parte de uma estrutura projetada pela Petrobrás, o OCTOS-lOOO™1, e serão instaladas no GKSS e na. Unicamp para um programa conjunto de testes. A figura 1.6 apresenta um desenho descrevendo essa estrutura.
1.4.1	Base Móvel
O robô deverá, trabalhar sobre uma base móvel e se deslocar através de trilhos solidários ao OCTOS-IÜOO^, até se posicionar em frente aos painéis colocados nas extremidades dos braços do mesmo. A figura 1.7 mostra o robô operando sobre sua base móvel. Após a fixação automática do conjunto, será possível a realização de tarefas automatizadas.
3OCTOS porque tem oito braços e 1000 porque pretende-se trabalhar a profundidades próximas de lOOOm.
Figura 1.6: OCTOSPOOO1 M. Plataforma na qual o sistema irá atuar.
1.5	Programação Off-line
O sistema desenvolvido é capaz de suportar dois tipos de programação de trajetória:
Figura 1.7: Robô Manulec r3 operando sobre a Base Móvel.
• Off-line.	(Utilizando um software de simulação off-line)
Na programação off-line, utiliza-se um software de simulação e visualização que contém o modelo geométrico do robô, permitindo assim, a geração automática de trajetórias. Esse módulo foi idealizado para ser utilizado como uma ferramenta de suporte à geração de trajetória para o manipulador. Para a sua implementação foi necessário desenvolver também o modelo cinemático para o manipulador Kraft. Com um sistema de programação modular em CAD obtém-se trajetórias que podem ser enviadas diretamentc ao controlador do manipulador. Este software apresenta as seguintes características:
*	Utilização de material de baixo custo (computador):
•	Fácil interação com o operador;
*	Estrutura modular;
e Simulação e visualização de tarefas;
*	Software completo de geração automeítica de trajetórias;
*	Transmissão de dados do programa de visualização através das interface com o robô e com o manipulador via linha serial R.S-232;
*	Padronização dos arquivos de dados.
Figura 1.8: Estrutura, da Progr-amaçãa ofT-line.
0 pacote computacional de programação off-lint, denominado SIMULA [Rosário,91 e mostrado na figura 1.8 consiste de um programa modular com as seguintes características:
•	Criação de ferramentas e ambientes:
Um programa, utilitário para a criação de arquivos contendo diferentes ferramentas e ambientes típicos. Uma imagem gráfica do cenário completo pode ser realizada;
•	Simulação:
Um programa para simulação e visualização de um cenário completo de atuação, o qual contém o robô, a base móvel, ferramentas dedicadas, acessórios etc.
* Geração de Trajetórias:
Um programa, utilitário para geração de arquivos de trajetórias compatíveis com. o controlador do robô ou d.o manipulador. Alem disso, esses arquivos sofrem urna, “filtragem” levando-se cm conta condições de velocidade e aceleração das juntas. Este módulo permite também a execução de testes de colisão;
1.6	Conclusões
Neste capítulo foi apresentado os principais objetivos [rara a automação de tarefas submarinas utilizando-se dispositivos robóticos. Ao mesmo tempo, apresentamos de forma suscinta, a- infra-estrutura, disponível para, o desenvolvimento do projeto proposto.
Tendo em vista a necessidade da. execução de testes tornou-se imperativo o projeto e a construção de uma interface homem-máquina entre o manipulador utilizado e um microcomputador.
0 capítulo seguinte irá ater-se ao problema, do desenvolvi mento de um hardware e um software dedicados, capazes de tornar possível a automação do manipulador Kraft.
Capítulo 2
Interface Homem-Máquina
2.1	Introdução
No capítulo anterior foram apresentadas as principais linhas de desenvolvimento necessárias para a automação de tarefas em ambientes submarinos utilizando o robô Ma-nutec e o manipulador Kraft num ambiente típico. 0 robô Manutec possui um alto grau de automação embarcada, pois é um sistema especiaJmente construído para trabalhar em linhas automatizadas como por exemplo, ein aplicações automobilísticas. Entretanto, o manipulador Kraft, que foi concebido para trabalhar baseado em telepresença, não necessita. para essas operações de um grau de complexidade em automação elevado.
Neste trabalho, estaremos preocupados em viabilizar o manipulador Kraft para, as operações tradicionais de telepresença, bem como a realização de tarefas automatizadas a partir de trajetórias pré-planejadas.
Para tornar factíveis as implementações desejadas no sentido de aumentar seu nível de automação, como por exemplo um módulo de geração de trajetórias ou um módulo de programação off-line, era de fundamental importância a construção de uma interface de comunicação entre o seu controlador e um microcomputador.
Este capítulo mostra o desenvolvimento dessa interface de comunicação, que tem
In terface Homem-Máquina	30
como objetivo imediato, proporcionar ao operador uma melhor interação com o sistema, por fornecer um série de informações úteis, tais como, os sinais on-line das juntas do manipulador, a posição espacial de seu demento terminal, o modo de operação corrente e principalmente possibilitar a. gravação e o envio trajetórias.
Uma vez implementada, essa interface juntamente com os módulos citados no capítulo anterior dariam ao manipulador, no mínimo as mesmas condições do robé), ficanclo como diferença entre eles apenas suas características construtivas.
2.2	Interface com o Robô Manutec R3
A interface do robô Manutec (RCM.) permite três formas de cornando: Via. Painel de Operação, Teach-in-Box e off-Unc.A programação off-line é realizada, através de um software de comunicação entre duas interfaces RS-232 existentes no controlador RCM do robô e num microcomputador compatível com a linha IBM-PC-AT, tornando-se, assim possível a geração de trajetórias a partir do programa (ojf-line) de simulação e visualização descrito no capítulo anterior. Considerando que este software foi desenvolvido pela SIEMENS, e é dedicado ao controlador RCM, não há a disponibilidade de informações sobre protocolos de comunicação.
Um dos inconvenientes desse método de geração de trajetória cujo esquema, é mostrado na figura 2.1 é a sua característica off-line. que deverá ser suprimida pela versão a. ser desenvolvida, para, o manipulador Kraft.
2.3	Interface com o Manipulador KRAFT
Como visto na seção anterior, o robô Manutec R3 conta com uma unidade de controle (Sirotec RCM) através da qual pode-se programar, operar ou monitorar tarefas. O manipulador Kraft, cuja concepção industrial era apenas para funcionamento no modo master-slave (teleoperação), não possuía os mesmos recursos de interfaccamento homem-máquina, não informando por exemplo, o posicionamento e orientação da garra, nem os ângulos das juntas. Limitava,-se apenas à execução de uma bateria de self-tests durante
Microcomputador
Figura 2.1: Esquema de Programação off-line no robô Manutec.
o processo de inicialização do sistema, com a intenção de detectar possíveis problemas a. nível de hardware, como por exemplo, conecçÕes mal-feitas ou soltas, níveis de tensão fora, da faixa, especificada e outros.
Na configuração inicial o sistema era composto pelas seguintes unidades:
•	Slave
•	Master
•	KMC 9100
Esses componentes são mostrados na figura 2.2 e descritos abaixo [Kraft,85]:
Interface 11 omem-M áquin a
Figura 2.2: Sistema Master-Slave Kraft Grips.
0 SIave é o manipulador propriamente dito, o elemento que, de fato, executa as tarefas. Ele é um braço eletrohidráulico com seis graus de liberdade mais a função de abrir/fechar a garra. O acionamento das juntas e da garra sao realizados a partir de atuadores hidráulicos, acionados por servo-válvulas, num total de sete. Além dessas válvulas para controle do atuador, existem aínda urna válvula de redução de pressão e nina válvula solenoide. Seis potenciómetros de precisão acoplados aos atuadores do slave fornecem a informação de posição decada junta para urna, unidade de controle eletrônico.
0 Master cinemáticamente é similar ao slave tendo três “links” responsáveis pelo posicionamento e três movimentos para orientação da garra. Em sua extremidade existe uma empunhadura, que permite o operador manuseá-lo para executar uma determinada tarefa. Assim como no slave, existem potenciómetros de precisão que proveem a informação de posição e orientação do master. Existe também, em sua. base, um conjunto de leds que informan o acionamento de algum sinal digital.
O KMC 9100 é um sistema de controle baseado em um microprocessador e projetado para prover o controle eletrônico e as funções de telemetria necessárias para a
operação do manipulador, ele é composto basicamente de três componentes [Kraft,85]:
» 0 módulo de controle do sistema do master (MSC), que cor.respo.nde à principal unidade de controle do manipulador, é responsável por receber os sinais tios potenciômetros do master e enviá-los em forma serial para, a unidade Driver Remoto (RSD), Esta, unidade executa, uma série de self-tests tais como teste de RAM, PROM, processador, timer, co-processador matemático, interrupção, comunicação, alimentação e outros;
•	0 módulo driver remoto (RSD) localizado próximo do slave, 0 RSD interfaceia diretamente com o slave e remotarnente com o master através do MSC;
*	um terminal de mão (HT) que provê entrada, de dados e um display. Esta é a. interface do operador com o KM.C 9100 para operar suas capacidades não controláveis através do master. Todos os ajustes do sistema, com exceção do controle de força são feitos via HT, sem a necessidade de se acessar o chassis da eletrônica, Kraft (KMC).
A figura 2.3 mostra como era feita, a comunicação entre o master e o slave. Sem a presença de um microcomputador, os recursos para interação humana eram bastante limitados.
Figura 2.3: Configuração inicial do sistema.
Observe que seu modo básico de operação consistia, em. fazer o slave repetir o movimento executado pelo operador através do master, não permitindo, por exemplo, o acionamento de uma única junta por vez. Foi então necessário tornar o sistema Kraft mais amigável e menos susceptível aos movimentos imprecisos do operador.
A interface homem-máquina desenvolvida, para o manipulador consiste de um microcomputador tipo IBM-PC-AT, um hardware eletrônico que faz a comunicação entre o manipulador e o micro e uni algoritmo de controle e monitoramento, Ela é capaz de pôr o sistema em três diferentes modos de funcionamento (figura 2.4), O operador pode escolher uma das seguintes opções:
Figura 2.4: Configuração atual do sistema.
• MODO 1 - Monitoramento: Modo de controle remoto do manipulador. 0 operador controla o slave através do uso do master;
« MODO 2 - Controle: Modo automático. O operador controla o slave através do teclado ou permite um controle diretamente através do micro por executar um arquivo de pontos para uma tarefa pré-programada;
» MODO 3 ~ Simulação de Vâo: 0 operador, no momento em que está trabalhando com o manipulador através do niaster, é submetido a uma simulação do movimento do R.O.V. ( Remote Operated Vehicle). Isto permitirá acostumá-lo às condições adversas inerentes ás operações submarinas.
Estando o sistema endereçado para monitoramento, os sinais analógicos e digitais do master (potenciómetros e chaves) são lidos pela unidade MSC. Caso algum sinal digital esteja ativo, este enviará comandos para o acionamento dos leds correspondentes.
Os sinais analógicos das juntas são convertidos para a. forma, serial e enviados sob protocolo RS-422 para o RSD, onde são reconvertidos para, a forma, paralela, e submetidos a urna, estratégia de controle que decide então como agir para, controlar o movimento do shive. A comunicação física, entre o MSC e o RSD é feita através da, utilização de par trançado, mas o sistema também suporta a utilização de cabo coaxial e fibra ótica, A figura 2,5 mostra a interface desenvolvida chaveando o sistema no modo monitoramento.
Figura 2.5: Modo Monitoramento.
Nesse modo o computador tem disponível a todo momento, através do conversor A/D, os sinais do mas ter e do slave, de modo que se pode fazer visualização gráfica dos sinais de ambos, geração de trajetória, exibição da posição cartesiana e dos valores angulares das juntas, animação gráfica etc,
Se o sistema estiver endereçado para, controle ou simulação de vâo, o míister não mais estará ligado ao MSC, mas somente ao microcomputador. No modo controle os sinais do master não estarão mais sendo lidos — de fato, neste modo, o mas ter não estará sendo utilizado —. 0 micro assume a sua função e passa a controlar o slave através da utilização do teclado, onde pode-se acessar individualmente qualquer junta do manipulador, ou através da. leitura de um arquivo de pontos. Esse sinais de controle são levados via conversor D/A para o MSC, que dá continuidade ao processo. Neste modo, pode-se fazer também visualização gráfica, exibição das coordenadas cartesianas da garra e das coordenadas articulares, animação gráfica e envio de trajetória. A figura 2.6 mostra
a. ligação do sistema no modo controle..
Figura 2.6: Modo .Controle.
Durante a execução de tarefas submarinas, o manipulador é conduzido por um veículo. Esse veículo faz alguns movimentos devido ao movimento da água. E muito difícil para, o operador levar o slave à posição desejada. 0 modo simulação de vôo tem como objetivo, acostumar o operador com as intempéries do ambiente real de trabalho do equipamento, pois ele simula as forças externas devido às correntes submarinas agindo sobre o slave. 0 que se faz é adicionar ao sinal enviado pelo rnaster, um arquivo de pontos senoidais de baixa frequência , na, intenção de fazer com que o operador tenha maior dificuldade para, controlar o manipulador. Todos os recursos disponíveis nos modos anteriores, com exceção da geração de trajetória, também estão presentes neste modo. A figura 2.7 mostra o sistema sendo chaveado no modo 'simulação de vôo.
2.4	O Hardware
Para que o micro tivesse acesso aos sinais das juntas do manipulador Kraft, e de forma a tornar possível a operação do sistema com os recursos de monitoramento, controle e simulação de vôo, era, necessário adicionar um hardware ao sistema original.
Figura 2,7: Moda Simulação de Voo.
Basicamente os três elementos instalados foram:
9 Uma placa de conversão analógico para digital (CAI) 12/36);
« Uma placa de conversão digital para analógico (CDA 12/08);
* Uma placa inultiplexadora analógica e digital (ICMK),
A conversão A/D era necessária para que o micro pudesse t4ler” os sinais analógicos do master e do slave, e a conversão D/A, para possibilitar o envio dos sinais de volta ao sistema. Algumas entradas e saídas digitais também foram necessárias para o tratamento dos sinais digitais provenientes dos botões de controle do Kraft.
A interface de chaveamento de modos (ICMK)1, como o próprio nome já diz, tem a finalidade de colocar o sistema num dos três modos de funcionamento descritos na seção anterior. De forma mais suscinta, o que o ICMK íaz é interligar ou o master ou o micro ao SMC. Eletrônicamente, esse dispositivo é um conjunto de multiplex adores analógicos e digitais controlados através do micro, O esquema eletrônico e mais detalhes sobre essa placa encontram-se no apêndice B,
3 Esta interface foi projetada e construída na Unicamp específicamente para o propósito de viabilizar a automação do manipulador Kraft.
A placa CAD 12/36 [Lynx,89] é uma interface de expansão que permite integrar o uso de microcomputadores compatíveis com a família IBM PC (XT e AT) ao meio ambiente externo. Suas características lhe dã,o a capacidade de interfacear o micro a diversos sinais, sejam eles analógicos ou digitais, de baixa ou alta frequência.
Essa placa possui basicamente os seguintes recursos:
*	Conversor analógico-digital (A/D) com 12 bits de resolução, para a. leitura dos sinais analógicos:
•	Entradas e saídas digitais que permitem a. lei t ura, e o ac ion amen to de variáveis digitais;
« Base de tempo interna e contadores que permitem temporizar as operações do sistema;
o Expansão para conexão de subsistemas, geralmente conversores D/A. que podem, ser usados para produzir sinais analógicos de estímulo, controle, set-point ou geração de formas de onda.
A CDA 12/08 é uma placa de expansão para microcomputadores compatíveis com IBM. PC (XT e AT) que possuí as seguintes funções [Lynx,91]:
♦	Até oito saídas independentes de conversão Digital-Analógica cora resolução de 12 bits;
•	Suporte a interrupções;
*	Três contadores programáveis para geração de interrupção e contagem de eventos;
•	Oscilador a cristal de 2MHz para uso dos contadores.
No apêndice B encontram-se informações mais detalhadas a respeito dessas duas
placas.
2,5	O Software
Um algoritmo para controlai' o sistema teve que ser desenvolvido e implementado. Este software visava fornecer ao usuário o maior número de recursos possíveis, exigindo dele o mínimo de esforço para operá-lo. Visto que o sistema, deveria, controlar e monitorar diversas interfaces, a. linguagem escolhida para o desenvolvimento do programa foi C4'4', por se caracterizar como um linguagem de nível médio, isto é. ela possui tanto os recursos das linguagens de alto nível como Pascal ou Basic como os recursos e funcionalidades do Assembly [Schildt!90][Ker.y78][Kelle,y,S9]. A figura 2.8 mostra as principais funções do software de controle do sistema, e elas são descritas abaixo:
« Teste de Hardware: Quando essa, função é selecionada, o software e.w. m a urna série de self-tests nos dispositivos que constituem o hard.wa.re. Toda vez que u.m selftest falhar, o sistema vai indicai- on.de ocorreu a falha. A última versão dessa, função executa basicamente três tipos de teste:
1.	Teste dos conversores A/D e D/A;
2.	Teste das entradas e saídas paralelas;
3.	Teste de chaveamento dos modos de operação.
♦	Calíbração: Essa função estabelece uma relação angular entre os potenciómetros do master e os potenciómetros do slave, de tal forma que a posição estabelecida para o master resulte na. posição desejada para o slave.
♦	Operação: Nessa, função o operador escolhe um dos seguintes três modos de operação:
- Controle: Essa função permite o operador escolher uma das possibilidades abaixo:
1.	Enviar uma trajetória previamente gerada para o slave;
2.	Comandar o slave através do teclado do micro
— Monitoramento: Essa função executa a aquisição dos sinais das juntas do master e do slave e em tempo-real plota esses sinais na tela de diferentes formas:
Figura 2.8: Esquema do Software de Controle.
1.	Gráfico do deslocamento, velocidade e aceleração de cada junta;
2.	Animação gráfica 3D do master e do slave;
3.	Exibição da posição cartesiana real da ferramenta (através do uso do modelo geométrico direto do manipulador);
4.	Status dos sinais digitais do sistema.
Intsrface ííomem-Máquina
 41.
Essa..função também tem implementado o sistema de geração de trajetória, que é o motivo fira deste trabalho.
-	Simulação de Vôo: Essa função chaveia o sistema, no modo 3, que é re-ponsável por simular o movimento do veículo (R.O.V.) durante a execução de uma, tarefa. Seu objetivo é acostumar o operador com as condições reais de trabalho.
-	Sincronização: Em um manipulador do tipo master/slavc há. a necessida.de inerente ao sistema de se. levar o mas ter e o slave a uma. posição correspondente antes que a. potência, hidráulica seja, aplicada.. Caso contrário o manipulador, que faz parte de uma. malha de controle de posição, teria que executrir um movimento abrupto, possivelmente em todas as juntas, de forma a corrigir o erro de posição e entrar em sincronismo com o mas ter. Visto que a trajetória executada, para essa correção de posicionamento é desconhecida, o movimento poderia causar danos ao equipamento existente dentro do volume de trabalho e ao próprio manipulador.
A necessidade dessa, função se deve por exemplo ao fato que quando o operador deseja mudar do modo monitoramento para o modo controle^ no qual o slave passa a ser comandado a partir do teclado do micro, é necessário que este (o micro) saiba exatamente que sinais enviar. Para, resolver esse problema, uma estratégia bastante simples e eficiente foi adotada.. 0 micro lê os sinais das juntas do slave (disponíveis a todo momento), converte esses sinais para, os correspondentes do master e envia estes últimos de volta, ao slave. Neste ponto, o micro passa a funcionar como master.
Para fazer o caminho inverso, isto é, voltar do modo controle para o modo monitoramento, o sistema perde o sincronismo, visto que o slave sofreu modificações em seu posicionamento através da. utilização do teclado do micro, enquanto que o master permaneceu parado. Uma tela mostrando setas direcionais para cada junta do manipulador ajuda o operador a conseguir novamente o sincronismo entre os dois.
DOS: Essa opção saí do programa de controle e retorna ao sistema operacional.
O software foi desenvolvido de forma a ser bastante amiga ved. Todas as funções aparecem na tela na forma de menus do tipo pop-up. A seleção é feita através das teclas de movimento do cursor. Existem algumas rotinas internas às quais o operador não tem acesso, que estão relacionadas com características básicas, tais como a inicialização das placas de conversão A/D e D/A, o envio de dados para algum dispositivo e assim por diante.
2,6	Conclusões
Neste capítulo foi abordado o projeto e implementação de uma. interface de comunicação entre um microcomputador e um manipulador submarino, necessária para, tornar possível a automação de tarefas a partir desse sistema.. Agora, pode-se pensar no desenvolvimento de softwares de aplicação e apoio para otimizar as tarefas a serem realizadas.
Porém, para a realização dessas facilidades, é necessário não somente o desenvolvimento dessa interface como também o conhecimento dos modelos geométrico e cinemático inverso. O capítulo seguinte será dedicado ao problema de modelagem do manipulador Kraft e do robô Manuten.
Capítulo 3
Modelagem do Manipulador Kraft e
do Robô Manutec r3
3.1	Introdução
A automação de tarefas utilizando sistemas robotizados exige a elaboração de um modelo geométrico que permitirá a evolução desse sistema dentro de seu volume de trabalho com a precisão exigida.
Na maioria: das aplicações industriais, a realização de tarefas está relacionada com o tipo de ferramenta utilizada, a partir de um sistema de coordenadas cartesianas íixo à base do robô. Ern aplicações do tipo CAI) ou controle em relação a um sistema de referência solidário à ferramenta de trabalho, necessitamos do conhecimento das velocidades e deslocamentos angulares da cada junta.
Para, isso torna-se necessário a medida dessas grandezas ern sistemas de coordenadas locais a cada junta, e a partir de transformações geométricas elementares efetuar o controle de posição e orientação do elemento terminal através do envio de informações aos atuadores elétricos, pneumáticos ou hidráulicos das juntas (modelo geométrico e análise cinemática).
Este capítulo tem como objetivo a realização de urna, metodologia para análise geométrica e cinemática, do robô industrial Manutec r3 e do manipulador submarino Kraft, visando o cumprimento dos objetivos propostos no início do trabalho.
3.2	Posicionamento do Problema
Para a realização de um sistema, de controle de trajetória, é necessário o conhecimento antecipado da solução do problema, de transposição direta, ou seja, urna relação que forneça a posição e orientação espacial da. garra para uma dada configuração de juntas, assim como a solução do problema inverso, que gera os ângulos de junta correspondentes a. uma determinada, configuração espacial.
Figura 3.1: Diagrama de blocos de um controlador de trajetória.
Observando a. figura 3.1, que mostra o esquema simplificado de uma, malha de controle de trajetória no espaço cartesiano, pode-se perceber a necessidade dos modelos direto e inverso do robô.
3.3	Modelo Geométrico
Dois sistemas de coordenadas são utilizados para a descrição da posição e orientação de um manipulador no interior de seu volume de trabalho: coordenadas angulares e coordenadas cartesianas de cada link.
A modelagem geométrica modela o robô estaticamente, não levando em consideração fatores como tempo e velocidade. Para, aplicações de controle, no entanto, são necessários modelos onde a relação destes fatores com o comportamento do rob&lt;&gt; sejam levados em consideração.
A modelagem cinemática trata do movimento das juntas independentemente das foiças que o cansam, referindo-se a todas as propriedades baseadas na geometria c no tempo- A descrição cinemática de um manipulador consiste no estabelecimento de uma relação matemática entre as coordenadas angulares e as coordenadas cartesianas de cada link.
0 principal, objetivo de um numi.pula.dor é trabalhar com seu. elemento terminal (ou dispositivo porta-ferramentas), ou seja, o elemento terminal é a parte do manipulador que se interfaceia fisicamente com. o ambiente de operação- Para executar uma dada, tarefa, o manipulador deve saber onde o objeto a. ser manipulado está localizado e qual a orientação que o elemento terminal deve ter em relação a. este objeto. Para este propósito torna-se necessário o estabelecimento de um modelo completo para o manipulador.
0 modelo geométrico direto consiste numa relação onde se obtém, a partir do conhecimento das variáveis articulares das juntas, a posição e orientaçfxo de cada link. Consequentemente a descrição da. posição e orientação do efetuador em relação ao referencial da base será dada por:
onde: O = pj, ... , f é o vetor posição angular das juntas;
Ã' = [a:,y, i-,	é o vetor posição/orientação da ferramenta.
Trajetórias podem ser planejadas no sistema de coordenadas articulares ou em termos da. posição e orientação da ferramenta. Como os acionadores requerem como sinal de referência, uma coordenada angular, quando urna trajetória é planejaria em termos de posição e orientação da. ferramenta, a mesma, deverá sofrer uma transformação cinemática inversa de coordenadas do tipo:
0 = F-l(X)	(3.2)
Devido à caractrística fortemente não-linear da equação acima,, sua solução pode, ser difícil através de métodos analíticos, e além disso, quando encontrada., pode não ser única.. Portanto, há a. necessidade da utilização de algoritmos que escolham urna única solução da equação 3.1, em função dos limites físicos do robô (ranges de Gô) e configurações geométricas ótimas (mais estáveis).
3.3.1	Transformação Homogênea
Matrizes de transformação homogênea, permitem a, passagem entre dois sistemas de coordenadas a partir da. definição da posição e orientação entre esses dois sistemas. Elas podem ser expressas ern matrizes 4. x 4 da seguinte forma:
nx			: P*			
		&lt;I.Jf	:	Py		Õ(t)	: p(í)
ns			: P*			
0	0	0	: 1		■ 0	i
onde:
’1} j, j- é a matriz de t r ansf orm açã.o de coordenadas do sistema ? — 1 com rei ação ao sistema.
z.
C)(í) e a matriz 3x3 dos cossenos diretores do sistema de coordeiurdas i expresso em relação ao sistema de coordenadas i — 1.
P(t) é o vetor 3x1 do sistema de coordenadas i expresso em relação ao sistema de coordenadas i — .1.
As componentes que expressam a posição são descritas pelo vetor posição P(t) e a orientação pelos três versores ortonormais ü(í), ã(Z) e â(ü). também chamados de vetores normal.., slide e approach. Todos esses vetores são definidos em relação ao sistema de coordenadas da. base (figura 3.2).
Figura 3.2: Vetor posição e orientação da. garra..
3.3.2	Descrição da Matriz de Orientação Através de Ângulos
Para &amp;amp; implementação de algoritmos de controle, é essencial descrevermos o posicionamento do elemento terminal do manipulador num instante t em coordenadas
cartesianas expressas em relação à sua base.
0 uso dos termos n, s e ct, como vetores de direção para, descrever a orientação do punho, é, as vezes , difícil. Para comodidade dos cálculos torna-se necessário expressarmos a matriz de orientação, composta pelos componentes dos vetores n,.s e d em termos de três ângulos A, B, C. Isto implicará que o posicionamento do elemento terminal do manipulador será descrito por um vetor final de seis dimensões representado por: ífoMMífo A C]*- Essa representação torna, mais simples a utilização da informação de posição e orientação do manipulador para efeito de controle cartesiano,
3.3.2,1	Ângulos de Euler
• Obtenção da Matriz de Euler a partir da definição de 3 ângulos
A matriz de orientação pode ser definida em termos dos ângulos de Euler em relação ao sistema de coordenadas da base. Dessa forma, basta efetuar rir os três rotações sucessivas era relação aos eixos Z(ã;), Y(0) e Z(&lt;p) (veja figura 3.3), obtendo-se uma matriz correspondente a essa transformação de coordenadas, ou seja:
EULER(p, 0.&amp;lt;¿) = ROT(z, ?/&gt;). ROT(y, 0). ROT(z, ó)
EULERpp, Ô,
cpcó — spc&amp;amp;sp spcp + cpcOsp sOs&lt;j&gt;
—cpspspsO
— .5p SÓ + CpC&amp;amp; C(f&gt; — Cp $0 sOcp	cO
(3.4)
• Problema Inverso - Obtenção de 3 ângulos de Euler a partir da matriz de orientação
Como foi mostrado anteriormente, o modelo geométrico direto de um robô fornecerá um vetor posição e qma. matriz de orientação de sua garra expresso era relação
Figura 3.3: Definição dos Angulos de Euler.
ao sistema de coordenadas da base. Â matriz de orientação poderá ser expressa através dos três ângulos de Euler (tb.fi). fi). Para que isto seja possível, é necessário definirmos a função ATAN2, que tem. por finalidade garantir a. unicidade de solução. Comparando-se a matriz de Euler (equação 3.4) com a matriz de orientação finai (equação. 3.3) ditemos os três ângulos de Euler:
0 = ATAN2

(3.5)
a
z
fi - ATA.N2
- SfiSy cfih + sibnv _
• Definição da função ATAN2
ATAN2(t,t/) calcula, ian~l(y/x), mas usa tanto o sínal de r como o de y para determinar o quadrante no qual o ángulo resultante está. A figura 3.4 resume esta den finiçâo.
0= ATAN2 —J
0	&lt;	e		90,	com	+x,	+y
90	&lt;	6		180,	com	'X,	+y
-180	&lt;	e	.&lt;	-90,	com	-x.	“Y
-90	&lt;	e		0,	com	+x.	-y
Figura 3.4; Definição da função ATA.NS.
3 3.2.2 Ângulos Roll, Pitch, Yaw
Uma outra técnica para descrever a. orientação do robó a. partir de três ángulos, envolve o uso da representação ROLL, PÍTCH e E4 IF do punho. Estes são os três graus de liberdade possíveis, associados ao movimento do punho, ou, mais precisamente, os ângulos associados a esses graus de liberdade. São respectivamente, os ângulos de rotação do punho ao redor dos eixos X, Y e Z da. conexão orgão terminal ao punho.
Alguns robôs industriais, por exemplo o robô Manutec r3, utilizam os ângulos Roll, Pitch, Yaw para expressar a. orientação do elemento terminal em relação às coordenadas da base. Para isto basta efetuar três rotações sucessivas ern relação aos eixos X(R), Y(P) e Z(Y), obtendo-se uma matriz correspondente a essa, transformação de coordenadas, ou seja:
• Obtenção da Matriz RPY a partir da definição de 3 ângulos
RPY(&lt;?,&amp;amp;,$) = ROT(z,&lt;f&gt;), ROT(y,$}. ROT(z,fi)

ctpcO cfisthtf1 — stfrcfi CffbsOcfi -F sfis-i.b Syed s$s(Dfi -b c^cfi síRsOcY “ cfisfi — s0	cOsfi	cOcfi-
(3.6)
A figura 3.5 mostra o processo para, se obter os ângulos Roll, Piich e Yaw,
Figura 3.5: Definição dos Angulos Roll, Piich c Yaw.
9 Problema Inverso - Obtenção dos 3 ângulos Roll, Pitch, Yaw a partir da matriz de orientação
4 = ATAN'2
ny
d = ATAN2
~~ CÓíly
— S^Sj; + CfiSy
(3A)
52
E importante observar que essa relação eleve ser sempre biunívoca. Para o robó Manotee r3, os ángulos e 4’ s’&lt;-w denominados, respectivamente.. A, 13 e C. A figura.
3.5	mostra.
3.3.3	Parâmetros de Denavit-Hartenberg (D.H.)
A partir do Modelo geométrico direto podemos determinar as coordenadas de posição e orientação de cada link, e consequentemente a. posição e orientação do elemento terminal d.o robô/manipulador em relação ao sistema, de coordenadas da. base.
Para, cada link de um robô/manipulador será lixado um sistema de coordenadas composto de três versores ortogonais. Estas coordenadas sao chamadas de “linkcoordinates”, e sua posição e orientação são definidas por matrizes de transform ação homogêneas.
Figura 3.6: Parâmetros de Denavit.-Hartenherfl.
A sistemática estabelecida por Denavit e Hartenberg (ver figura 3.6), permite descrever a posição sucessiva das coordenadas de cada link através da definição de quatro parâmetros («, o, d e 6) [Denavit,55]. A tabela 3.1 sumar Iza a definição desses parâmetros.
No caso do robô/manipulador em estudo qualquer junta i é rotacional, consequentemente Oi é uma variável de junta e	e a¿ são constantes.
PARÂMETROS DE DENAVIT-HARTENBERG
(.p ™ A distância, entre Zi e Zj+1 medida, ao longo de a,- = 0 ângulo entre Zi e Z,+I medido sobre X\
R = A distância. entre Ad-i e A\ medida ao longo de Z{
= O angulo entre e medido sobre Z,-
Tabela 3.1: Definição dos Parâmetros de Denavii-Ifartenberg - 2 links adjacentes.
As coordenadas de posição e orientação de um dado link i em relação às coordenadas do link i — 1 podem ser descritas como:
cO, —s0:(o., sOi cÔ{cai
0	.sã,-
0 0
sO.so, cpcOt -~cO;SCt; ípsO;
C&amp;amp;i	di
0	1
(3.8)
As coordenadas de posição e orientação de um link m em relação ao sistema de coordenadas fixo a base do robô será:
A),m = Aoj.A.^2 • ■ ■	2,m—1 •Am.~ih,rl	(3.9)
onde: m é número de graus de liberdade do manipulador.
O robô/manipulador deverá possuir uma. ferramenta presa ao último link, e a mesma fará parte de seu elemento terminal. Esta ferramenta possuirá um sistema de referência, em relação às coordenadas deste link, que será designado como WKS (notação Níanutec r3).
A posição e orientação descrita em relação às coordenadas da base do manipulador serão designadas como TOOL.
WKS representa uma matriz constante, função da geometria, da. ferramenta utilizada, enquanto TOOL upia função das variáveis articulares do robô ou manipulador,
ou seja:
TOOR = R..JM
(3.10)
3.4 Modelo Geométrico do Manutec r3
0 robô Manutec r3 possui seis juntas rotacionais. Seus parâmetros de Denavit-Hartenberg (D.H.) são apresentados na tabela 3.2. Utilizando estes valores na eq. 3.8, podemos obter a.s matrizes Aí-j apresentadas no apêndice C.
JUNTA	0 (gr)	d (mm)	a (gr)	a (mm)	range (gr)	REPRESENTAÇÃO				
3	8t	665.0	-90.0	ao	-165		3 1			
2	02	0.0	0.0	300.0	-W220					34
3		0.0	90.0	0.0	-225W5		&lt;	aí		
										
4	04	730.0	-90.0	ao	-190					
5		0.0	90.0	0.0	-uo	dí		&gt;r *		
6	f&gt;6	!C«.O	0.0	ao	-265					
										X
Tabela 3.2: Robô Manutec r3 - Parâmetros de Denavit-ffartenberg.
O bs: Os parâmetros geométricos a e d da tabela. 3.2 são aproximados e deverão ser estimados através de um algoritmo de identificação [Campos,93],
—	A),!- Ai,2..4213-,43t4./l.j!5.,45 6
n s ã : p
0
1
* Orientação
rp, = [(6'102304 - 5154).C5 - C1.52355].C6 + [-0.1.02354 - 5104],56 ny = [(5102304 + 0154).05 - 5152355J.C6 + [-5102354 + O1C4J.56 nz [-523O4O5-O2355].O6H-5235456
sx -[(0.102304 - 5154).05 - O152355J.56 + [-0102354 - 516’4].C6
S{/	-[(5102304. + 6’154).6’5 - 5152355].56 + [-5102354 4- C1O4].O6
ss = [5230405 + 6’2355],56 + 5235406
ax = (0102304 - 5154).55 + 0152305 ay - (510’2304 + 0154).55 + 5’152305 az = -5230455 + 02305
• Posição
p» = [((745546).C23 + (C5¿6 + d4).523 + «2C2].O1 - 515455d6 pv = [(O455d6).O23 + (O5á6 + d4).523 + «,2O2].5.1 + C15455d6 pz = -(O455d6).523 + (C5d6 + ¿4).O23 - «252 + di
Onde:
Ci — eos(&amp;amp;í)
Si ~ sen(Gí)
Cij =: COs(0i + &amp;amp;j) Sij — sen(0{ 4- 0,)
¿-1,2,...,6
¿ = 1,2,...,6
¿, j = 1,2,... ,6
i,j = 1,2,... ,6
Como não dispúnhamos das equações do modelo geométrico do robô Manutec r3, uma análise do modelo implementado para o mesmo foi efetuada a partir da comparação dos resultados obtidos na implementação do seu modelo geométrico com os resultados lidos no controlador SIROTEC do robô e os resultados foram considerados satisfatórios.
f
3.5	Modelo Geométrico do Kraft
O manipulador Kraft também possui seis juntas roí;acionais. Os parâmetros de Denavit-Hartenherg (D.H.) para este manipulador são apresentados na tabela 3.3. Ut.iliza.ndoest.es valores na eq. 3.8, podemos obter as matrizes de passagem .4,-1: que sâo apresentadas na, apêndice C.
JUNTA	0 (gr)	d (mm)	«(gr)	a (mm)	ranjje- (gr)	REPRESENTAÇÃO		
}	íh		-90.0	0.0	-í&gt;0	í		
2	(i2	íiíl	0.0	a2	0/U20			
3	e3	0.0	0.0	a3	-2QM3O	d!	&gt;	ií2	s.'J	a4 _ „„ ..	
4	«4	730.0	-90.0	a4	-42M-58			&amp;lt;,*x z X
5	e5	&lt;10	90.0	0.0	-32.5			
6	*6	dó	0.0	0.0	oa-3®			
Tabela 3.3: Manipulador Submarino Kraft - Parâmetros de D.H.
4(J,6 — 4.03.. Aj .42,3.43,4. A.^g.A.g^
« Orientação
?+ - -51.(523455(56 + 523456)-51C5C6 n, = -51.(02345506 + 523456) + 010506 n, - -52345556 + 523456
-	01.(02345556 - 523406)	+	510556
sy	51.(52345556 — 523456)	-	O1C5S6
sz	52345556 + 023406
-	01023405 - 5155
üy	=	51023405 + 0155
a.	=	523455
* Posição
px = ¿6.(01023405 - 5155) + 01.(«40234- + «3023 + «202)
Py ¿6.(51523455 + 0155) + 51.(«40234 + «3023 + «202)
P; = ¿6.523455 + «45234 + «3523 + «252 + di
Urna análise do modelo geométrico direto implementado para o manipulador Kraft foi realizada. Os parámetros geométricos utilizados foram estimados a partir dos desenhos básicos do manipulador e foram calculados corn mais rigor a. partir da utilização de técnicas de identificação de parámetros [Campos,93].
3.6	Problema Inverso
A modelagem inversa de manipuladores refere-se a técnicas para obtenção dos valores angulares das juntas de maneira a. se obter uma, posição e urna orientação específica do elemento terminal do robó.
Os robôs e manipuladores, em geral, são comandados através de posições angulares de suas juntas, enquanto que os objetos a serení manipulados são normalmente
expressos em lermos de coordenadas cartesianas. Quando se deseja conhecer os valores das variáveis de junta, dado a posição espacial da. ferramenta de um robô, deve-se estabelecer o chamado modelo inverso do mesmo.
A solução do problema de modelagem inversa pode ser dividida, em basicamente duas classes: Solução através de formas fechadas ou analíticas (modelo geométrico inverso) e soluções numéricas (modelo cinemático inverso). Dentre as técnicas que utilizam uma forma fechada estão o Método da Transformada Inversa. [Pa.ul,8I] e os métodos geométricos [Lee,84]. Esses métodos tentam encontrar fórmulas algébricas ou geométricas que relacionem as variáveis cartesianas com as variáveis angulares do robô. Eles têm bastante aplicabilidade para robôs com até quatro graus de liberdade. Dentre os métodos numéricos, ou iterativos, destacam-se o de Gauss, o de Grevílle eode Miss [Miss,92].
Figura 3.7: Múltiplas Soluções para o Modelo Geométrico Inverso
Embora os métodos numéricos seja m geralmente mais lentos, devido a sua natureza iterativa, que a solução correspondente em forma fechada, eles apresentam vantagens
sobre este último, visto que esses métodos sao genéricos, isto é, eles podem ser aplicados a qualquer tipo de robô. Além disso, eles convergem sempre para a- posição desejada e apresentam uma solução única..
Outro fato importante é que os pontos gerados em cada iteração de um método numérico podem ser dircta.men.te enviados pa,ra o controlador do robô como um ponto de referencia., agilizando, assim, o processo de movimento cartesiano e abrindo a. possibilidade de sc implementar testes de colisão em tempo-real,
Os métodos analíticos, não raro, conduzem a soluções múltiplas (ver figura 3.7), impondo a,o sistema o dilema, de escolher a melhor configuração.
Além disso, Craig mostrei que quase todo sistema com juntas revohitas ou prismáticas tendo um total de seis graus de liberdade possui apenas a solução numérica para a. modelagem inversa] Craig,89]. Apenas em alguns casos especiais, o problema da modelagem inversa para robôs com seis graus de liberdade pode ser resolvido analiticamente. Pieper [Pieper,68] apresentou uma solução analítica para robôs com seis graus de Uberdade cujas três primeiras juntas são revohitas ou prismáticas e cujos eixos das três últimas se interceptam em algum ponto.
No caso em questão, o Manutec e o Kraft não satisfazem essa condição, além disso, o sistema desenvolvido, que será descrito no capítulo 4, pretende ser genérico, utilizando, dessa forma, a abordagem numérica.
3.6.1	Modelagem Cinemática Inversa
Como visto anteriormente, a cada, movimento definido no espaço articular do robô, corresponde um movimento no espaço operacional ou cartesiano. Essa, correspondência foi estabelecida pela equação 3.1 mostrada abaixo:
X=F(ê)	(3.11)
onde:
0 = (A,A,.--,A).
Ã (z,y,2,^,0^),
de forma, que:
X = A(Ai &amp;amp;3, A, A; A)
y ~ A;Ai A) AiA)
$ = A(A, A, A, A, A-, &amp;amp;&amp;amp;)
A linearização dessass equações em torno de um ponto de equilíbrio pode ser obtida através do cálculo das derivadas parciais do funcional dado pela equação 3.11. Temos assim:
d,X __ ÔF(0) dO dt dÕ dt
ou,
dX dX dS
IT ~ d iH
(3.12)
(3.13)
Ao conjunto de elementos damos o nome de Jacobiano c podemos escrever, então, em forma matricial:
ã		Al J12 J13 J14 Ag dí6		Á
y		J21 Aa A4 As Ag		À
z		Al A’2	J33	J34	J35 As		Ã
$		Al Ax As A4 As A»3		À
&amp;amp;		Ai A2 As A4 A§ As		$5
		Ai A2 As A&amp;lt;As Ae.		
(3.14)
onde:
Eliminando dl na equação 3.13, podemos escrevei finalmente, para pequenos deslocamentos:
onde:
A A' ~ incremento de posicionamento espacial;
A d ~ incremento angular das juntas;
J = Jacobiano;
n = número de variáveis cartesianas;
m = número de graus de liberdade do robô.
De forma análoga, todo movimento definido no espaço cart esiano pode ser ma-
peado no espaço de coordenadas generalizadas (ângulos das juntas), e obtido através da inversão do modelo geométrico.
(3.15)
A obtenção de uma solução Ai? não é trivial. Como J é um funcional obtido pela linearização da equação 3.11 (não linear), não se pode garantir a existência e/ou
Modelagem do Manipulador Kraft e do Robô Mamitec r3	62
a unicidade de urna função J~\ 0 cálculo da inversa da matriz jacobiana é complexo e demanda recursos sofisticados para sua execução em tempo real. Ressalta-se ainda que a sistemática, apresentada permite o cálculo dos deslocamentos angulares necessários para o controle das juntas a partir de um algoritmo de inversão numérica. Conforme afirmado anteriormente, os métodos numéricos apresentam vantagens no que diz respeito a convergência e possibilidades de testes intermediários, tais como colisão, fim-de-curso, etc.
Se a programação do robô é feita através de aprendizagem, não é necessária a obtenção do modelo cinemático inverso, porque quando o operador conduz o orgão terminal, os pontos de referência correspondentes são registrados pelos sensores. No entanto, quando se deseja que o robô se desloque de um ponto a outro seguindo uma linha reta, por exemplo, torna-se necessário o cálculo de J’1.
Num trabalho de dissertação apresentado nesta instituição [Fayan,92] foi feito um estudo sobre métodos de inversão numérica. Os resultados obtidos nesse trabalho serão utilizados na implementação do software geral para realização do sistema proposto.
3.7	Conclusões
Este capítulo apresentou o desenvolvimento de uma metodologia matemática necessária para o trabalho com sistemas robóticos. Foi discutido o problema da. transposição direta e inversa. Os parâmetros das juntas e links de um robô foram definidos e uma matriz de transformação homogênea 4x4 foi introduzida para descrever a localização de um link com relação a um sistema de coordenadas fixo.
0 capítulo seguinte irá se ater ao problema específico da geração de trajetória e apresentará as implementações feitas no software desenvolvido para, monitorar e otimizar o controle do manipulador Kraft.
Capítulo 4
Geração de Trajetórias
4.1	Introdução
De posse dos modelos geométrico e cinemático do manipulador discutidos no capítulo anterior, estamos aptos agora a enfocar o problema da geração de trajetória. Este capítulo aborda as principais características das técnicas de planejamento de trajetórias implementadas.
Em geral, trajetória refere-se à evolução no tempo da posição, da, velocidade e aceleração de cada grau de liberdade do manipulador, ou seja, a geração de incrementos angulares de juntas necessários para que o mesmo realize de maneira adequada uma, dada tarefa. Ao mesmo tempo, procedimentos devem ser adotados para que os limites de velocidade e aceleração de cada junta não sejam extrapolados e para que não haja colisões.
Esse tópico trata do problema de como desejamos especificar a trajetória ou o caminho através do espaço. De forma a tornar a descrição do movimento do manipulador mais fácil para o usuário, este nao deve ser obrigado a escrever uma função complicada do espaço e do tempo para especificar a tarefa. Ao invés disso, o sistema deve permitir a capacidade de se especificar a trajetória com a simples descrição do movimento desejado,
e ele próprio cuidar dos detalhes. Por exemplo, o usuário pode descrever apenas a posição final desejada e a orientação da garra, e deixar que o sistema decida sobre a forma exata, da trajetória para, alcançar o objetivo, a duração, o perfil de velocida.de e outros detalhes.
As técnicas de geração de trajetórias normalmente “interpolam” ou “aproxi-mam” o caminho desejado por uma. classe de funções polinomiais e geram uma sequência, de pontos (set points) para o controle do manipulador. Tais trajetórias podem ser especificadas tanto em coordenadas de juntas como em coordenadas cartesianas, contudo, usualmente elas são especificadas em coordenadas cartesianas, porque o elemento mais importante para visualização é a ferramenta, e o referencial mais adequado é aquele colocado na. garra. Se a coordenada de junta, é desejada, então usamos a cinemática inversa para fazer a conversão necessária.
4.2	Controle de Trajetória
0 problema do controle de trajetória mostrado de forma simplificada na figura 3.1 é agora tratado com maior profundidade. A figura 4.1 mostra um esquema detalhado da estrutura de controle de trajetórias proposta neste trabalho.
Figura 4.1: Diagrama de blocos de um controlador de trajetória.
onde:
JeJ~l sao as matrizes de transposições direta e inversa respectivamente;
Xre f é a posição cartesiana desejada para a garra do robô, fornecida a partir do algoritmo de geração de trajetória;
Xme(i é a posição cartesiana real da garra do robô, obtida, a partir do modelo geométrico do manipulador.
Através da, comparação de Xrflj e um sina,1 de erro é gerado e amplificado. A seguir este sinal é transposto em termos de erros de coordenadas articulares (¿0) e integrado, para posteriormente ser utilizado como sinal de referência para o controle das juntas do robô. 0 bloco que representa o robó, relaciona os torques F, necessários para o acionamento das juntas, com os ángulos d.
A porção enclausurada representa o con trole de trajetória a nivel de juntas, mostrando assim que o sistema suporta a concepção de trajetórias tanto no espaço articular como no espaço cartesiano
As estrategias de controle de trajetória implementadas no sistema foram as seguintes:
•	Controle a nivel de juntas:
~ Caminho continuo;
— Ponto-a-ponto;
•	Controle cartesiano.
Esses dois tipos básicos de geração de trajetória serão enfocados a seguir.
4.3	Trajetória no Espaço de Juntas
Nesta seção iremos discutir os métodos de geração de trajetória que se baseiam nos ángulos das juntas do robó.
Ja vimos anteriormente que a descrição de uma trajetória pode ser feita tanto no espaço articular como no espaço cartesiano. Quando ela é especificada em termos de
funções dos ângulos das juntas, dizemos que essa trajetória está no espaço de juntas ou espaço articular.
Geralmente, com base nessa, abordagem, uma trajetória é especificada em termos da posição e orientação de partida e da posição e orientação desejada- Cada ponto da trajetória planejada é “convertido" em um conjunto de ângulos de juntas através da. cinemática, inversa. Então, é encontrada, para cada uma das juntas urna função suave que passe pelo ponto dé partida, pelos pontos de passagem e pelo ponto final da trajetória.
No caso do sistema Kraft essa “conversão” é desnecessária. Uma outra forma de se fazer a. aquisição dos pontos de passagem é possível de ser realizada, visto que o manipulador pode ser programado por aprendizagem, isto é, ele é colocado em posições nas quais se deseja que seu elemento terminal passe e o valor angular de cada junta é gravado pelo microcomputador. 0 fato de seus sensores de junta, serem do tipo absoluto (potenciõinetros) e não incrementais (encoders) [Souza,92] também colaborou para, a não necessidade do uso da cinemática inversa, para esse tipo de trajetória.
Figura 4.2: Possíveis caminhos suaves de 0O a Of.
Voltando ao caso genérico, é óbvio que existem diversos caminhos suaves que levam o referência! da ferramenta de d0 a fh em um intervalo de tempo At = ty — íq, A figura 4.2 mostra algumas soluções possíveis.
4,3.1	Lei de Movimento
A função de interpolação suave que deve passar por todos os pontos especificados do camínho, pode ser simplesmente uma reta, no espaço de juntas. Cada ponto da. trajetória é interligado com o seguinte através de uma linha reta. Note que embora o movimento de cada junta seja linear, a garra, em geral, não se move numa linha reta no espaço cartesiano. A figura 4.3 mostra como seria o movimento de uma junta hipotética executando uma trajetória deste tipo. e Pj são respectivamente os pontos inicial e final da trajetória e PP1 e PP2 são pontos de passagem .
Figura 4.3: Trajetória linear no espaço de juntas.
Uma interpolação linear simples, no entanto, iria provocar no início da trajetória do mecanismo, uma aceleração muito grande [Snyders85], que possivelmente nenhum manipulador convencional é capaz de fornecer. Mas o pior é que este tentaria alcançar tal variação de velocidade. Os robôs e manipuladores, e particularmente os modelos hidráulicos são muito potentes e capazes de altas acelerações, o que poderia tornar tal experiência bastante desagradável.
Para que não haja., então, uma variação muito brusca, da velocidade, deve-se colocar muitos pontos na parte inicial da trajetória (fase de aceleração). A seguir, coloca-se pontos mais espaçados (fase de velocidade constante) e no final volta-se a colocai' bastante pontos (fase de desaceleração). A figura 4.4 mostra tal interpolação no plano xy.
y
x
Figura 4.4: Trajetória de um robô no plano xy. Os set-points são indicados por pontos ao longa da linha.
Se plotarmos a interpolação linear de uma junta como mostrada pela figura
4.4	em um gráfico de deslocamento angular versus tempo, teremos uma curva como a mostrada na figura 4.5.
Essa figura mostra que a trajetória executada é formada por um trecho linear (velocidade constante) e por trechos parabólicos nas extremidades (aceleração e desaceleração). Isto fisicamente significa que a junta parte com velocidade zero e lentamente vai atingindo um valor constante. No final da trajetória ela novamente decresce até zero.
Na prática, para a realização de uma tarefa, o manipulador executa diversas trajetórias concatenadas, e essa técnica de suavisar as extremidades permite a execução de trajetórias de maneira uniforme, não necessitando de grandes sofisticações nos controladores.
Com o propósito de descobrir o perfil de velocidade para cada junta., de maneira a obter o perfil de deslocamento desejado, integramos a curva da figura 4.5, obtendo um
tac .... i'................ Lvc	................f... id
Figura 4.5: Perfil de posição linear com extremidades parabólicas.
perfil trapezoidal como mostrado na figura. 4.6. Através desse perfil, pode-se observar que a aceleração e a desaceleração possuem valores constantes.
Na figura qualitativa 4.6 o valor da velocidade vj é, a priori a máxima velocidade de deslocamento da junta., tac é o tempo de aceleração, íyc é o tempo de velocidade constante e é o tempo de desaceleração. Veremos, mais adiante, que o valor da velocidade de deslocamento Vd para uma j unta, específica depende e é proporcional ao deslocamento dessa junta, isso porque, é desejável que todas as juntas partam ao mesmo tempo e cheguem ao objetivo ao mesmo tempo.
4.3.2	Gravação do Caminho Contínuo
Consideremos o caso mais simples de controle de trajetória, no qual o robô é levado a executar um movimento através do controle do operador, e o sistema simplesmente grava a trajetória para posteriormente executá-la.
Considere, por exemplo, uma aplicação de pintura usando spray. Um canhão de spray é instalado na garça do robô, então, um pintor experiente segura ò braço do
.... tac --------|---------------------• tvc ------------------------------' td
Figura 4.6: Perfil de velocidade trapezoidal: Necessário para movimento suave.
robô e o guia através da sequência de pintura. Cada uma das juntas é equipada, com potenciómetros que proveem os sinais analógicos de posição. Um gravador analógico niultícanal está ligado ao robô, com um canal conectado a cada potenciómetro (Fig. 4.7). Dessa forma, cada movimento executado pelo operador é gravado como um conjunto de posições instantâneas das juntas.
Para reproduzir o movimento, as saídas do gravador sao alimentadas com o arquivo de pontos da,s juntas e o robô repetirá a sequência que foi gravada.
O manipulador Kraft funciona de forma semelhante, só que ao invés do operador manusear diretamente o seu braço, ele opera através do master, conforme a,presentado no capítulo 2.
A simplicidade dessa técnica de gravação e reprodução, além do fato de que temos a garantia que o caminho- resultante é fisicamente realizável, a torna, bastante atraente.
Existem alguns problemas cóm essa técnica, é claro. O mais óbvio é o fato de que todas as imperfeições cometidas pelo operador durante o processo de aprendizagem são gravadas e repetidas pelo manipulador. Os pontos a serem atingidos devem estar em
Figura 4.7: Uso de um gravador multicanal para gravar os sinais dos potenciômetros das juntas de um robô.
posições muito bem definidas o tempo todo. Isso não é problema, para o caso de pintura com spray, porque a área atingida pelo spray é relativamente grande e pequenos erros de posicionamento são insignificantes. No caso de soldagem, no entanto, a acurácia é crítica e a execução precisa da tarefa pode ser excessivamente cara ou impossível. Um outro inconveniente deste método é a necessidade de muita memória para armazenar os arquivos gerados, pois o ciclo de movimento é dividido em centenas ou até milhares de pontos individuais, muito próximos uns dos outros, ao longo da trajetória. Obviamente, o número de pontos de um arquivo depende do tamanho da trajetória, da taxa de aquisição dos pontos .e da velocidade com a qual o operador guia o manipulador, mas tipicamente esse valor é muito alto e desnecessário.
Para as aplicações nas quais este método é apropriado, ele provê um meio atrativo de se conseguir o controle de um caminho contínuo. Para aquelas em que ele não é bem apropriado, outras téçnicas mais sofisticadas são requeridas.
4,3.3	Gravação Ponto-a-Ponto
A técnica de gravação do caminho contínuo, implementada em nosso sistema, se mostrou inadequada para as aplicações de automação submarina, uma vez que ela não proporciona a acurácia necessária para o desenvolvimento de tarefas num ambiente hostil, onde o manipulador está exposto a diversas forças externas.
Outras estratégias de controle de trajetória estão disponíveis, porém, aquelas que produzem um caminho bastante suave e preciso, normalmente requerem grande esforço computacional e consequentemente, sao mais lentas. 0 controle de trajetória no espaço cartesiano é um exemplo disso.
Um método simples, mas que apresenta resultados satisfatórios é a. técnica de gravação ponto-a-ponto. Snyder [Snyder,85] define as seguintes características desejáveis no desenvolvimento de estratégias de controle de trajetória, e atribui ao controle ponto-a-ponto a capacidade de atender aos itens 1 e 3.
1.	Continuidade da posição, velocidade e aceleração;
2.	Controle preciso do movimento;
3.	Tempo de percurso e características de velocidade e aceleração impostas.
Essa técnica consiste em gravar alguns pontos da trajetória e em seguida interligar esses pontos através de um algoritmo de interpolação linear no espaço articular. Posteriormente é feito um tratamento de filtragem da trajetória gerada de forma a se obter um perfil de posição parabólico nas extremidades de cada intervalo.
Dentre as vantagens desse método com relação ao anterior podemos citar:
•	Maior rapidez na execução da tarefa;
•	Maior precisão de movimentos;
•	Trajetória livre de imperfeições;
•	Arquivo de pontos pequeno.
Como desvantagem, há apenas o fato de que o esforço computacional é levemente superior.
As seções seguintes irão focalizar com mais detalhes as etapas de interpolação e filtragem do sistema de geração de trajetória ponto-a-ponto implementado no software de controle.
■1.3.3.1 Interpolação
No procedimento para interpolação dos pontos gravados pelo operador, deve-se levar- em consideração alguns critérios que podem afetar o desenvolvi mento adequado da trajetória. Esses critérios dizem respeito principalmente a algumas restrições do sistema., como a aceleração e a velocidade máximas que cada junta pode fornecer, ou a base de tempo escolhida para amostragem dos sinais interpolados. Também são parâmetros importantes e que devem ser levados em consideração, o numero de pontos a serem interpolados entre as extremidades do caminho e o deslocamento angular de cada junta.
Todas as variáveis citadas acima estão, de certa forma, associadas, de maneira que um tratamento apropriado com algumas delas pode ser suficiente para a solução do problema de geração de trajetória no espaço de juntas.
Quando um manipulador se move de um ponto no espaço de trabalho para outro, em geral, todas as suas juntas sofrem um deslocamento, dado pela diferença entre a posição angular final e a posição angular inicial. Esse deslocamento, então deve ser interpolado e posteriormente filtrado, de forma que o manipulador possa se movimentar com o máximo de velocidade e suavidade.
A velocidade máxima desenvolvida por cada junta durante um trecho de trajetória é proporcional ao seu deslocamento e será calculada de forma que todas elas partam e cheguem ao mesmo tempo na posição desejada (condição de sincronização). Se levarmos em consideração apenas o critério de máxima velocidade, fica fácil perceber que cada junta irá gastar um tempo diferente para executar o seu trecho de trajetória, uma vez que elas terão que percorrer distâpcias diferentes a velocidades diferentes.

(4.1)
A equação 4.1 mostra o cálculo do tempo gasto por cada junta (ít), onde Oi e 0ií são as posições angulares final e inicial da junta i respectivamente e	é a velocidade
máxima que a junta i pode desenvolver1.
A questão é que se desconsiderarmos a premissa de movimento sincronizado das juntas, não conseguiremos obter uma trajetória suave. Portanto, devemos tomar como base o tempo gasto pelo manipulador para executar um trecho de trajetória respeitando a condição de sincronização. A equação 4.2 nos fornece a relação desejada.
tc — max
(4.2)

onde tc é o tempo comum gasto pelas juntas para a execução da trajetória da maneira desejada. Percebe-se que a junta que gastaria o maior tempo caso todas desenvolvessem suas velocidades máximas, é que determina a velocidade das demais [Groover,84], ou seja, essa junta irá desenvolver sua ix&gt;max enquanto as outras não. Elas têm que girar numa velocidade menor para que todas possam chegai1 ao mesmo tempo,
Uma vez obtido íc, precisamos agora determinar o número de pontos n a serem interpolados no segmento de trajetória, ou seja, devemos dividir í„ em n intervalos de tempo At,
(4.3)
onde :
Ai é a base de tempo escolhida para amostragem dos sinais; fam é a frequência de amostragem dos sinais.
xNo apêndice A existe uma tabela contendo as velocidades máximas de cada junta do manipulador Kraft.
75
A escolha da base de tempo para, amostragem dos sinais deve levar em consideração o tempo gasto pelo microcomputador para processar as instruções do algoritmo de controle que estão entre dois comandos de envio de pontos, c também o incremento angular, isto é, o incremento de tensão aplicado nos atuadores do manipulador.
Para o sistema Kraft, a base de tempo escolhida foi Aí — lOins. Essa taxa de amostragem mostrou-se adequada porque resultou em movimentos contínuos. Quando a, frequência de amostragem escolhida é menor que a adequada, o manipulador se move de forma visualmente discreta, através de degraus de tensão claramente perceptíveis. Esse movimento provoca uma série de oscilações no sistema e prejudica a, precisão do manipulador ao final da. trajetória. No caso da frequência de amostragem ser maior que a adequada, o manipulador se movimenta segundo uma. curva contínua de posição, velocidade e aceleração, porém, o tempo gasto para a execução de urna tarefa se torna, bastante alto. Deseja-se uma solução de compromisso entre velocidade e continuidade do movimento.
Voltando ao processo de interpolação, podemos agora calcular o incremento de posição a ser enviado para cada junta.
Ag —
(4.4)
n
4.3.3.2 Filtragem
Como foi dito na seção 4.3, para que não haja, grande variação de velocidade durante a execução de uma trajetória, e consequentemente, para que a acurada, do manipulador seja maior, é necessário que seja feito um alisamento nas extremidades de cada segmento linear que forma um caminho no espaço articular. Após o processo de interpolação, tem-se uma trajetória para uma junta i semelhante à. mostrada na figura 4.8
A literatura propõe a. utilização de polinómios cúbicos que obedeçam a pelo menos quatro restrições evidentes para a obtenção de um caminho suave. São elas:
Figura 4.8: Trajetória de uma junta i após o processo de interpolação.
Ás duas restrições adicionais são necessárias para que a função 0{t) seja contínua em velocidade.
•	0(ío) = 0
« Ô(tf) = 0
No sistema desenvolvido, no entanto, utilizou-se um filtro FIR (Finite Impul-sive Response) do tipo Janela Triangular para alisar o sinal interpolado. Este tipo de procedimento é frequentemente utilizado em análise de sinais em freqência, podendo ser aplicado à geração de trajetórias no tempo. A teoria de projeto de filtros afirma que esse tipo de filtro (FIR) é quase sempre restrito a implementações discretas no tempo e que o método mais simples de se projetar filtros FIR é o método das janelas [Oppenheim,89],
•	Cálculo da função Janela Triangular
0 processo de filtragem faz uma convolução do sinal, interpolado com uma janela de duração finita. O algoritmo gera um vetor contendo a trajetória interpolada e um vetor contendo o filtro triangular e em seguida faz a convolução entre os dois vetores. Tal convolução para sinais dicretos no tempo pode ser definida pela seguinte expressão:
Figui’a 4.9: Filtro FIR do tipo Janela Triangular.
	03 K(n)- £ X[Â:J * IV[n - k],	(4.5)
onde:	X é o vetor que contém o sinal a ser filtrado W é o vetor que contém a janela triangular y é o vetor que contém o sinal filtrado k é o número de amostras do filtro n é o número de amostras do vetor resultante 0 exemplo abaixo ilustra melhor o processo de convolução discreta:
Suponhamos que o filtro tenha base 2a = 10, portanto, para que sua área S seja, unitária, sua altura deve valer h = 1/a = 0.2. Para exemplificarmos o procedimento utilizado, suponhamos que a janela contenha 11 amostras, como mostrado na figura 4.10(a) e que o sinal a ser filtrado seja o da figura 4.10(b).
Pára executar a convolução, inicialmente rebate-se o sinal a ser convoluído com a janela, depois, faz-se o sinal “passar” através do filtro, ou vice-versa e a partir daí procede-se o cálculo dos elementos do vetor resultante da seguinte forma: O primeiro elemento de y é o resultado do produto da primeira amostra do filtro pela última amostra do sinal. O segundo, é o prodpto da segunda amostra do filtro pela última do sinal somado
Figura 4.10: (a)Exemplo de filtro triangular, (b)Exemplo de um sinal a ser filtrado.
ao produto da primeira amostra do filtro pela penúltima do sinal, e assim até que todo o sina] “passe” pelo filtro. O número total de pontos do vetor F corresponde à soma do número de pontos da janela com o numero de pontos do sinal, menos um. A figura 4.11 sintetiza esse processo para o exemplo descrito anteriormente.
y(l) = 0 * 10 = 0
y(2) =0*10 + 0.04 * 10 - 0.4
y(3) = 0 * 10 + 0.04 * 10 + 0.08 * 10 = 1.2
y(4) = 0 * 20 + 0.04 * 10 + 0.08 * 10 + 0.12 * 10 = 2.4
p(18) = 0.04 + 30 + 0 *40 = 1.2
y(19) = 0 + 30 = 0
Figura 4.11: Processo de convoluç.ão discreta
Com esse procedimento, obtem-se uma curva sem des continuidades. Essa forma de gerar trajetórias, além de simples é bastante útil, pois apesar de não ter o controle sobre a trajetória real, existem vantagens em se trabalhar no espaço articular. A seguir temos uma relação de motivos que nos levou a implementar também esse modo de geração de trajetória,:
1.	A trajetória é planejada diretamente em termos das variáveis que serão controladas durante o movimento;
2.	O planejamento da trajetória pode ser feito em tempo-real;
3.	As trajetórias no espaço de juntas são mais fáceis de serem planejadas;
4.	Como existe uma correspondência unívoca entre o espaço de juntas e o espaço cartesiano (o inverso é falso), não ocorre o probleima de configurações singulares2 no mecanismo;
5.	Esse tipo de trajetória é a mais apropriada para movimentos de aproximação.
No apêndice A encontra-se a. listagem da rotina que executa, o processo de interpolação e âltragem de trajetórias gravadas no modo ponto-a-ponto.
4.4 Trajetória no Espaço Cartesiano
Para cumprir com sucesso parte dos objetivos propostos no início deste trabalho, foi necessário desenvolver um módulo de geração cartesiana de trajetótia. A diferença básica entre uma trajetória gerada no espaço de juntas e outra gerada no espaço cartesiano é que no caso da primeira, o manipulador sai de um ponto conhecido (ponto de partida) e chega a outro ponto conhecido (ponto de parada), porém, a forma espacial do caminho excursionado pelo garra do manipulador é desconhecida, e está associada à cinemática
2Configurações Singulares ou Singularidades é o nome dado às configurações de um robô nas quais não se consegue resolver o problema da cinemática inversa. Na próxima seção esse tópico será abordado com mais detalhes
particular daquele manipulador. Neste modo estamos preocupados com a evolução da trajetória, em relação à garra do manipulador.
Existem tarefas que exigem um movimento mais refinado, em que o referencial da ferramenta deve seguir um caminho específico, tal como uma reta ou um arco de círculo, e que além disso, esse caminho seja executado com bastante precisão. Em geral, numa tarefa o movimento de aproximação é feito no espaço articular e o movimento de manipulação no espaço cartesiano.
O controle cartesiano é a técnica mais genérica e precisa disponível [Fu,87]. No entanto, ele tem uma série de desvantagens, a começai’ pelo fato de que ele envolve uma validação contínua dos pontos de referência do manipulador e sua subsequente transformação para o espaço das juntas. Isso acarreta um grande número de cálculos a serem executados em tempo real. 0 cálculo do movimento no espaço articulai’, que é simplesmente uma interpolação linear entre dois pontos, consome cerca de 5 a 10% [Paul,81] do tempo de computação necessário para a geração de movimento cartesiano3.
Outra desvantagem desse tipo de movimento é que os métodos numéricos utilizados para a solução do problema., nem sempre convergem para o ponto desejado, embora isso seja raro. Quando isso ocorre, o sistema pára e faz-se necessário posicionar o robô em uma posição vizinha para que o processo possa continuar.
Porém a grande vantagem do movimento cartesiano quando comparado com o movimento articular é que a trajetória executada entre dois pontos é muito bem definida. A figura 4.12 mostra um robô executando uma tarefa que necessita de um movimento em linha reta.
4.4.1	Estratégia Implementada
A geração cartesiana de trajetória implica diretamente na solução da. cinemática inversa. Sabe-se do modelo geométrico direto, visto no capítulo 3, que uma transformação do espaço de juntas para o espaço cartesiano é dado, para pequenos deslocamentos, por:
3O termo Controle Cartesiano específicamente exclui a geração off-tine de trajetória descrita- no cap.l e requer ao invés disso, que o cálculo dos pontos do caminho, assim como as transformações para o espaço de juntas sejam feitos em tempo real.à. medida em que o robô se movimenta.
Figura 4.12: Movimento em Linha Reta.
— Jnxm A$ln.xl	(^■6)
É conhecido também, do modelo cinemático inverso que quando se deseja obter os valores angulares correspondentes a uma determinada configuração do manipulador, a relação usada é a seguinte:
AÀ,IXJ	(4. í)
A aplicação iterativa da equação 4.7 foi a forma escolhida para resolver a cinemática inversa. Á figura 4.13 mostra a evolução do processo. Inicialmente calcula-se o valor Az, que representa o deslocamento total especificado, isto é, a distância entre o ponto inicial (P,) e o ponto final (Py). A aplicação desse As na equação 4.7 gera um vetor ¿L&amp;amp; que não representa o valor angular de cada junta para o movimento desejado, pois como explicado anteriormente, o modelo só é válido para pequenos deslocamentos. Este A# é utilizado na equação 4.6, que por sua vez gera um ponto intermediário (P¡ ) no espaço cartesiano, então, um novo Az é calculado e o ciclo se repete até que o A (9 seja menor que uma tolerância estipulada, e nesse momento, considera-se que o processo
convergiu.
Figura 4.13: Processo de inversão do Jacobiano.
O algoritmo pára, quando Az assume um valor menor que um erro de convergência, no caso, fixado em O.Olmm ou se o número de iterações ultrapassar o valor estipulado para aquele movimento. Nesse caso diz-se que o sistema não convergiu.
0 valor das variáveis articulares no ponto objetivo (Pj) é encontrado a. partir da integração dos Aéf. Consequentemente:

(4.8)
onde:
&amp;amp;f é o vetor das variáveis articulares relativas ao ponto objetivo Pf
é o vetor das variáveis articulares relativas a origem do deslocamento
A$. é o vetor de variação das variáveis articulares no incremento i n é o número de incrementos
O grande dilema do problema cinemático é a inversão do Jacobiano. Além do processo numérico ser mais lento, algumas situações desconfortáveis podem ocorrer.
Se numa determinada configuração o determinante do Jacobiano é nulo, diz-se que esta é uma configuração singular. Nessas configurações a inversa do Jacobiano não pode ser definida, portanto essa é uma situação que deve ser evitada. Outro problema ocorre quando a matriz jacobiana não é quadrada, provocando também a impossibilidade de obtenção de sua inversa. ,
Uma tarefa, qualquer definida no espaço operacional ou cartesiano de um robô, exige no mínimo 6 graus de liberdade para. sua. execução [Ferreira.,87], Denotando m como o número de graus de liberdade necessários para a. execução de uma tarefa en o número de graus de liberdade do robô, as seguintes afirmações são válidas:
« Se n &amp;lt;m, então não existe solução para o sistema;
» Se n = m, então dois casos podem ocorrer:
1.	Existe um número finito de soluções fora, das configurações singulares
2.	Existe um número infinito de soluções nas configurações singulares [Gorla,84]
• Se n &gt; m, então o robô é redundante e existe um número infinito de soluções. Para, a obtenção de uma solução única, introduz-se restrições adequadas ao espaço operacional, ou usa-se um método que minimize algum critério, por exemplo a energia cinética do movimento.
Há ainda o problema da matriz J ser mal-condicionada, o que pode levar o sistema a resultados indesejados e também o problema de não convergencia do método utilizado.
Para enfrentar problemas dessa natureza, lança-se mão de artifícios como a. pseudo-inversa e a. inversa generalizada,, que são ferramentas utilizadas por alguns métodos numéricos para inversão do Jacobiano.
Diversos métodos tem sido propostos na literatura com esse fim, porém, a escolha de um algoritmo específico deve levar em consideração o tipo de aplicação para a. qual este será utilizado. Determinadas aplicações necessitam de uma convergência rápida, não importando muito os pontos intermediários gerados pelo algoritmo. Um exemplo de aplicação desse tipo é a identificação de parâmetros de um manipulador.
Outras aplicações, tais como, as de soldagem, exigem que o manipulador se mova ao longo de uma linha reta, e para isso, é interessante que o algoritmo seja capaz de gerar uma trajetória bem comportada. Fayan [Fayan.,92] [Dias,93] estudou o comportamento de alguns algoritmos numéricos para inversão da matriz jacobiana e obteve resultados
bastante interessantes, que foram aproveitados para o desenvolvimento do módulo de geração cartesiana de trajetória.
esses resultados também foram aproveitados em um estudo paralelo que está sendo realizado na Unicamp no sentido de projetar e implementar um ambiente e uma linguagem de programação de robôs. A automatização do manipulador Kraft, também neste caso, e’ o objetivo do projeto [Coutmho,93j.
4.5	Conclusoês
Este capítulo abordou as três formas de geração de trajetória: que o sistema proposto é capa^ de realizar. Foi apresentado também a estratégia para interpolação e filtragem de trajetórias ponto-a-ponto e o processo de geração cartesiana de trajetórias.
0 capítulo seguinte irá mostrar a metodologia utilizada para a execução de testes e validação do sistema Alguns resultados experimentais também serão apresentados.
Capítulo 5
Implementação e Validação do
Sistema
5.1	Introdução
Este capítulo tem como finalidade apresentar a metodologia e o aparato experimental utilizado para a execução de testes do sistema proposto e desenvolvido. Basicamente, as unidades testadas foram:
•	0 hardware de comunicação entre o microcomputador e o controlador do manipulador Kraft (ICMK) e as placas de conversão A/D e D/A;
•	O módulo de Geração de Trajetória, através da gravação ponto-a-ponto.
5.2	Teste do Hardware de Comunicação
Os testes executados no software CMK e na interface de hardware ICMK estão, de certa forma, integrados, visto que para testai’ convenientemente o ICMK, é necessário que o software desenvolvido (CMK) esteja em funcionamento.
Uma facilidade do CMK que se mostrou bastante útil, foi o módulo chamado leste de Hardware. Este módulo permite testar não semente a. interface KJM.K como também as placas de conversão A/D e D/A e os sinais digitais.
5.2.1	Funcionamento das Placas A/D e D/A
Para, verificarmos o funcionamento adequado das placas A/D e D/A a. montagem mostada. na. fig. 5.1 é realizada,1.
Figura 5.1: Ligação do sistema para teste das placas A/D e D/A.
Inicialmente o PC é colocado no modo Teste de Hardware^ então aparece uma. mensagem para, que as placas de conversão A/D e D/A sejam interligadas. A saída da. placa. D/A, de conector DB-37 é ligada à entrada (também de conector D13-37) da placa A/D. e inicía-se um processo de geração/coo ver sao/comparação.
0 microcomputador envia, sinais na forma digital para a placa D/A que os converte para a forma analógica e que por sua. vez-, através da placa. A/D são reconvertidos para, digital e enviados de volta ao microcomputador, que faz a comparação entre os valores enviado e recebido e emite uma tabela de erros para cada canal medido. Se um desses valores de erro ultrapassa- um determinado valor de tolerância, a. conversão é considerada, incorreta e uma mensagem para que seja feita uma verificação nas placas é enviada. As entradas e saídas digitais podem ser testadas de forma semelhante.
Os conectores foram montados de forma a permitir a execução desse teste, que por ser um módulo permanente no sistema, se caracteriza como uma inestimável ajuda.
’Esse teste Cai executado quan/io da implementação do sistema no manipulador Kraft
ao operador na, detecção e eliminação de possíveis problemas de mabfunciona,mento do mesmo.
5.2.2	Chaveamento dos Modos de Operação
Com o sistema montado na. forma normal, o microcomputador também é capaz de verificar se o chaveamento entre os três modos de operação (Míyaitfjramenlo, Controle e Simulação de Voo) estão sendo realizados corre Lamente, Este envia, um sinal de controle para que o ICMK cha.ve.ie o sistema num dos três modos e a. seguir, envia, um tremi de pulsos de frequência baixa de forma- a, fazer piscar o led do referido modo de operação.
Um outro teste que foi realizado consistiu em substituir o master por ura gerador de funções e o slave por um osciloscópio, com o objetivo de injetar sinais conhecidos no sistema de forma a possibilitar a verificação do nível de ruído introduzido pelo conjunto FC/interface ICMK, além de observações acerca- da. taxa de amostragem dos sinais e das conversões A/D e D/A.
5.3	Teste do Módulo de Geração de Trajetória
Para a validação do sistema,, optou-se pela avaliação do seu comportamento durante a execução de unia, trajetória criada e filtradít no modo ponto-a-ponto.
5.3.1	Obtenção das Trajetórias
0 procedi men to adotado para a, obtenção de tra jetórias suaves e posterior realização do teste final do sistema, utilizando essas trajetórias está descrito abaixo:
1.	Gerar uma trajetória ponto-a-poiito (.PTO), por exemplo, via prograrna.çã.o off-line;
2.	A partir dessa trajetória ponto-a-ponto realizar uma, interpolação linear, corno função da taxa de amostragem dos sinais, gerando assim uma trajetória interpolada. (,.INT);
3.	Submeter a. trajetória interpolada à janela triangular2 de forma a obter uma trajetória final filtrada f.FIL);
4.	Corri o auxílio de softwares de visualização gráfica, verificar se a trajetória filtrada corresponde ao que a literatura, considera corno ideal para, um melhor comportamento dos controladores das juntas do manipulador (fig. 4.5);
5.	A partir de urna bancada de testes, verificar a resposta do controlador a essa trajetória filtrada.
Para exemplificarmos os procedimentos adotados, uma. trajetória, foi escolhida, para movimentar a. junta 1 de uma excursão de 60 graus. .A decisão de movimentar apenas uma junta deu-se pelo fato de simplificar a análise dos resultados.
Com esse, objetivo, a trajetória ponto-a-ponto escolhida é definida pela tabela 5.1:
A figura 5.2 sintetiza todo o procedimento para, geração da trajetória, final, desde o arquivo ponto-a-ponto até o arquivo filtrado. Um módulo de testes de colisão poderia ser implementado no software de controle, tornando, assim o sistema mais completo e sofisticado, A trajetória, interpolada foi submetida ao tratamento de filtragem e um
2 Uma janela retangular também foi implementada no sistema. Esse filtro tem uma característica, de suavizarão melhor que o triangula^
arquivo de pontos (,F.I.L) foi gerado, resultando na curva, da. figura. 5,3, que mostra, um perfil típico das trajetórias geradas através da utilização desse processo.
'	TESTES
i DE
t COLISÃO
Figura 5.2: Estrutura, do sistema de geração de trajetória ponto-a-ponto.
Essa curva filtrada foi comparada, com axpielas que a, literatura considera como ideais para a obtenção de um movimento suave (fig. 4.5). Portanto, chegou-se à conclusão que o sistema de gravação ponto-a-pon t o atingiu seus objetivos plenamente.
De forma a obtermos uma melhor avaliação das características do controle, é proposta uma análise de sincronozação das juntas, obtida a partir da curva gerada e apresentada na figura 5.4. Se durante o processo de geração da trajetória tomou-se o cuidade de se garantir a sincronização do movimento das juntas e se o controle à trajetór a imposta for eficiente, o perfil dessa curva deverá se aproximar de uma reta.
Figura 5.3: Trajetório interpolada e filtrada.
5.3.2	Validação do Sistema
Visando uma melhor avaliação do software desenvolvido, decidiu-se submeter o manipulador Kraft às trajetórias interpoladas e filtradas dos passos anteriores de maneira a medir o quã.o fielmente o manipulador responde a cada urna dessas trajetórias. Esse teste, que será realizado no Centro de Pesquisas da Petrobrás (CENPES) no Rio de Janeiro, tem como objetivo justificar o esforço de implementação do sistema de filtragem.
Para a. sua realização será necessário a seguinte bancada:
•	Dois microcomputadores compatíveis corn a linha IBM-PC-AT;
•	A interface ICMK;
•	O manipulador Kraft.
Figura 5.4: Sincronização do movimento das juntas Q e S.
5.3.2.1 Procedimento
Para a validação dos algoritmos implementados, tuna estrutura como a mostrada: na figura:
5.5	será montada. Ambos os computadores estarão executando o software CMK, estando o PC1 no modo controle (enviando urna trajetória) e o PC2 rio ¡nodo 77mn,?ío7'amen.íí&gt; (lendo e gravando os sinais do slave), A idéia é comparar os sinais enviados pelo PC1 com os sinais realizados pelo slave e lidos pelo PC2 , de forma, a. avaliar se, do fato, os controladores das juntas respondem melhor ao sinal filtrado.
Para essa montagem teremos que instalar a placa D/A no PC1 e a placa A/I) no PC2. Quando o programa CMK está setado em um modo de operação, ele chaveia. automaticamente a interface ICMK para aquele modo, através de um sinal digital enriado pela placa A/D.
Visto que a interface ICMK deverá estar chaveando o sistema, no modo controle
Figura 5.5: Esquema da bancada para leste de verificação do comportamento do 'manipulador ao executar uma trajetória interpolada e uma filtrada.
(único modo que possibilita o envio de trajetórias), e que o sinal digital para chaveamento da interface provém da placa A/D, que estará instalada no PC2, que por sua vez estará setado no modo monitoramento (necessário para gravar o arquivo de pontos), urna alteração no programa CMK que estará, rodando no PC2 terá que ser feita de forma, que quando este microcomputador é posto para monitorar, ele seta o ICMK não mais para monitoramento) mas sim, para controle.
Com os arquivos resultantes desse experimento, cai cuia remos o snia.I de erro entre a trajetória enviada e a executada. Esperamos concluir com esse resultado que o sistema corresponde de forma satisfatória às nossas expectativas, ou seja, que as trajetórias impostas sejam capazes de suavizai' o movimento do manipulador, aumentando sua. precisão na execução de tarefas automatizadas.
Comentários Finais e Conclusões
Este trabalho apresentou o desenvolvimento de um. sistema, de geração automática de trajetórias voltado para a utilização em manipuladores tele-operados. Algumas características desse sistema, sao considerados a seguir:
*	Característica de movimento suave com respeito a velocidade e a aceleração das juntas;
•	Possibilidade de programação on-line ou off-line;
» Dois modos de geração de trajetória on-line: Geração no espaço cartesiano e no espaço interpolado de juntas
Para, a tornar possível a implementação deste sistema, foi desenvolvida e apresentada. uma interface de comunicação entre o manipulador Kraft e um microcomputador compatível com a linha IBM-PC-AT. Também foi feito todo um trabalho de determinação do modelo geométrico dos robôs.
Mesmo na. impossibilidade de se testar o sistema completo instalado no manipulador Kraft, considera-se os resultados obtidos satisfatórios, visto que o sistema, alcançou a. totalidade dos objetivos inicial mente propostos.
A.s próximas etapas deste trabalho devem estar voltadas para a utilização de métodos diferenciados para a realização da filtragem dos arquivos de pontos da trajetória e para a provável possibilidade de se verificar a resposta do manipulador a arquivos tratados e não tratados.
Também é motivo de estudos, a viabilidade do desenvolvimento de um sistema de tratamento de colisões em tempo-real durante a execução do algoritmo de modelagem
inversa, para, ser implantado no mesrno manipulador, dando a este uni grau ainda maior de segurança.
Finalmente, a partir do sistema proposto neste trabalho, sem possível a. ut,i~ lixação de um manipulador submarino, inicial mente projetado para o controle do tipo rnaster/slave. em um ambiente hostil executando tareias automatizadas de uma forma, simples e eficiente.
Apêndice A
Listagem da Rotina de Interpolação e Filtragem
programs filtro;
uses graph , crt ;
type
pt = array Cl..3 ] of real ; filtre„t = record
a : integer' ;
k : array[-50..50] of real ; end ;
var
t_int : array[-100..700] of pt ; t„fil : array[-50..300] of pt ;
i ,j}errorcode , no„pt : integer ; nb-total : integer ;
filtre : filtre_t ;
tecla : char ;
const
t_obj : array[1..7] of pt = ((10 , 10 , 10 ) ,
(15 , 200 , 10 ) , (70 , 80 , 10 ) , (70 , 80 , 10 ) , (300 f 500 , 10 ) , (450 , 50 , 10 ) , (600 } 430 3 10 ) );
device: integer = 4 ; mode : integer = 1 ; vmax : real = 10;
stab : integer = 0 ;
procedure drw_obj ;
begin
for i := 1 to 3 do
begin
setcolor ( 2 ) ;
line (round(t_obj [ i	][!]) 3 round(t„obj [ i ] [2] ) ,
round(t_obj [ i + 1 ][!]) , round(t„obj [ i+1 ] [2] )) end;
end ;
procedure putx	( x j y , cor ; integer )	
var		
1 &gt; j :	: integer ;	
begin.		
setcolor ( cor ) ;		
y := y	* 55 div 100 ;	
line (	x-l3yfx+l,y	) ;
line (	x,y-l,,x,y+l	) ;
end ;
procedure putxx ( x , y , cor : integer ) ; var
i , j : integer ; begin
setcolor ( cor ) ;
y : =	y * 55 div :	100 ;	
line	( x - 2 , y	, x + 2 , y	) ;
line	( x , y ~ 2	&gt; x , y + 2	) ;
end ;			
procedure interpola ( pd		, pf : pt )	J
var
delta	J
inc	- pt ;
dm ax	: real ;
i , j	, nb „ aux : integer
begin
¿max := 0 ;
for i := 1 to 3 do
begin
delta [ i ] := pf [ i ] - pd [ i ] ;
if abs (delta [ i ] ) &gt; abs ( dmax ) then dmax := delta [ x] end ;
nb := round ( abs(dmax) / vmax ) - 1 ;
for i := 1 to 3 do inc [ i ] := delta [ i ] / nb ;
no_pt := no_pt + 1 ;
t_int [ no_pt ] pd ;
putxx ( round (t_int [ no„pt ][ 1 ] )
, round (t_int [ no_pt ][ 2 ] ) , 15 ) ;
aux := stab;
if pd[l]=pf[l] then
if pd[2]=pf[2] then
if pd[3]=pfE3] then stab := 2*filtre.a;
if stab &gt; 0 then
begin
for j := 1 to stab do
begin
no„pt ;= no„pt + 1 ;
t_int[no_pt]:=t_int[no_pt-l];
end ;
end ;
stab := aux;
for j := 1 to nb - 1 do
begin
no„pt := no_.pt + 1 ;
for i := 1 to 3 do t_int [ no_pt
Hi] := t„int
inc [
[
i
no_pt - 1 ]
1 ;
end ;
putx ( round (t.int [ no_pt ] [ round (t_int [ no_pt ][
3
end ;
1
2
]
1
)
)

6 ) ;
procedure traj_int var
i : integer begin -
no„pt t„int for i no„pt
J
&gt;
- 0 ;
[ no_pt ] := t_obj [ 1 ] ;
:= 1 to 6 do interpola ( t_obj := no_pt + } ;
[
i
]

t_obj [ i
+
1 ] ) ;
t„int [ no_pt ] := t_obj [ 7 ] ;
putxx ( round (t„int [ no_.pt ][ 1 ] )
, round (t„int [ no_.pt ] [ 2 ] ) , 15 ) ;
for i := 1 to 40 do
begin
t_int [ no„pt + i ] := t_int [ no„pt ] ; end ;
nb_total : = no_pt + 40 ;
end ;
procedure get_filtre ;
var
g , pente , ar : real ;
i : integer ;
begin.
with filtre do
begin
write ( ’ a = &gt; ) ; read ( a ) ;
ar := a ;
pente := 1 / ar / ar ;
for	i i= - 50 to 50 do k£i]	- = 0 ;
for	i := -a to 0 do k[i] :=	pente * ( i + ar ) ;
for	i := 1 to a do kEi] : =	- pente * ( i - ar ) ;
end ;
end ;
procedure traj_flitre ;
var
i , j , 1 : integer ;
begin
for i := -100 to 0 do t_int [ i J := t„int El];
for i := -filtre.a to nb_total do
begin
for j := 1 to 3 do
begin
t_fil [ i ] [ j J := 0 ;
for 1 := - filtre.a to filtre.a do
begin
t_fil E i ]E j ] := t_fil L i ][ j ] +
t_int [ i + 1 ][j] * filtre.kEl] , end ;
end ;
puts ( round ( t_fil [ i ][ 1 J ) , round (t„fil [ i ][ 2 ] ) ,13 end ;
end ;
begin directvideo := false ; device ;= detect ;		
initgraph ( d errorcode :-	evice , mode , &gt; ’) ; graphresult;	
repeat		
gotoxy (	2 , 19 ) ;	
writein	( &gt;	’ )•&gt;
writein	( 3	1 );
writein	( ’	3 );
writein	( 3	
writein	( 3	1 );
write (	I	' ) ;
gotoxy (	2 , 19 z) ;	
write ( JVmax = 1 ) ; read ( vmax ) ;
get„filtre ;
write ( ‘ estabilizacao = ’ ) ; read ( stab ) ;
tecla := J J;
traj_int ;
traj_jfiltre ;
if ( tecla = ?c’ ) or (tecla = ’CJ ) then cleardevice ;
writein;
write ( ’ T : para terminar , C para apagar ,uma outra tecla para cc. writein ;
tecla := readkey ; until ( tecla = 5t’) or ( tecla = ’T’ ) ;
closegraph ;
end .
Apêndice B
Características Técnicas
.1 Características do Manipulador Kraft
.1,1 Especificações Gerais
Máximo Alcance
Capacidade de Carga, com o Braço Extendido
Graus de Liberdade de Movimento
130 cm
34 kg
Seis (+ abrír/fechar garra)
.1.2 Efetuador
Padrão
Abertura da Garra
Força, de Fechamento da Garra
Método de Controle
Garra. Paralela
.10 cm
90 kg
Controle de Força. Proporcional
.1.3 Movimento das Juntas
eixos
Excursão(gr)
Velocidade (gr/s)
S boulder A zim uth Shoulder Elevation Elbow Pivot. Wrist Pitch Wrist Yaw t ft i o. 4"^, L	j-"’. ■$ rx 4 ."X	180 1.20 no 100 105	80 65 50 .100 1.1.5
VVldSL IVOld tC Modo 1 (master)	180	200
Modo 2 (Continuo)	-	210
.2 Características do Robô Manotee r3
.2.1 Especificações Gerais
Acionamento
Alimentação
Graus de Liberdade de Movimento
Capacidade de Carga
Momento Nominal sobre o eixo 6
Momento de Inércia sobre o eixo 6
Repetí bil idade
Pêso
.2.2 Velocidades
Ponto a Ponto
Linear
Elétrico
2*20 V, 3 fases, 50 - 60 Hz Seis
34 kg
22 N.rn
0,94 kg.m2
± 0,1 iam
920 kg
5.9 rn/s
1.5 rn/s
.2.3 Acelerações
Ponto a Ponto:
Mãx. Centrífuga.
Máx. Tangencial
Linear: Max. em caminho continuo
10
9.8 rn/s3
6 m/íP
.2.4 Movimento das Juntas
eixos
Excursão (gr)
Velocidade (rpm)
1
2
3
4
5
6
± 165	33
± no	16
± .195	33
± 190	60
± 120	66
± 265	46
.3 Características da Placa A/D Utilizada
Canais de Entrada. Analógica
Simples
Diferenciais Multiplexadas
Canais de Saída Analógica
Canais de Entrada Digital
Canais de Saída Digital
Resolução do Conversor A./D
Contadores Prograrnáveis/Tcmporizadores
Oscilador a Cristal
16
8
até 4
16
16
.12 bits (4096 níveis)
3 (1.6 bits)
2 M llz
A placa conta ainda com as seguirdes características:
*	Sequência, de leitura e ganhos programáveis através de memória de canais;
•	Aquisição em “Burst” propiciada, por bufFer (FIF’0) de 16 posições;
*	Suporte para DMA (Direct Memory Access: Acesso Direto à Memória),, permitindo a, velocidade máxima de coleta de sinais independente da UCP do microcomputador;
•	Possibilidade de, com o auxílio de circuitos externos, realizar amostragem simultânea de até 16 canais;
Suporte a interrupções.
.4 Características da Placa D/A Utilizada
Canais de Saída Analógica
Faixas de Saída Configuráveis Bipolares
Unipolares
Mínima- (..larga de Saída.
Resol u ção
Tipos de Representação Decimal
Tipos de Atualização das Sardas
Tempo de conversão
Contadores Programáveis
Oscilador a Cristal
Endereçamento Ajustável
Espaço de Endereçamento
Interr upçõcs Sel ecion áveis
8
± 10,0 V
± 5,0 V
± 2,5 V
0 a 10,0 V
0 a. 5,0 V
10	KOhm
12 bits (4096 níveis)
Ccmrpleiiiento de Dois
Binário cora Off-set
Indivídua! por Canal
Simultânea Comandada pela UCP Simultânea comandada pelo Contador 4 ps (máximo)
3
2 MHz
de 0200b a 03F8h.
8	Posições
IRQ2, ÍRQ3, IRQ4, IRQ5
.5 Esquema Eletrônico da Placa ICMK
Figura .6: Circuito eletrônico da placa, ICMK
Apêndice C
Manipulador Submarino Kraft - Matrizes de Passa gem A,_i.í
Definindo cíf ™ cos(Oi) e = sen(ffj)y temos:
	C$1	0		0
Aj,i ~	0	0	-c^	0
		.1	0	d\
	0	0	0	1
	C$3	— .5 $3	0	«3-C$3
-4 2,3	=	S03	C$3	0	G3.í;#3
	0	0	1	0
	0	0	0	:!
		0		0
A},5	—	&lt;5	Ü		0
	0	1	0	0
	0	0	0	1
	c&amp;amp;2	-s02	0	(¡.-¿.c02
	sOs	dh	0	as-d)s
■^1,2				
	0	0	1	0
	0	0	0	.1
	■ dh	0	~sO.i	CU-C04
	SÓlf	0	díi	(í. 4 T 3 O4
/13,-t	~				
	0		0	0
	0	0	0	I
				
	C$6	~d)b	Ü	0
	s06	c$6	0	0
'45,6	“	0	0	1	¿6
	0	0	0	1
Bibliografia
[Aust,90] Aust, E.; Boke, M.; Gustmann, M..; Hahn, G.; Niemann, H.R.; Schultheiss,
“Development and Testing of a Freely Programmable Robot for Work in Deep
Water”, SPE 1990 - Latin American Petroleum Conference - IV Congresso Brasileiro de Petroleo - Rio Centro, Rio de Janeiro, BRAZIL, P ETRO BRÁS,IB P,SPE, pp.OL
18, 1990.
[Campos ,93] Campos. R., “Implementação de um Mecanismo de Calibração e Identificação de Parâmetros para Robôs”.,lese de Mestrado, Faculdade de Engenharia Mecâmca-Unicamp, Campinas, SP, 1993
ware Aplicado a Robótica”.,Tese de Mestrado, Faculdade de Engenharia. Mecânica-Unicamp, Campinas, SP, 1993
[Craig,89] Craig, J. J., “ Introduction to Robotics : Mechanics and Control,” Addison-Wesley, 2ed., 1989.
[Denavit,55] Denavit, J., Harternberg, R. S., “A Kinematic Notation for Lower-Pair Mechanisms Based on Matrices.'" in Journal of Applied Mechanics, pp. 215-221, Jun, 1955.
[Dias,93] Dias, C. H., “Implementação Experimental de u.m Supervisor de Controle para Robôs Industriais”.,Tese de Mestrado, Faculdade de Engenharia Mecânica-Uni camp, Campinas, SP, 1992
[Fayan,92] Fayan, B. L,, “Estudo e Especificação de um Supervisor de Controle para um Robô Industrial”.,Tese de Mestrado, Faculdade de Engenharia Mecânica-Unicamp,
Campinas, SP, 1992
[Ferreira,87] Ferreira, E. P., “Robótica”, II Escola Brasileiro-Argentina de Informática, Buenos Aires, Argentina, 1987
[Fu,87] Fu, K. S., Gonzalez, R. C., Lee, C, S. G. “Robotics Control, Sensing, Vision, and Intelligence,” McGraw-Hill,inc., 1987.
[Gorla,84] Gorla, B.,Renaud, M., “Modeles des Robots Manipulateurs: Application à Leur Command”, Cepadues Editions, Toulouse, 1984.
[ G roo ver ,84] Gruver, W. A., “Indus trial Robot P rogramm ing Languages: A. Compara!, i ve Evaluation,” in I IS EE Transactions on System Man and Cybernetics, Vol. SMC-14, li. 4, pp. 565-570, 1984.
[Kelley,89] Kelly-Bootle, S., “Mastering Turbo C,” Sybex, Inc., 1989.
[Ker,78] Kernighan, B., Ritchie, D., “The C Programming Language,” Prentice-Hall, 1978.
[Kraft,85] Kraft, “Underwater Manipulator System”, 1985;
[Lee,84] Lee, C. S. G., and Ziegler, M., “A Geometric Approach in Solving the Inverse Kinematics of PUMA Robots”, mlEEE Trans. Aerospace ann Eletronic Systems, vol. AES-20, No. 6, pp. 695-706, 1984.
[Lynx ,89] Lynx Tecnologia Eletrônica Ltd a., “CAD 12/36 Manual do Usuário e de Referência”, 1989;
[Lynx,91] Lynx Tecnologia Eletrônica. Ltda, “ODA .1.2/08 Manual do Usuário e de Referência”, 1991;
[Miss,92] Miss, R. W., Schultheiss, G. F. “The Design of an Algorithm For the Control of Redundant Kinematic Chains”, 5th ICAR, Pisa, 1992.
[Niemann,92] Niemann, H. R.; Aust, Gustmaun, M.; E,; Hahn, G.: “A Six DOF Robot Allows Diverless Intervention”, GKSS 92/E/44, GERMAN Y, 1992.
[Oppenheim,89] Oppenheim, A. V.; Schaffer R. W.; “Discrete-time Signal Processing’1, Prentice-Hall International inc.: 1.989
[Paul,81] Paul, R. P,, ‘'Robot Manipulator: Mathematics, Programming and Control'1. MIT Pess, Cambridge, Mass, 1981.
[Pieper,68] Pieper, D, L, “The Kinematics of Manipulators under Computer Control", Artificial Intelligence. Project Memo No, 72., Computer Science Department, Stanford University, Palo Alto, CA, 1968.
[Rosário,91] Rosario, J.M.; Weber, II.1.; Morooka, C-: “Development and Control of Advanced Robots for Underwater Tasks”, 5t.h ICAR, Pisa, Italy, pp. 1792-1795, 1991.
[Sararnago,93] S ar am ago, M. A. P., “Projeto e Desenvolvimento de um Sistema de Cali-bra.ção e Medida de Precisão para Robôs Industriais”.,Tese de Mestrado, Faculdade de .Engenharia Mecânica-Uni camp, Campinas, SP, 1993
[Sch.1 ldt .90] Schildt, H., “ C The Complete Reference,” McGraw-.11 ill, Inc., 1990.
[Snyder,85] Snyder, W. E., “Industrial Robots: Computer Interfacing and Control”, Prentice Hall, Inc,, 1985.
[Souza,92] Souza, J. P., “Procedimento Automático para Aquisição e Trata,mento do Movimento de um Robô”..Tese de Mestrado, Faculdade de Engenharia, Mecânica-Unicamp, Campinas, SP, 1992</field>
	</doc>
</add>